// Code generated from RFC4512.g4 by ANTLR 4.13.1. DO NOT EDIT.

package antlr4512 // RFC4512
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type RFC4512Parser struct {
	*antlr.BaseParser
}

var RFC4512ParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func rfc4512ParserInit() {
	staticData := &RFC4512ParserStaticData
	staticData.LiteralNames = []string{
		"", "'NAME'", "'DESC'", "'SUP'", "'MUST'", "'MAY'", "'ABSTRACT'", "'STRUCTURAL'",
		"'AUXILIARY'", "'EQUALITY'", "'ORDERING'", "'SUBSTR'", "'ING'", "'SYNTAX'",
		"'USAGE'", "'userApplication'", "'directoryOperation'", "'distributedOperation'",
		"'dSAOperation'", "'SINGLE-VALUE'", "'COLLECTIVE'", "'NO-USER-MODIFICATION'",
		"'APPLIES'", "'AUX'", "'NOT'", "'FORM'", "'OC'", "'OBSOLETE'", "':'",
		"'='", "';'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "OpenParenthesis",
		"CloseParenthesis", "ODelim", "MacroSuffix", "NumOID", "ExtensionName",
		"QuotedDescriptor", "QuotedString", "MinUpperBounds", "Digit", "NFLabel",
		"OCLabel", "ATLabel", "LSLabel", "MRLabel", "MULabel", "DSLabel", "DCLabel",
		"Descr", "SP", "NEWLINE", "LineComment",
	}
	staticData.RuleNames = []string{
		"fileparse", "definitions", "objectClassDescriptions", "objectClassLabel",
		"objectClassDescription", "oCKind", "abstractKind", "structuralKind",
		"auxiliaryKind", "oCSuperClasses", "attributeTypeDescriptions", "attributeTypeLabel",
		"attributeTypeDescription", "minimumUpperBounds", "aTEquality", "aTOrdering",
		"aTSubstring", "aTSuperType", "aTUsage", "userApplication", "directoryOperation",
		"distributedOperation", "dSAOperation", "aTSingleValue", "aTCollective",
		"aTNoUserModification", "matchingRuleDescriptions", "matchingRuleLabel",
		"matchingRuleDescription", "matchingRuleUseDescriptions", "matchingRuleUseLabel",
		"matchingRuleUseDescription", "mRUApplies", "lDAPSyntaxDescriptions",
		"lDAPSyntaxLabel", "lDAPSyntaxDescription", "dITContentRuleDescriptions",
		"dITContentRuleLabel", "dITContentRuleDescription", "dCRNot", "dCRAux",
		"dITStructureRuleDescriptions", "dITStructureRuleLabel", "dITStructureRuleDescription",
		"structureRules", "dSRSuperRules", "structureRule", "dSRForm", "nameFormDescriptions",
		"nameFormLabel", "nameFormDescription", "nFStructuralOC", "definitionObsolete",
		"definitionSyntax", "definitionMust", "definitionMay", "definitionDescription",
		"definitionName", "definitionExtensions", "definitionExtension", "definitionLabelDelim",
		"oIDs", "attributeDescription", "oID", "openParen", "closeParen", "numericOIDOrMacro",
		"macro", "numericOID", "macroSuffix", "number", "attrOptions", "descriptor",
		"extensionValue",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 52, 2362, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7,
		73, 1, 0, 3, 0, 150, 8, 0, 1, 0, 3, 0, 153, 8, 0, 1, 0, 1, 0, 1, 0, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 167, 8, 1, 11,
		1, 12, 1, 168, 1, 2, 1, 2, 1, 2, 5, 2, 174, 8, 2, 10, 2, 12, 2, 177, 9,
		2, 1, 2, 1, 2, 4, 2, 181, 8, 2, 11, 2, 12, 2, 182, 1, 3, 1, 3, 1, 3, 1,
		4, 1, 4, 5, 4, 190, 8, 4, 10, 4, 12, 4, 193, 9, 4, 1, 4, 3, 4, 196, 8,
		4, 1, 4, 3, 4, 199, 8, 4, 1, 4, 5, 4, 202, 8, 4, 10, 4, 12, 4, 205, 9,
		4, 1, 4, 1, 4, 5, 4, 209, 8, 4, 10, 4, 12, 4, 212, 9, 4, 1, 4, 3, 4, 215,
		8, 4, 1, 4, 3, 4, 218, 8, 4, 1, 4, 4, 4, 221, 8, 4, 11, 4, 12, 4, 222,
		1, 4, 1, 4, 4, 4, 227, 8, 4, 11, 4, 12, 4, 228, 1, 4, 1, 4, 5, 4, 233,
		8, 4, 10, 4, 12, 4, 236, 9, 4, 1, 4, 3, 4, 239, 8, 4, 1, 4, 3, 4, 242,
		8, 4, 3, 4, 244, 8, 4, 1, 4, 4, 4, 247, 8, 4, 11, 4, 12, 4, 248, 1, 4,
		1, 4, 4, 4, 253, 8, 4, 11, 4, 12, 4, 254, 1, 4, 1, 4, 5, 4, 259, 8, 4,
		10, 4, 12, 4, 262, 9, 4, 1, 4, 3, 4, 265, 8, 4, 1, 4, 3, 4, 268, 8, 4,
		3, 4, 270, 8, 4, 1, 4, 4, 4, 273, 8, 4, 11, 4, 12, 4, 274, 1, 4, 1, 4,
		5, 4, 279, 8, 4, 10, 4, 12, 4, 282, 9, 4, 1, 4, 3, 4, 285, 8, 4, 1, 4,
		3, 4, 288, 8, 4, 3, 4, 290, 8, 4, 1, 4, 4, 4, 293, 8, 4, 11, 4, 12, 4,
		294, 1, 4, 1, 4, 4, 4, 299, 8, 4, 11, 4, 12, 4, 300, 1, 4, 1, 4, 5, 4,
		305, 8, 4, 10, 4, 12, 4, 308, 9, 4, 1, 4, 3, 4, 311, 8, 4, 1, 4, 3, 4,
		314, 8, 4, 3, 4, 316, 8, 4, 1, 4, 4, 4, 319, 8, 4, 11, 4, 12, 4, 320, 1,
		4, 1, 4, 5, 4, 325, 8, 4, 10, 4, 12, 4, 328, 9, 4, 1, 4, 3, 4, 331, 8,
		4, 1, 4, 3, 4, 334, 8, 4, 3, 4, 336, 8, 4, 1, 4, 4, 4, 339, 8, 4, 11, 4,
		12, 4, 340, 1, 4, 1, 4, 4, 4, 345, 8, 4, 11, 4, 12, 4, 346, 1, 4, 1, 4,
		5, 4, 351, 8, 4, 10, 4, 12, 4, 354, 9, 4, 1, 4, 3, 4, 357, 8, 4, 1, 4,
		3, 4, 360, 8, 4, 3, 4, 362, 8, 4, 1, 4, 4, 4, 365, 8, 4, 11, 4, 12, 4,
		366, 1, 4, 1, 4, 4, 4, 371, 8, 4, 11, 4, 12, 4, 372, 1, 4, 1, 4, 5, 4,
		377, 8, 4, 10, 4, 12, 4, 380, 9, 4, 1, 4, 3, 4, 383, 8, 4, 1, 4, 3, 4,
		386, 8, 4, 3, 4, 388, 8, 4, 1, 4, 3, 4, 391, 8, 4, 1, 4, 5, 4, 394, 8,
		4, 10, 4, 12, 4, 397, 9, 4, 1, 4, 3, 4, 400, 8, 4, 1, 4, 3, 4, 403, 8,
		4, 1, 4, 5, 4, 406, 8, 4, 10, 4, 12, 4, 409, 9, 4, 1, 4, 3, 4, 412, 8,
		4, 1, 4, 1, 4, 3, 4, 416, 8, 4, 1, 5, 1, 5, 1, 5, 3, 5, 421, 8, 5, 1, 6,
		1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 3, 9, 431, 8, 9, 1, 10, 1, 10,
		1, 10, 5, 10, 436, 8, 10, 10, 10, 12, 10, 439, 9, 10, 1, 10, 1, 10, 4,
		10, 443, 8, 10, 11, 10, 12, 10, 444, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12,
		5, 12, 452, 8, 12, 10, 12, 12, 12, 455, 9, 12, 1, 12, 3, 12, 458, 8, 12,
		1, 12, 3, 12, 461, 8, 12, 1, 12, 5, 12, 464, 8, 12, 10, 12, 12, 12, 467,
		9, 12, 1, 12, 1, 12, 5, 12, 471, 8, 12, 10, 12, 12, 12, 474, 9, 12, 1,
		12, 3, 12, 477, 8, 12, 1, 12, 3, 12, 480, 8, 12, 1, 12, 4, 12, 483, 8,
		12, 11, 12, 12, 12, 484, 1, 12, 1, 12, 4, 12, 489, 8, 12, 11, 12, 12, 12,
		490, 1, 12, 1, 12, 5, 12, 495, 8, 12, 10, 12, 12, 12, 498, 9, 12, 1, 12,
		3, 12, 501, 8, 12, 1, 12, 3, 12, 504, 8, 12, 3, 12, 506, 8, 12, 1, 12,
		4, 12, 509, 8, 12, 11, 12, 12, 12, 510, 1, 12, 1, 12, 4, 12, 515, 8, 12,
		11, 12, 12, 12, 516, 1, 12, 1, 12, 5, 12, 521, 8, 12, 10, 12, 12, 12, 524,
		9, 12, 1, 12, 3, 12, 527, 8, 12, 1, 12, 3, 12, 530, 8, 12, 3, 12, 532,
		8, 12, 1, 12, 4, 12, 535, 8, 12, 11, 12, 12, 12, 536, 1, 12, 1, 12, 5,
		12, 541, 8, 12, 10, 12, 12, 12, 544, 9, 12, 1, 12, 3, 12, 547, 8, 12, 1,
		12, 3, 12, 550, 8, 12, 3, 12, 552, 8, 12, 1, 12, 4, 12, 555, 8, 12, 11,
		12, 12, 12, 556, 1, 12, 1, 12, 4, 12, 561, 8, 12, 11, 12, 12, 12, 562,
		1, 12, 1, 12, 5, 12, 567, 8, 12, 10, 12, 12, 12, 570, 9, 12, 1, 12, 3,
		12, 573, 8, 12, 1, 12, 3, 12, 576, 8, 12, 3, 12, 578, 8, 12, 1, 12, 4,
		12, 581, 8, 12, 11, 12, 12, 12, 582, 1, 12, 1, 12, 4, 12, 587, 8, 12, 11,
		12, 12, 12, 588, 1, 12, 1, 12, 5, 12, 593, 8, 12, 10, 12, 12, 12, 596,
		9, 12, 1, 12, 3, 12, 599, 8, 12, 1, 12, 3, 12, 602, 8, 12, 3, 12, 604,
		8, 12, 1, 12, 4, 12, 607, 8, 12, 11, 12, 12, 12, 608, 1, 12, 1, 12, 4,
		12, 613, 8, 12, 11, 12, 12, 12, 614, 1, 12, 1, 12, 5, 12, 619, 8, 12, 10,
		12, 12, 12, 622, 9, 12, 1, 12, 3, 12, 625, 8, 12, 1, 12, 3, 12, 628, 8,
		12, 3, 12, 630, 8, 12, 1, 12, 4, 12, 633, 8, 12, 11, 12, 12, 12, 634, 1,
		12, 1, 12, 3, 12, 639, 8, 12, 1, 12, 4, 12, 642, 8, 12, 11, 12, 12, 12,
		643, 1, 12, 1, 12, 5, 12, 648, 8, 12, 10, 12, 12, 12, 651, 9, 12, 1, 12,
		3, 12, 654, 8, 12, 1, 12, 3, 12, 657, 8, 12, 3, 12, 659, 8, 12, 1, 12,
		4, 12, 662, 8, 12, 11, 12, 12, 12, 663, 1, 12, 1, 12, 4, 12, 668, 8, 12,
		11, 12, 12, 12, 669, 1, 12, 1, 12, 3, 12, 674, 8, 12, 1, 12, 5, 12, 677,
		8, 12, 10, 12, 12, 12, 680, 9, 12, 1, 12, 3, 12, 683, 8, 12, 1, 12, 3,
		12, 686, 8, 12, 3, 12, 688, 8, 12, 1, 12, 4, 12, 691, 8, 12, 11, 12, 12,
		12, 692, 1, 12, 1, 12, 3, 12, 697, 8, 12, 1, 12, 5, 12, 700, 8, 12, 10,
		12, 12, 12, 703, 9, 12, 1, 12, 3, 12, 706, 8, 12, 1, 12, 3, 12, 709, 8,
		12, 3, 12, 711, 8, 12, 1, 12, 4, 12, 714, 8, 12, 11, 12, 12, 12, 715, 1,
		12, 1, 12, 5, 12, 720, 8, 12, 10, 12, 12, 12, 723, 9, 12, 1, 12, 3, 12,
		726, 8, 12, 1, 12, 3, 12, 729, 8, 12, 3, 12, 731, 8, 12, 1, 12, 4, 12,
		734, 8, 12, 11, 12, 12, 12, 735, 1, 12, 1, 12, 4, 12, 740, 8, 12, 11, 12,
		12, 12, 741, 1, 12, 1, 12, 5, 12, 746, 8, 12, 10, 12, 12, 12, 749, 9, 12,
		1, 12, 3, 12, 752, 8, 12, 1, 12, 3, 12, 755, 8, 12, 3, 12, 757, 8, 12,
		1, 12, 3, 12, 760, 8, 12, 1, 12, 5, 12, 763, 8, 12, 10, 12, 12, 12, 766,
		9, 12, 1, 12, 3, 12, 769, 8, 12, 1, 12, 3, 12, 772, 8, 12, 1, 12, 5, 12,
		775, 8, 12, 10, 12, 12, 12, 778, 9, 12, 1, 12, 3, 12, 781, 8, 12, 1, 12,
		1, 12, 3, 12, 785, 8, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1,
		16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 801, 8, 18,
		1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1,
		24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 5, 26, 820, 8, 26, 10, 26,
		12, 26, 823, 9, 26, 1, 26, 1, 26, 4, 26, 827, 8, 26, 11, 26, 12, 26, 828,
		1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 5, 28, 836, 8, 28, 10, 28, 12, 28, 839,
		9, 28, 1, 28, 3, 28, 842, 8, 28, 1, 28, 3, 28, 845, 8, 28, 1, 28, 5, 28,
		848, 8, 28, 10, 28, 12, 28, 851, 9, 28, 1, 28, 1, 28, 5, 28, 855, 8, 28,
		10, 28, 12, 28, 858, 9, 28, 1, 28, 3, 28, 861, 8, 28, 1, 28, 3, 28, 864,
		8, 28, 1, 28, 4, 28, 867, 8, 28, 11, 28, 12, 28, 868, 1, 28, 1, 28, 4,
		28, 873, 8, 28, 11, 28, 12, 28, 874, 1, 28, 1, 28, 5, 28, 879, 8, 28, 10,
		28, 12, 28, 882, 9, 28, 1, 28, 3, 28, 885, 8, 28, 1, 28, 3, 28, 888, 8,
		28, 3, 28, 890, 8, 28, 1, 28, 4, 28, 893, 8, 28, 11, 28, 12, 28, 894, 1,
		28, 1, 28, 4, 28, 899, 8, 28, 11, 28, 12, 28, 900, 1, 28, 1, 28, 5, 28,
		905, 8, 28, 10, 28, 12, 28, 908, 9, 28, 1, 28, 3, 28, 911, 8, 28, 1, 28,
		3, 28, 914, 8, 28, 3, 28, 916, 8, 28, 1, 28, 4, 28, 919, 8, 28, 11, 28,
		12, 28, 920, 1, 28, 1, 28, 5, 28, 925, 8, 28, 10, 28, 12, 28, 928, 9, 28,
		1, 28, 3, 28, 931, 8, 28, 1, 28, 3, 28, 934, 8, 28, 3, 28, 936, 8, 28,
		1, 28, 4, 28, 939, 8, 28, 11, 28, 12, 28, 940, 1, 28, 1, 28, 4, 28, 945,
		8, 28, 11, 28, 12, 28, 946, 1, 28, 1, 28, 5, 28, 951, 8, 28, 10, 28, 12,
		28, 954, 9, 28, 1, 28, 3, 28, 957, 8, 28, 1, 28, 3, 28, 960, 8, 28, 3,
		28, 962, 8, 28, 1, 28, 3, 28, 965, 8, 28, 1, 28, 5, 28, 968, 8, 28, 10,
		28, 12, 28, 971, 9, 28, 1, 28, 3, 28, 974, 8, 28, 1, 28, 3, 28, 977, 8,
		28, 1, 28, 5, 28, 980, 8, 28, 10, 28, 12, 28, 983, 9, 28, 1, 28, 3, 28,
		986, 8, 28, 1, 28, 1, 28, 3, 28, 990, 8, 28, 1, 29, 1, 29, 1, 29, 5, 29,
		995, 8, 29, 10, 29, 12, 29, 998, 9, 29, 1, 29, 1, 29, 4, 29, 1002, 8, 29,
		11, 29, 12, 29, 1003, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 5, 31, 1011, 8,
		31, 10, 31, 12, 31, 1014, 9, 31, 1, 31, 3, 31, 1017, 8, 31, 1, 31, 3, 31,
		1020, 8, 31, 1, 31, 5, 31, 1023, 8, 31, 10, 31, 12, 31, 1026, 9, 31, 1,
		31, 1, 31, 5, 31, 1030, 8, 31, 10, 31, 12, 31, 1033, 9, 31, 1, 31, 3, 31,
		1036, 8, 31, 1, 31, 3, 31, 1039, 8, 31, 1, 31, 4, 31, 1042, 8, 31, 11,
		31, 12, 31, 1043, 1, 31, 1, 31, 4, 31, 1048, 8, 31, 11, 31, 12, 31, 1049,
		1, 31, 1, 31, 5, 31, 1054, 8, 31, 10, 31, 12, 31, 1057, 9, 31, 1, 31, 3,
		31, 1060, 8, 31, 1, 31, 3, 31, 1063, 8, 31, 3, 31, 1065, 8, 31, 1, 31,
		4, 31, 1068, 8, 31, 11, 31, 12, 31, 1069, 1, 31, 1, 31, 4, 31, 1074, 8,
		31, 11, 31, 12, 31, 1075, 1, 31, 1, 31, 5, 31, 1080, 8, 31, 10, 31, 12,
		31, 1083, 9, 31, 1, 31, 3, 31, 1086, 8, 31, 1, 31, 3, 31, 1089, 8, 31,
		3, 31, 1091, 8, 31, 1, 31, 4, 31, 1094, 8, 31, 11, 31, 12, 31, 1095, 1,
		31, 1, 31, 5, 31, 1100, 8, 31, 10, 31, 12, 31, 1103, 9, 31, 1, 31, 3, 31,
		1106, 8, 31, 1, 31, 3, 31, 1109, 8, 31, 3, 31, 1111, 8, 31, 1, 31, 4, 31,
		1114, 8, 31, 11, 31, 12, 31, 1115, 1, 31, 1, 31, 4, 31, 1120, 8, 31, 11,
		31, 12, 31, 1121, 1, 31, 1, 31, 5, 31, 1126, 8, 31, 10, 31, 12, 31, 1129,
		9, 31, 1, 31, 3, 31, 1132, 8, 31, 1, 31, 3, 31, 1135, 8, 31, 3, 31, 1137,
		8, 31, 1, 31, 3, 31, 1140, 8, 31, 1, 31, 5, 31, 1143, 8, 31, 10, 31, 12,
		31, 1146, 9, 31, 1, 31, 3, 31, 1149, 8, 31, 1, 31, 3, 31, 1152, 8, 31,
		1, 31, 5, 31, 1155, 8, 31, 10, 31, 12, 31, 1158, 9, 31, 1, 31, 3, 31, 1161,
		8, 31, 1, 31, 1, 31, 3, 31, 1165, 8, 31, 1, 32, 1, 32, 3, 32, 1169, 8,
		32, 1, 33, 1, 33, 1, 33, 5, 33, 1174, 8, 33, 10, 33, 12, 33, 1177, 9, 33,
		1, 33, 1, 33, 4, 33, 1181, 8, 33, 11, 33, 12, 33, 1182, 1, 34, 1, 34, 1,
		34, 1, 35, 1, 35, 5, 35, 1190, 8, 35, 10, 35, 12, 35, 1193, 9, 35, 1, 35,
		3, 35, 1196, 8, 35, 1, 35, 3, 35, 1199, 8, 35, 1, 35, 5, 35, 1202, 8, 35,
		10, 35, 12, 35, 1205, 9, 35, 1, 35, 1, 35, 5, 35, 1209, 8, 35, 10, 35,
		12, 35, 1212, 9, 35, 1, 35, 3, 35, 1215, 8, 35, 1, 35, 3, 35, 1218, 8,
		35, 1, 35, 4, 35, 1221, 8, 35, 11, 35, 12, 35, 1222, 1, 35, 1, 35, 4, 35,
		1227, 8, 35, 11, 35, 12, 35, 1228, 1, 35, 1, 35, 5, 35, 1233, 8, 35, 10,
		35, 12, 35, 1236, 9, 35, 1, 35, 3, 35, 1239, 8, 35, 1, 35, 3, 35, 1242,
		8, 35, 3, 35, 1244, 8, 35, 1, 35, 3, 35, 1247, 8, 35, 1, 35, 5, 35, 1250,
		8, 35, 10, 35, 12, 35, 1253, 9, 35, 1, 35, 3, 35, 1256, 8, 35, 1, 35, 3,
		35, 1259, 8, 35, 1, 35, 5, 35, 1262, 8, 35, 10, 35, 12, 35, 1265, 9, 35,
		1, 35, 3, 35, 1268, 8, 35, 1, 35, 1, 35, 3, 35, 1272, 8, 35, 1, 36, 1,
		36, 1, 36, 5, 36, 1277, 8, 36, 10, 36, 12, 36, 1280, 9, 36, 1, 36, 1, 36,
		4, 36, 1284, 8, 36, 11, 36, 12, 36, 1285, 1, 37, 1, 37, 1, 37, 1, 38, 1,
		38, 5, 38, 1293, 8, 38, 10, 38, 12, 38, 1296, 9, 38, 1, 38, 3, 38, 1299,
		8, 38, 1, 38, 3, 38, 1302, 8, 38, 1, 38, 5, 38, 1305, 8, 38, 10, 38, 12,
		38, 1308, 9, 38, 1, 38, 1, 38, 5, 38, 1312, 8, 38, 10, 38, 12, 38, 1315,
		9, 38, 1, 38, 3, 38, 1318, 8, 38, 1, 38, 3, 38, 1321, 8, 38, 1, 38, 4,
		38, 1324, 8, 38, 11, 38, 12, 38, 1325, 1, 38, 1, 38, 4, 38, 1330, 8, 38,
		11, 38, 12, 38, 1331, 1, 38, 1, 38, 5, 38, 1336, 8, 38, 10, 38, 12, 38,
		1339, 9, 38, 1, 38, 3, 38, 1342, 8, 38, 1, 38, 3, 38, 1345, 8, 38, 3, 38,
		1347, 8, 38, 1, 38, 4, 38, 1350, 8, 38, 11, 38, 12, 38, 1351, 1, 38, 1,
		38, 4, 38, 1356, 8, 38, 11, 38, 12, 38, 1357, 1, 38, 1, 38, 5, 38, 1362,
		8, 38, 10, 38, 12, 38, 1365, 9, 38, 1, 38, 3, 38, 1368, 8, 38, 1, 38, 3,
		38, 1371, 8, 38, 3, 38, 1373, 8, 38, 1, 38, 4, 38, 1376, 8, 38, 11, 38,
		12, 38, 1377, 1, 38, 1, 38, 5, 38, 1382, 8, 38, 10, 38, 12, 38, 1385, 9,
		38, 1, 38, 3, 38, 1388, 8, 38, 1, 38, 3, 38, 1391, 8, 38, 3, 38, 1393,
		8, 38, 1, 38, 4, 38, 1396, 8, 38, 11, 38, 12, 38, 1397, 1, 38, 1, 38, 4,
		38, 1402, 8, 38, 11, 38, 12, 38, 1403, 1, 38, 1, 38, 5, 38, 1408, 8, 38,
		10, 38, 12, 38, 1411, 9, 38, 1, 38, 3, 38, 1414, 8, 38, 1, 38, 3, 38, 1417,
		8, 38, 3, 38, 1419, 8, 38, 1, 38, 4, 38, 1422, 8, 38, 11, 38, 12, 38, 1423,
		1, 38, 1, 38, 4, 38, 1428, 8, 38, 11, 38, 12, 38, 1429, 1, 38, 1, 38, 5,
		38, 1434, 8, 38, 10, 38, 12, 38, 1437, 9, 38, 1, 38, 3, 38, 1440, 8, 38,
		1, 38, 3, 38, 1443, 8, 38, 3, 38, 1445, 8, 38, 1, 38, 4, 38, 1448, 8, 38,
		11, 38, 12, 38, 1449, 1, 38, 1, 38, 4, 38, 1454, 8, 38, 11, 38, 12, 38,
		1455, 1, 38, 1, 38, 5, 38, 1460, 8, 38, 10, 38, 12, 38, 1463, 9, 38, 1,
		38, 3, 38, 1466, 8, 38, 1, 38, 3, 38, 1469, 8, 38, 3, 38, 1471, 8, 38,
		1, 38, 4, 38, 1474, 8, 38, 11, 38, 12, 38, 1475, 1, 38, 1, 38, 4, 38, 1480,
		8, 38, 11, 38, 12, 38, 1481, 1, 38, 1, 38, 5, 38, 1486, 8, 38, 10, 38,
		12, 38, 1489, 9, 38, 1, 38, 3, 38, 1492, 8, 38, 1, 38, 3, 38, 1495, 8,
		38, 3, 38, 1497, 8, 38, 1, 38, 3, 38, 1500, 8, 38, 1, 38, 5, 38, 1503,
		8, 38, 10, 38, 12, 38, 1506, 9, 38, 1, 38, 3, 38, 1509, 8, 38, 1, 38, 3,
		38, 1512, 8, 38, 1, 38, 5, 38, 1515, 8, 38, 10, 38, 12, 38, 1518, 9, 38,
		1, 38, 3, 38, 1521, 8, 38, 1, 38, 1, 38, 1, 39, 1, 39, 3, 39, 1527, 8,
		39, 1, 40, 1, 40, 3, 40, 1531, 8, 40, 1, 41, 1, 41, 1, 41, 5, 41, 1536,
		8, 41, 10, 41, 12, 41, 1539, 9, 41, 1, 41, 1, 41, 4, 41, 1543, 8, 41, 11,
		41, 12, 41, 1544, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 5, 43, 1552, 8, 43,
		10, 43, 12, 43, 1555, 9, 43, 1, 43, 3, 43, 1558, 8, 43, 1, 43, 3, 43, 1561,
		8, 43, 1, 43, 5, 43, 1564, 8, 43, 10, 43, 12, 43, 1567, 9, 43, 1, 43, 1,
		43, 5, 43, 1571, 8, 43, 10, 43, 12, 43, 1574, 9, 43, 1, 43, 3, 43, 1577,
		8, 43, 1, 43, 3, 43, 1580, 8, 43, 1, 43, 4, 43, 1583, 8, 43, 11, 43, 12,
		43, 1584, 1, 43, 1, 43, 4, 43, 1589, 8, 43, 11, 43, 12, 43, 1590, 1, 43,
		1, 43, 5, 43, 1595, 8, 43, 10, 43, 12, 43, 1598, 9, 43, 1, 43, 3, 43, 1601,
		8, 43, 1, 43, 3, 43, 1604, 8, 43, 3, 43, 1606, 8, 43, 1, 43, 4, 43, 1609,
		8, 43, 11, 43, 12, 43, 1610, 1, 43, 1, 43, 4, 43, 1615, 8, 43, 11, 43,
		12, 43, 1616, 1, 43, 1, 43, 5, 43, 1621, 8, 43, 10, 43, 12, 43, 1624, 9,
		43, 1, 43, 3, 43, 1627, 8, 43, 1, 43, 3, 43, 1630, 8, 43, 3, 43, 1632,
		8, 43, 1, 43, 4, 43, 1635, 8, 43, 11, 43, 12, 43, 1636, 1, 43, 1, 43, 5,
		43, 1641, 8, 43, 10, 43, 12, 43, 1644, 9, 43, 1, 43, 3, 43, 1647, 8, 43,
		1, 43, 3, 43, 1650, 8, 43, 3, 43, 1652, 8, 43, 1, 43, 4, 43, 1655, 8, 43,
		11, 43, 12, 43, 1656, 1, 43, 1, 43, 4, 43, 1661, 8, 43, 11, 43, 12, 43,
		1662, 1, 43, 1, 43, 5, 43, 1667, 8, 43, 10, 43, 12, 43, 1670, 9, 43, 1,
		43, 3, 43, 1673, 8, 43, 1, 43, 3, 43, 1676, 8, 43, 1, 43, 4, 43, 1679,
		8, 43, 11, 43, 12, 43, 1680, 1, 43, 1, 43, 4, 43, 1685, 8, 43, 11, 43,
		12, 43, 1686, 1, 43, 1, 43, 5, 43, 1691, 8, 43, 10, 43, 12, 43, 1694, 9,
		43, 1, 43, 3, 43, 1697, 8, 43, 1, 43, 3, 43, 1700, 8, 43, 3, 43, 1702,
		8, 43, 1, 43, 3, 43, 1705, 8, 43, 1, 43, 5, 43, 1708, 8, 43, 10, 43, 12,
		43, 1711, 9, 43, 1, 43, 3, 43, 1714, 8, 43, 1, 43, 3, 43, 1717, 8, 43,
		1, 43, 5, 43, 1720, 8, 43, 10, 43, 12, 43, 1723, 9, 43, 1, 43, 3, 43, 1726,
		8, 43, 1, 43, 1, 43, 3, 43, 1730, 8, 43, 1, 44, 1, 44, 5, 44, 1734, 8,
		44, 10, 44, 12, 44, 1737, 9, 44, 1, 44, 3, 44, 1740, 8, 44, 1, 44, 3, 44,
		1743, 8, 44, 1, 44, 5, 44, 1746, 8, 44, 10, 44, 12, 44, 1749, 9, 44, 1,
		44, 3, 44, 1752, 8, 44, 1, 44, 1, 44, 5, 44, 1756, 8, 44, 10, 44, 12, 44,
		1759, 9, 44, 1, 44, 3, 44, 1762, 8, 44, 1, 44, 3, 44, 1765, 8, 44, 1, 44,
		4, 44, 1768, 8, 44, 11, 44, 12, 44, 1769, 1, 44, 5, 44, 1773, 8, 44, 10,
		44, 12, 44, 1776, 9, 44, 1, 44, 5, 44, 1779, 8, 44, 10, 44, 12, 44, 1782,
		9, 44, 1, 44, 3, 44, 1785, 8, 44, 1, 44, 3, 44, 1788, 8, 44, 1, 44, 5,
		44, 1791, 8, 44, 10, 44, 12, 44, 1794, 9, 44, 1, 44, 1, 44, 5, 44, 1798,
		8, 44, 10, 44, 12, 44, 1801, 9, 44, 1, 44, 3, 44, 1804, 8, 44, 1, 45, 1,
		45, 3, 45, 1808, 8, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48,
		5, 48, 1817, 8, 48, 10, 48, 12, 48, 1820, 9, 48, 1, 48, 1, 48, 4, 48, 1824,
		8, 48, 11, 48, 12, 48, 1825, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 5, 50,
		1833, 8, 50, 10, 50, 12, 50, 1836, 9, 50, 1, 50, 3, 50, 1839, 8, 50, 1,
		50, 3, 50, 1842, 8, 50, 1, 50, 5, 50, 1845, 8, 50, 10, 50, 12, 50, 1848,
		9, 50, 1, 50, 1, 50, 5, 50, 1852, 8, 50, 10, 50, 12, 50, 1855, 9, 50, 1,
		50, 3, 50, 1858, 8, 50, 1, 50, 3, 50, 1861, 8, 50, 1, 50, 4, 50, 1864,
		8, 50, 11, 50, 12, 50, 1865, 1, 50, 1, 50, 4, 50, 1870, 8, 50, 11, 50,
		12, 50, 1871, 1, 50, 1, 50, 5, 50, 1876, 8, 50, 10, 50, 12, 50, 1879, 9,
		50, 1, 50, 3, 50, 1882, 8, 50, 1, 50, 3, 50, 1885, 8, 50, 3, 50, 1887,
		8, 50, 1, 50, 4, 50, 1890, 8, 50, 11, 50, 12, 50, 1891, 1, 50, 1, 50, 4,
		50, 1896, 8, 50, 11, 50, 12, 50, 1897, 1, 50, 1, 50, 5, 50, 1902, 8, 50,
		10, 50, 12, 50, 1905, 9, 50, 1, 50, 3, 50, 1908, 8, 50, 1, 50, 3, 50, 1911,
		8, 50, 3, 50, 1913, 8, 50, 1, 50, 4, 50, 1916, 8, 50, 11, 50, 12, 50, 1917,
		1, 50, 1, 50, 5, 50, 1922, 8, 50, 10, 50, 12, 50, 1925, 9, 50, 1, 50, 3,
		50, 1928, 8, 50, 1, 50, 3, 50, 1931, 8, 50, 3, 50, 1933, 8, 50, 1, 50,
		4, 50, 1936, 8, 50, 11, 50, 12, 50, 1937, 1, 50, 1, 50, 4, 50, 1942, 8,
		50, 11, 50, 12, 50, 1943, 1, 50, 1, 50, 5, 50, 1948, 8, 50, 10, 50, 12,
		50, 1951, 9, 50, 1, 50, 3, 50, 1954, 8, 50, 1, 50, 3, 50, 1957, 8, 50,
		1, 50, 4, 50, 1960, 8, 50, 11, 50, 12, 50, 1961, 1, 50, 1, 50, 4, 50, 1966,
		8, 50, 11, 50, 12, 50, 1967, 1, 50, 1, 50, 5, 50, 1972, 8, 50, 10, 50,
		12, 50, 1975, 9, 50, 1, 50, 3, 50, 1978, 8, 50, 1, 50, 3, 50, 1981, 8,
		50, 1, 50, 4, 50, 1984, 8, 50, 11, 50, 12, 50, 1985, 1, 50, 1, 50, 4, 50,
		1990, 8, 50, 11, 50, 12, 50, 1991, 1, 50, 1, 50, 5, 50, 1996, 8, 50, 10,
		50, 12, 50, 1999, 9, 50, 1, 50, 3, 50, 2002, 8, 50, 1, 50, 3, 50, 2005,
		8, 50, 3, 50, 2007, 8, 50, 1, 50, 3, 50, 2010, 8, 50, 1, 50, 5, 50, 2013,
		8, 50, 10, 50, 12, 50, 2016, 9, 50, 1, 50, 3, 50, 2019, 8, 50, 1, 50, 3,
		50, 2022, 8, 50, 1, 50, 5, 50, 2025, 8, 50, 10, 50, 12, 50, 2028, 9, 50,
		1, 50, 3, 50, 2031, 8, 50, 1, 50, 1, 50, 3, 50, 2035, 8, 50, 1, 51, 1,
		51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 3, 54, 2045, 8, 54, 1, 55,
		1, 55, 3, 55, 2049, 8, 55, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 5, 57, 2056,
		8, 57, 10, 57, 12, 57, 2059, 9, 57, 1, 57, 3, 57, 2062, 8, 57, 1, 57, 3,
		57, 2065, 8, 57, 1, 57, 5, 57, 2068, 8, 57, 10, 57, 12, 57, 2071, 9, 57,
		1, 57, 3, 57, 2074, 8, 57, 1, 57, 1, 57, 5, 57, 2078, 8, 57, 10, 57, 12,
		57, 2081, 9, 57, 1, 57, 3, 57, 2084, 8, 57, 1, 57, 3, 57, 2087, 8, 57,
		1, 57, 4, 57, 2090, 8, 57, 11, 57, 12, 57, 2091, 1, 57, 5, 57, 2095, 8,
		57, 10, 57, 12, 57, 2098, 9, 57, 1, 57, 5, 57, 2101, 8, 57, 10, 57, 12,
		57, 2104, 9, 57, 1, 57, 3, 57, 2107, 8, 57, 1, 57, 3, 57, 2110, 8, 57,
		1, 57, 5, 57, 2113, 8, 57, 10, 57, 12, 57, 2116, 9, 57, 1, 57, 1, 57, 5,
		57, 2120, 8, 57, 10, 57, 12, 57, 2123, 9, 57, 1, 57, 3, 57, 2126, 8, 57,
		3, 57, 2128, 8, 57, 1, 58, 4, 58, 2131, 8, 58, 11, 58, 12, 58, 2132, 1,
		59, 3, 59, 2136, 8, 59, 1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 2142, 8, 59,
		10, 59, 12, 59, 2145, 9, 59, 1, 59, 3, 59, 2148, 8, 59, 1, 59, 3, 59, 2151,
		8, 59, 1, 59, 5, 59, 2154, 8, 59, 10, 59, 12, 59, 2157, 9, 59, 1, 59, 3,
		59, 2160, 8, 59, 1, 59, 1, 59, 5, 59, 2164, 8, 59, 10, 59, 12, 59, 2167,
		9, 59, 1, 59, 3, 59, 2170, 8, 59, 1, 59, 3, 59, 2173, 8, 59, 1, 59, 4,
		59, 2176, 8, 59, 11, 59, 12, 59, 2177, 1, 59, 5, 59, 2181, 8, 59, 10, 59,
		12, 59, 2184, 9, 59, 1, 59, 5, 59, 2187, 8, 59, 10, 59, 12, 59, 2190, 9,
		59, 1, 59, 3, 59, 2193, 8, 59, 1, 59, 3, 59, 2196, 8, 59, 1, 59, 5, 59,
		2199, 8, 59, 10, 59, 12, 59, 2202, 9, 59, 1, 59, 1, 59, 5, 59, 2206, 8,
		59, 10, 59, 12, 59, 2209, 9, 59, 1, 59, 3, 59, 2212, 8, 59, 3, 59, 2214,
		8, 59, 1, 60, 5, 60, 2217, 8, 60, 10, 60, 12, 60, 2220, 9, 60, 1, 60, 1,
		60, 5, 60, 2224, 8, 60, 10, 60, 12, 60, 2227, 9, 60, 1, 60, 5, 60, 2230,
		8, 60, 10, 60, 12, 60, 2233, 9, 60, 1, 60, 1, 60, 5, 60, 2237, 8, 60, 10,
		60, 12, 60, 2240, 9, 60, 3, 60, 2242, 8, 60, 1, 60, 4, 60, 2245, 8, 60,
		11, 60, 12, 60, 2246, 3, 60, 2249, 8, 60, 1, 61, 1, 61, 5, 61, 2253, 8,
		61, 10, 61, 12, 61, 2256, 9, 61, 1, 61, 3, 61, 2259, 8, 61, 1, 61, 3, 61,
		2262, 8, 61, 1, 61, 5, 61, 2265, 8, 61, 10, 61, 12, 61, 2268, 9, 61, 1,
		61, 1, 61, 5, 61, 2272, 8, 61, 10, 61, 12, 61, 2275, 9, 61, 1, 61, 3, 61,
		2278, 8, 61, 1, 61, 3, 61, 2281, 8, 61, 1, 61, 1, 61, 5, 61, 2285, 8, 61,
		10, 61, 12, 61, 2288, 9, 61, 1, 61, 5, 61, 2291, 8, 61, 10, 61, 12, 61,
		2294, 9, 61, 1, 61, 5, 61, 2297, 8, 61, 10, 61, 12, 61, 2300, 9, 61, 1,
		61, 3, 61, 2303, 8, 61, 1, 61, 3, 61, 2306, 8, 61, 1, 61, 5, 61, 2309,
		8, 61, 10, 61, 12, 61, 2312, 9, 61, 1, 61, 3, 61, 2315, 8, 61, 1, 61, 1,
		61, 5, 61, 2319, 8, 61, 10, 61, 12, 61, 2322, 9, 61, 1, 61, 3, 61, 2325,
		8, 61, 1, 62, 1, 62, 3, 62, 2329, 8, 62, 1, 63, 1, 63, 3, 63, 2333, 8,
		63, 1, 64, 1, 64, 1, 65, 1, 65, 1, 66, 1, 66, 3, 66, 2341, 8, 66, 1, 67,
		1, 67, 1, 67, 1, 68, 1, 68, 1, 69, 1, 69, 1, 70, 1, 70, 1, 71, 1, 71, 4,
		71, 2354, 8, 71, 11, 71, 12, 71, 2355, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73,
		0, 0, 74, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,
		34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68,
		70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
		106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134,
		136, 138, 140, 142, 144, 146, 0, 3, 1, 1, 51, 51, 1, 0, 37, 38, 1, 0, 41,
		49, 2776, 0, 149, 1, 0, 0, 0, 2, 166, 1, 0, 0, 0, 4, 180, 1, 0, 0, 0, 6,
		184, 1, 0, 0, 0, 8, 187, 1, 0, 0, 0, 10, 420, 1, 0, 0, 0, 12, 422, 1, 0,
		0, 0, 14, 424, 1, 0, 0, 0, 16, 426, 1, 0, 0, 0, 18, 430, 1, 0, 0, 0, 20,
		442, 1, 0, 0, 0, 22, 446, 1, 0, 0, 0, 24, 449, 1, 0, 0, 0, 26, 786, 1,
		0, 0, 0, 28, 788, 1, 0, 0, 0, 30, 790, 1, 0, 0, 0, 32, 792, 1, 0, 0, 0,
		34, 794, 1, 0, 0, 0, 36, 800, 1, 0, 0, 0, 38, 802, 1, 0, 0, 0, 40, 804,
		1, 0, 0, 0, 42, 806, 1, 0, 0, 0, 44, 808, 1, 0, 0, 0, 46, 810, 1, 0, 0,
		0, 48, 812, 1, 0, 0, 0, 50, 814, 1, 0, 0, 0, 52, 826, 1, 0, 0, 0, 54, 830,
		1, 0, 0, 0, 56, 833, 1, 0, 0, 0, 58, 1001, 1, 0, 0, 0, 60, 1005, 1, 0,
		0, 0, 62, 1008, 1, 0, 0, 0, 64, 1168, 1, 0, 0, 0, 66, 1180, 1, 0, 0, 0,
		68, 1184, 1, 0, 0, 0, 70, 1187, 1, 0, 0, 0, 72, 1283, 1, 0, 0, 0, 74, 1287,
		1, 0, 0, 0, 76, 1290, 1, 0, 0, 0, 78, 1526, 1, 0, 0, 0, 80, 1530, 1, 0,
		0, 0, 82, 1542, 1, 0, 0, 0, 84, 1546, 1, 0, 0, 0, 86, 1549, 1, 0, 0, 0,
		88, 1731, 1, 0, 0, 0, 90, 1807, 1, 0, 0, 0, 92, 1809, 1, 0, 0, 0, 94, 1811,
		1, 0, 0, 0, 96, 1823, 1, 0, 0, 0, 98, 1827, 1, 0, 0, 0, 100, 1830, 1, 0,
		0, 0, 102, 2036, 1, 0, 0, 0, 104, 2038, 1, 0, 0, 0, 106, 2040, 1, 0, 0,
		0, 108, 2044, 1, 0, 0, 0, 110, 2048, 1, 0, 0, 0, 112, 2050, 1, 0, 0, 0,
		114, 2127, 1, 0, 0, 0, 116, 2130, 1, 0, 0, 0, 118, 2135, 1, 0, 0, 0, 120,
		2248, 1, 0, 0, 0, 122, 2250, 1, 0, 0, 0, 124, 2326, 1, 0, 0, 0, 126, 2332,
		1, 0, 0, 0, 128, 2334, 1, 0, 0, 0, 130, 2336, 1, 0, 0, 0, 132, 2340, 1,
		0, 0, 0, 134, 2342, 1, 0, 0, 0, 136, 2345, 1, 0, 0, 0, 138, 2347, 1, 0,
		0, 0, 140, 2349, 1, 0, 0, 0, 142, 2353, 1, 0, 0, 0, 144, 2357, 1, 0, 0,
		0, 146, 2359, 1, 0, 0, 0, 148, 150, 5, 51, 0, 0, 149, 148, 1, 0, 0, 0,
		149, 150, 1, 0, 0, 0, 150, 152, 1, 0, 0, 0, 151, 153, 5, 52, 0, 0, 152,
		151, 1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154, 155,
		3, 2, 1, 0, 155, 156, 5, 0, 0, 1, 156, 1, 1, 0, 0, 0, 157, 167, 5, 52,
		0, 0, 158, 167, 3, 66, 33, 0, 159, 167, 3, 52, 26, 0, 160, 167, 3, 20,
		10, 0, 161, 167, 3, 58, 29, 0, 162, 167, 3, 4, 2, 0, 163, 167, 3, 72, 36,
		0, 164, 167, 3, 96, 48, 0, 165, 167, 3, 82, 41, 0, 166, 157, 1, 0, 0, 0,
		166, 158, 1, 0, 0, 0, 166, 159, 1, 0, 0, 0, 166, 160, 1, 0, 0, 0, 166,
		161, 1, 0, 0, 0, 166, 162, 1, 0, 0, 0, 166, 163, 1, 0, 0, 0, 166, 164,
		1, 0, 0, 0, 166, 165, 1, 0, 0, 0, 167, 168, 1, 0, 0, 0, 168, 166, 1, 0,
		0, 0, 168, 169, 1, 0, 0, 0, 169, 3, 1, 0, 0, 0, 170, 171, 3, 6, 3, 0, 171,
		175, 3, 8, 4, 0, 172, 174, 5, 50, 0, 0, 173, 172, 1, 0, 0, 0, 174, 177,
		1, 0, 0, 0, 175, 173, 1, 0, 0, 0, 175, 176, 1, 0, 0, 0, 176, 178, 1, 0,
		0, 0, 177, 175, 1, 0, 0, 0, 178, 179, 7, 0, 0, 0, 179, 181, 1, 0, 0, 0,
		180, 170, 1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 180, 1, 0, 0, 0, 182,
		183, 1, 0, 0, 0, 183, 5, 1, 0, 0, 0, 184, 185, 5, 42, 0, 0, 185, 186, 3,
		120, 60, 0, 186, 7, 1, 0, 0, 0, 187, 191, 3, 128, 64, 0, 188, 190, 5, 50,
		0, 0, 189, 188, 1, 0, 0, 0, 190, 193, 1, 0, 0, 0, 191, 189, 1, 0, 0, 0,
		191, 192, 1, 0, 0, 0, 192, 195, 1, 0, 0, 0, 193, 191, 1, 0, 0, 0, 194,
		196, 5, 52, 0, 0, 195, 194, 1, 0, 0, 0, 195, 196, 1, 0, 0, 0, 196, 198,
		1, 0, 0, 0, 197, 199, 5, 51, 0, 0, 198, 197, 1, 0, 0, 0, 198, 199, 1, 0,
		0, 0, 199, 203, 1, 0, 0, 0, 200, 202, 5, 50, 0, 0, 201, 200, 1, 0, 0, 0,
		202, 205, 1, 0, 0, 0, 203, 201, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204,
		206, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 206, 210, 3, 132, 66, 0, 207, 209,
		5, 50, 0, 0, 208, 207, 1, 0, 0, 0, 209, 212, 1, 0, 0, 0, 210, 208, 1, 0,
		0, 0, 210, 211, 1, 0, 0, 0, 211, 214, 1, 0, 0, 0, 212, 210, 1, 0, 0, 0,
		213, 215, 5, 52, 0, 0, 214, 213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215,
		217, 1, 0, 0, 0, 216, 218, 5, 51, 0, 0, 217, 216, 1, 0, 0, 0, 217, 218,
		1, 0, 0, 0, 218, 243, 1, 0, 0, 0, 219, 221, 5, 50, 0, 0, 220, 219, 1, 0,
		0, 0, 221, 222, 1, 0, 0, 0, 222, 220, 1, 0, 0, 0, 222, 223, 1, 0, 0, 0,
		223, 224, 1, 0, 0, 0, 224, 226, 5, 1, 0, 0, 225, 227, 5, 50, 0, 0, 226,
		225, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 228, 229,
		1, 0, 0, 0, 229, 230, 1, 0, 0, 0, 230, 234, 3, 114, 57, 0, 231, 233, 5,
		50, 0, 0, 232, 231, 1, 0, 0, 0, 233, 236, 1, 0, 0, 0, 234, 232, 1, 0, 0,
		0, 234, 235, 1, 0, 0, 0, 235, 238, 1, 0, 0, 0, 236, 234, 1, 0, 0, 0, 237,
		239, 5, 52, 0, 0, 238, 237, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 241,
		1, 0, 0, 0, 240, 242, 5, 51, 0, 0, 241, 240, 1, 0, 0, 0, 241, 242, 1, 0,
		0, 0, 242, 244, 1, 0, 0, 0, 243, 220, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0,
		244, 269, 1, 0, 0, 0, 245, 247, 5, 50, 0, 0, 246, 245, 1, 0, 0, 0, 247,
		248, 1, 0, 0, 0, 248, 246, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 250,
		1, 0, 0, 0, 250, 252, 5, 2, 0, 0, 251, 253, 5, 50, 0, 0, 252, 251, 1, 0,
		0, 0, 253, 254, 1, 0, 0, 0, 254, 252, 1, 0, 0, 0, 254, 255, 1, 0, 0, 0,
		255, 256, 1, 0, 0, 0, 256, 260, 3, 112, 56, 0, 257, 259, 5, 50, 0, 0, 258,
		257, 1, 0, 0, 0, 259, 262, 1, 0, 0, 0, 260, 258, 1, 0, 0, 0, 260, 261,
		1, 0, 0, 0, 261, 264, 1, 0, 0, 0, 262, 260, 1, 0, 0, 0, 263, 265, 5, 52,
		0, 0, 264, 263, 1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 267, 1, 0, 0, 0,
		266, 268, 5, 51, 0, 0, 267, 266, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268,
		270, 1, 0, 0, 0, 269, 246, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 289,
		1, 0, 0, 0, 271, 273, 5, 50, 0, 0, 272, 271, 1, 0, 0, 0, 273, 274, 1, 0,
		0, 0, 274, 272, 1, 0, 0, 0, 274, 275, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0,
		276, 280, 3, 104, 52, 0, 277, 279, 5, 50, 0, 0, 278, 277, 1, 0, 0, 0, 279,
		282, 1, 0, 0, 0, 280, 278, 1, 0, 0, 0, 280, 281, 1, 0, 0, 0, 281, 284,
		1, 0, 0, 0, 282, 280, 1, 0, 0, 0, 283, 285, 5, 52, 0, 0, 284, 283, 1, 0,
		0, 0, 284, 285, 1, 0, 0, 0, 285, 287, 1, 0, 0, 0, 286, 288, 5, 51, 0, 0,
		287, 286, 1, 0, 0, 0, 287, 288, 1, 0, 0, 0, 288, 290, 1, 0, 0, 0, 289,
		272, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 315, 1, 0, 0, 0, 291, 293,
		5, 50, 0, 0, 292, 291, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 292, 1, 0,
		0, 0, 294, 295, 1, 0, 0, 0, 295, 296, 1, 0, 0, 0, 296, 298, 5, 3, 0, 0,
		297, 299, 5, 50, 0, 0, 298, 297, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300,
		298, 1, 0, 0, 0, 300, 301, 1, 0, 0, 0, 301, 302, 1, 0, 0, 0, 302, 306,
		3, 18, 9, 0, 303, 305, 5, 50, 0, 0, 304, 303, 1, 0, 0, 0, 305, 308, 1,
		0, 0, 0, 306, 304, 1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307, 310, 1, 0, 0,
		0, 308, 306, 1, 0, 0, 0, 309, 311, 5, 52, 0, 0, 310, 309, 1, 0, 0, 0, 310,
		311, 1, 0, 0, 0, 311, 313, 1, 0, 0, 0, 312, 314, 5, 51, 0, 0, 313, 312,
		1, 0, 0, 0, 313, 314, 1, 0, 0, 0, 314, 316, 1, 0, 0, 0, 315, 292, 1, 0,
		0, 0, 315, 316, 1, 0, 0, 0, 316, 335, 1, 0, 0, 0, 317, 319, 5, 50, 0, 0,
		318, 317, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 318, 1, 0, 0, 0, 320,
		321, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0, 322, 326, 3, 10, 5, 0, 323, 325,
		5, 50, 0, 0, 324, 323, 1, 0, 0, 0, 325, 328, 1, 0, 0, 0, 326, 324, 1, 0,
		0, 0, 326, 327, 1, 0, 0, 0, 327, 330, 1, 0, 0, 0, 328, 326, 1, 0, 0, 0,
		329, 331, 5, 52, 0, 0, 330, 329, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331,
		333, 1, 0, 0, 0, 332, 334, 5, 51, 0, 0, 333, 332, 1, 0, 0, 0, 333, 334,
		1, 0, 0, 0, 334, 336, 1, 0, 0, 0, 335, 318, 1, 0, 0, 0, 335, 336, 1, 0,
		0, 0, 336, 361, 1, 0, 0, 0, 337, 339, 5, 50, 0, 0, 338, 337, 1, 0, 0, 0,
		339, 340, 1, 0, 0, 0, 340, 338, 1, 0, 0, 0, 340, 341, 1, 0, 0, 0, 341,
		342, 1, 0, 0, 0, 342, 344, 5, 4, 0, 0, 343, 345, 5, 50, 0, 0, 344, 343,
		1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 346, 347, 1, 0,
		0, 0, 347, 348, 1, 0, 0, 0, 348, 352, 3, 108, 54, 0, 349, 351, 5, 50, 0,
		0, 350, 349, 1, 0, 0, 0, 351, 354, 1, 0, 0, 0, 352, 350, 1, 0, 0, 0, 352,
		353, 1, 0, 0, 0, 353, 356, 1, 0, 0, 0, 354, 352, 1, 0, 0, 0, 355, 357,
		5, 52, 0, 0, 356, 355, 1, 0, 0, 0, 356, 357, 1, 0, 0, 0, 357, 359, 1, 0,
		0, 0, 358, 360, 5, 51, 0, 0, 359, 358, 1, 0, 0, 0, 359, 360, 1, 0, 0, 0,
		360, 362, 1, 0, 0, 0, 361, 338, 1, 0, 0, 0, 361, 362, 1, 0, 0, 0, 362,
		387, 1, 0, 0, 0, 363, 365, 5, 50, 0, 0, 364, 363, 1, 0, 0, 0, 365, 366,
		1, 0, 0, 0, 366, 364, 1, 0, 0, 0, 366, 367, 1, 0, 0, 0, 367, 368, 1, 0,
		0, 0, 368, 370, 5, 5, 0, 0, 369, 371, 5, 50, 0, 0, 370, 369, 1, 0, 0, 0,
		371, 372, 1, 0, 0, 0, 372, 370, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0, 373,
		374, 1, 0, 0, 0, 374, 378, 3, 110, 55, 0, 375, 377, 5, 50, 0, 0, 376, 375,
		1, 0, 0, 0, 377, 380, 1, 0, 0, 0, 378, 376, 1, 0, 0, 0, 378, 379, 1, 0,
		0, 0, 379, 382, 1, 0, 0, 0, 380, 378, 1, 0, 0, 0, 381, 383, 5, 52, 0, 0,
		382, 381, 1, 0, 0, 0, 382, 383, 1, 0, 0, 0, 383, 385, 1, 0, 0, 0, 384,
		386, 5, 51, 0, 0, 385, 384, 1, 0, 0, 0, 385, 386, 1, 0, 0, 0, 386, 388,
		1, 0, 0, 0, 387, 364, 1, 0, 0, 0, 387, 388, 1, 0, 0, 0, 388, 390, 1, 0,
		0, 0, 389, 391, 3, 116, 58, 0, 390, 389, 1, 0, 0, 0, 390, 391, 1, 0, 0,
		0, 391, 395, 1, 0, 0, 0, 392, 394, 5, 50, 0, 0, 393, 392, 1, 0, 0, 0, 394,
		397, 1, 0, 0, 0, 395, 393, 1, 0, 0, 0, 395, 396, 1, 0, 0, 0, 396, 399,
		1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 398, 400, 5, 52, 0, 0, 399, 398, 1, 0,
		0, 0, 399, 400, 1, 0, 0, 0, 400, 402, 1, 0, 0, 0, 401, 403, 5, 51, 0, 0,
		402, 401, 1, 0, 0, 0, 402, 403, 1, 0, 0, 0, 403, 407, 1, 0, 0, 0, 404,
		406, 5, 50, 0, 0, 405, 404, 1, 0, 0, 0, 406, 409, 1, 0, 0, 0, 407, 405,
		1, 0, 0, 0, 407, 408, 1, 0, 0, 0, 408, 411, 1, 0, 0, 0, 409, 407, 1, 0,
		0, 0, 410, 412, 5, 52, 0, 0, 411, 410, 1, 0, 0, 0, 411, 412, 1, 0, 0, 0,
		412, 413, 1, 0, 0, 0, 413, 415, 3, 130, 65, 0, 414, 416, 5, 52, 0, 0, 415,
		414, 1, 0, 0, 0, 415, 416, 1, 0, 0, 0, 416, 9, 1, 0, 0, 0, 417, 421, 3,
		14, 7, 0, 418, 421, 3, 16, 8, 0, 419, 421, 3, 12, 6, 0, 420, 417, 1, 0,
		0, 0, 420, 418, 1, 0, 0, 0, 420, 419, 1, 0, 0, 0, 421, 11, 1, 0, 0, 0,
		422, 423, 5, 6, 0, 0, 423, 13, 1, 0, 0, 0, 424, 425, 5, 7, 0, 0, 425, 15,
		1, 0, 0, 0, 426, 427, 5, 8, 0, 0, 427, 17, 1, 0, 0, 0, 428, 431, 3, 126,
		63, 0, 429, 431, 3, 122, 61, 0, 430, 428, 1, 0, 0, 0, 430, 429, 1, 0, 0,
		0, 431, 19, 1, 0, 0, 0, 432, 433, 3, 22, 11, 0, 433, 437, 3, 24, 12, 0,
		434, 436, 5, 50, 0, 0, 435, 434, 1, 0, 0, 0, 436, 439, 1, 0, 0, 0, 437,
		435, 1, 0, 0, 0, 437, 438, 1, 0, 0, 0, 438, 440, 1, 0, 0, 0, 439, 437,
		1, 0, 0, 0, 440, 441, 7, 0, 0, 0, 441, 443, 1, 0, 0, 0, 442, 432, 1, 0,
		0, 0, 443, 444, 1, 0, 0, 0, 444, 442, 1, 0, 0, 0, 444, 445, 1, 0, 0, 0,
		445, 21, 1, 0, 0, 0, 446, 447, 5, 43, 0, 0, 447, 448, 3, 120, 60, 0, 448,
		23, 1, 0, 0, 0, 449, 453, 3, 128, 64, 0, 450, 452, 5, 50, 0, 0, 451, 450,
		1, 0, 0, 0, 452, 455, 1, 0, 0, 0, 453, 451, 1, 0, 0, 0, 453, 454, 1, 0,
		0, 0, 454, 457, 1, 0, 0, 0, 455, 453, 1, 0, 0, 0, 456, 458, 5, 52, 0, 0,
		457, 456, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458, 460, 1, 0, 0, 0, 459,
		461, 5, 51, 0, 0, 460, 459, 1, 0, 0, 0, 460, 461, 1, 0, 0, 0, 461, 465,
		1, 0, 0, 0, 462, 464, 5, 50, 0, 0, 463, 462, 1, 0, 0, 0, 464, 467, 1, 0,
		0, 0, 465, 463, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 468, 1, 0, 0, 0,
		467, 465, 1, 0, 0, 0, 468, 472, 3, 132, 66, 0, 469, 471, 5, 50, 0, 0, 470,
		469, 1, 0, 0, 0, 471, 474, 1, 0, 0, 0, 472, 470, 1, 0, 0, 0, 472, 473,
		1, 0, 0, 0, 473, 476, 1, 0, 0, 0, 474, 472, 1, 0, 0, 0, 475, 477, 5, 52,
		0, 0, 476, 475, 1, 0, 0, 0, 476, 477, 1, 0, 0, 0, 477, 479, 1, 0, 0, 0,
		478, 480, 5, 51, 0, 0, 479, 478, 1, 0, 0, 0, 479, 480, 1, 0, 0, 0, 480,
		505, 1, 0, 0, 0, 481, 483, 5, 50, 0, 0, 482, 481, 1, 0, 0, 0, 483, 484,
		1, 0, 0, 0, 484, 482, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 486, 1, 0,
		0, 0, 486, 488, 5, 1, 0, 0, 487, 489, 5, 50, 0, 0, 488, 487, 1, 0, 0, 0,
		489, 490, 1, 0, 0, 0, 490, 488, 1, 0, 0, 0, 490, 491, 1, 0, 0, 0, 491,
		492, 1, 0, 0, 0, 492, 496, 3, 114, 57, 0, 493, 495, 5, 50, 0, 0, 494, 493,
		1, 0, 0, 0, 495, 498, 1, 0, 0, 0, 496, 494, 1, 0, 0, 0, 496, 497, 1, 0,
		0, 0, 497, 500, 1, 0, 0, 0, 498, 496, 1, 0, 0, 0, 499, 501, 5, 52, 0, 0,
		500, 499, 1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 503, 1, 0, 0, 0, 502,
		504, 5, 51, 0, 0, 503, 502, 1, 0, 0, 0, 503, 504, 1, 0, 0, 0, 504, 506,
		1, 0, 0, 0, 505, 482, 1, 0, 0, 0, 505, 506, 1, 0, 0, 0, 506, 531, 1, 0,
		0, 0, 507, 509, 5, 50, 0, 0, 508, 507, 1, 0, 0, 0, 509, 510, 1, 0, 0, 0,
		510, 508, 1, 0, 0, 0, 510, 511, 1, 0, 0, 0, 511, 512, 1, 0, 0, 0, 512,
		514, 5, 2, 0, 0, 513, 515, 5, 50, 0, 0, 514, 513, 1, 0, 0, 0, 515, 516,
		1, 0, 0, 0, 516, 514, 1, 0, 0, 0, 516, 517, 1, 0, 0, 0, 517, 518, 1, 0,
		0, 0, 518, 522, 3, 112, 56, 0, 519, 521, 5, 50, 0, 0, 520, 519, 1, 0, 0,
		0, 521, 524, 1, 0, 0, 0, 522, 520, 1, 0, 0, 0, 522, 523, 1, 0, 0, 0, 523,
		526, 1, 0, 0, 0, 524, 522, 1, 0, 0, 0, 525, 527, 5, 52, 0, 0, 526, 525,
		1, 0, 0, 0, 526, 527, 1, 0, 0, 0, 527, 529, 1, 0, 0, 0, 528, 530, 5, 51,
		0, 0, 529, 528, 1, 0, 0, 0, 529, 530, 1, 0, 0, 0, 530, 532, 1, 0, 0, 0,
		531, 508, 1, 0, 0, 0, 531, 532, 1, 0, 0, 0, 532, 551, 1, 0, 0, 0, 533,
		535, 5, 50, 0, 0, 534, 533, 1, 0, 0, 0, 535, 536, 1, 0, 0, 0, 536, 534,
		1, 0, 0, 0, 536, 537, 1, 0, 0, 0, 537, 538, 1, 0, 0, 0, 538, 542, 3, 104,
		52, 0, 539, 541, 5, 50, 0, 0, 540, 539, 1, 0, 0, 0, 541, 544, 1, 0, 0,
		0, 542, 540, 1, 0, 0, 0, 542, 543, 1, 0, 0, 0, 543, 546, 1, 0, 0, 0, 544,
		542, 1, 0, 0, 0, 545, 547, 5, 52, 0, 0, 546, 545, 1, 0, 0, 0, 546, 547,
		1, 0, 0, 0, 547, 549, 1, 0, 0, 0, 548, 550, 5, 51, 0, 0, 549, 548, 1, 0,
		0, 0, 549, 550, 1, 0, 0, 0, 550, 552, 1, 0, 0, 0, 551, 534, 1, 0, 0, 0,
		551, 552, 1, 0, 0, 0, 552, 577, 1, 0, 0, 0, 553, 555, 5, 50, 0, 0, 554,
		553, 1, 0, 0, 0, 555, 556, 1, 0, 0, 0, 556, 554, 1, 0, 0, 0, 556, 557,
		1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 560, 5, 3, 0, 0, 559, 561, 5, 50,
		0, 0, 560, 559, 1, 0, 0, 0, 561, 562, 1, 0, 0, 0, 562, 560, 1, 0, 0, 0,
		562, 563, 1, 0, 0, 0, 563, 564, 1, 0, 0, 0, 564, 568, 3, 34, 17, 0, 565,
		567, 5, 50, 0, 0, 566, 565, 1, 0, 0, 0, 567, 570, 1, 0, 0, 0, 568, 566,
		1, 0, 0, 0, 568, 569, 1, 0, 0, 0, 569, 572, 1, 0, 0, 0, 570, 568, 1, 0,
		0, 0, 571, 573, 5, 52, 0, 0, 572, 571, 1, 0, 0, 0, 572, 573, 1, 0, 0, 0,
		573, 575, 1, 0, 0, 0, 574, 576, 5, 51, 0, 0, 575, 574, 1, 0, 0, 0, 575,
		576, 1, 0, 0, 0, 576, 578, 1, 0, 0, 0, 577, 554, 1, 0, 0, 0, 577, 578,
		1, 0, 0, 0, 578, 603, 1, 0, 0, 0, 579, 581, 5, 50, 0, 0, 580, 579, 1, 0,
		0, 0, 581, 582, 1, 0, 0, 0, 582, 580, 1, 0, 0, 0, 582, 583, 1, 0, 0, 0,
		583, 584, 1, 0, 0, 0, 584, 586, 5, 9, 0, 0, 585, 587, 5, 50, 0, 0, 586,
		585, 1, 0, 0, 0, 587, 588, 1, 0, 0, 0, 588, 586, 1, 0, 0, 0, 588, 589,
		1, 0, 0, 0, 589, 590, 1, 0, 0, 0, 590, 594, 3, 28, 14, 0, 591, 593, 5,
		50, 0, 0, 592, 591, 1, 0, 0, 0, 593, 596, 1, 0, 0, 0, 594, 592, 1, 0, 0,
		0, 594, 595, 1, 0, 0, 0, 595, 598, 1, 0, 0, 0, 596, 594, 1, 0, 0, 0, 597,
		599, 5, 52, 0, 0, 598, 597, 1, 0, 0, 0, 598, 599, 1, 0, 0, 0, 599, 601,
		1, 0, 0, 0, 600, 602, 5, 51, 0, 0, 601, 600, 1, 0, 0, 0, 601, 602, 1, 0,
		0, 0, 602, 604, 1, 0, 0, 0, 603, 580, 1, 0, 0, 0, 603, 604, 1, 0, 0, 0,
		604, 629, 1, 0, 0, 0, 605, 607, 5, 50, 0, 0, 606, 605, 1, 0, 0, 0, 607,
		608, 1, 0, 0, 0, 608, 606, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 609, 610,
		1, 0, 0, 0, 610, 612, 5, 10, 0, 0, 611, 613, 5, 50, 0, 0, 612, 611, 1,
		0, 0, 0, 613, 614, 1, 0, 0, 0, 614, 612, 1, 0, 0, 0, 614, 615, 1, 0, 0,
		0, 615, 616, 1, 0, 0, 0, 616, 620, 3, 30, 15, 0, 617, 619, 5, 50, 0, 0,
		618, 617, 1, 0, 0, 0, 619, 622, 1, 0, 0, 0, 620, 618, 1, 0, 0, 0, 620,
		621, 1, 0, 0, 0, 621, 624, 1, 0, 0, 0, 622, 620, 1, 0, 0, 0, 623, 625,
		5, 52, 0, 0, 624, 623, 1, 0, 0, 0, 624, 625, 1, 0, 0, 0, 625, 627, 1, 0,
		0, 0, 626, 628, 5, 51, 0, 0, 627, 626, 1, 0, 0, 0, 627, 628, 1, 0, 0, 0,
		628, 630, 1, 0, 0, 0, 629, 606, 1, 0, 0, 0, 629, 630, 1, 0, 0, 0, 630,
		658, 1, 0, 0, 0, 631, 633, 5, 50, 0, 0, 632, 631, 1, 0, 0, 0, 633, 634,
		1, 0, 0, 0, 634, 632, 1, 0, 0, 0, 634, 635, 1, 0, 0, 0, 635, 636, 1, 0,
		0, 0, 636, 638, 5, 11, 0, 0, 637, 639, 5, 12, 0, 0, 638, 637, 1, 0, 0,
		0, 638, 639, 1, 0, 0, 0, 639, 641, 1, 0, 0, 0, 640, 642, 5, 50, 0, 0, 641,
		640, 1, 0, 0, 0, 642, 643, 1, 0, 0, 0, 643, 641, 1, 0, 0, 0, 643, 644,
		1, 0, 0, 0, 644, 645, 1, 0, 0, 0, 645, 649, 3, 32, 16, 0, 646, 648, 5,
		50, 0, 0, 647, 646, 1, 0, 0, 0, 648, 651, 1, 0, 0, 0, 649, 647, 1, 0, 0,
		0, 649, 650, 1, 0, 0, 0, 650, 653, 1, 0, 0, 0, 651, 649, 1, 0, 0, 0, 652,
		654, 5, 52, 0, 0, 653, 652, 1, 0, 0, 0, 653, 654, 1, 0, 0, 0, 654, 656,
		1, 0, 0, 0, 655, 657, 5, 51, 0, 0, 656, 655, 1, 0, 0, 0, 656, 657, 1, 0,
		0, 0, 657, 659, 1, 0, 0, 0, 658, 632, 1, 0, 0, 0, 658, 659, 1, 0, 0, 0,
		659, 687, 1, 0, 0, 0, 660, 662, 5, 50, 0, 0, 661, 660, 1, 0, 0, 0, 662,
		663, 1, 0, 0, 0, 663, 661, 1, 0, 0, 0, 663, 664, 1, 0, 0, 0, 664, 665,
		1, 0, 0, 0, 665, 667, 5, 13, 0, 0, 666, 668, 5, 50, 0, 0, 667, 666, 1,
		0, 0, 0, 668, 669, 1, 0, 0, 0, 669, 667, 1, 0, 0, 0, 669, 670, 1, 0, 0,
		0, 670, 671, 1, 0, 0, 0, 671, 673, 3, 106, 53, 0, 672, 674, 3, 26, 13,
		0, 673, 672, 1, 0, 0, 0, 673, 674, 1, 0, 0, 0, 674, 678, 1, 0, 0, 0, 675,
		677, 5, 50, 0, 0, 676, 675, 1, 0, 0, 0, 677, 680, 1, 0, 0, 0, 678, 676,
		1, 0, 0, 0, 678, 679, 1, 0, 0, 0, 679, 682, 1, 0, 0, 0, 680, 678, 1, 0,
		0, 0, 681, 683, 5, 52, 0, 0, 682, 681, 1, 0, 0, 0, 682, 683, 1, 0, 0, 0,
		683, 685, 1, 0, 0, 0, 684, 686, 5, 51, 0, 0, 685, 684, 1, 0, 0, 0, 685,
		686, 1, 0, 0, 0, 686, 688, 1, 0, 0, 0, 687, 661, 1, 0, 0, 0, 687, 688,
		1, 0, 0, 0, 688, 710, 1, 0, 0, 0, 689, 691, 5, 50, 0, 0, 690, 689, 1, 0,
		0, 0, 691, 692, 1, 0, 0, 0, 692, 690, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0,
		693, 696, 1, 0, 0, 0, 694, 697, 3, 46, 23, 0, 695, 697, 3, 48, 24, 0, 696,
		694, 1, 0, 0, 0, 696, 695, 1, 0, 0, 0, 697, 701, 1, 0, 0, 0, 698, 700,
		5, 50, 0, 0, 699, 698, 1, 0, 0, 0, 700, 703, 1, 0, 0, 0, 701, 699, 1, 0,
		0, 0, 701, 702, 1, 0, 0, 0, 702, 705, 1, 0, 0, 0, 703, 701, 1, 0, 0, 0,
		704, 706, 5, 52, 0, 0, 705, 704, 1, 0, 0, 0, 705, 706, 1, 0, 0, 0, 706,
		708, 1, 0, 0, 0, 707, 709, 5, 51, 0, 0, 708, 707, 1, 0, 0, 0, 708, 709,
		1, 0, 0, 0, 709, 711, 1, 0, 0, 0, 710, 690, 1, 0, 0, 0, 710, 711, 1, 0,
		0, 0, 711, 730, 1, 0, 0, 0, 712, 714, 5, 50, 0, 0, 713, 712, 1, 0, 0, 0,
		714, 715, 1, 0, 0, 0, 715, 713, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716,
		717, 1, 0, 0, 0, 717, 721, 3, 50, 25, 0, 718, 720, 5, 50, 0, 0, 719, 718,
		1, 0, 0, 0, 720, 723, 1, 0, 0, 0, 721, 719, 1, 0, 0, 0, 721, 722, 1, 0,
		0, 0, 722, 725, 1, 0, 0, 0, 723, 721, 1, 0, 0, 0, 724, 726, 5, 52, 0, 0,
		725, 724, 1, 0, 0, 0, 725, 726, 1, 0, 0, 0, 726, 728, 1, 0, 0, 0, 727,
		729, 5, 51, 0, 0, 728, 727, 1, 0, 0, 0, 728, 729, 1, 0, 0, 0, 729, 731,
		1, 0, 0, 0, 730, 713, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731, 756, 1, 0,
		0, 0, 732, 734, 5, 50, 0, 0, 733, 732, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0,
		735, 733, 1, 0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 737, 1, 0, 0, 0, 737,
		739, 5, 14, 0, 0, 738, 740, 5, 50, 0, 0, 739, 738, 1, 0, 0, 0, 740, 741,
		1, 0, 0, 0, 741, 739, 1, 0, 0, 0, 741, 742, 1, 0, 0, 0, 742, 743, 1, 0,
		0, 0, 743, 747, 3, 36, 18, 0, 744, 746, 5, 50, 0, 0, 745, 744, 1, 0, 0,
		0, 746, 749, 1, 0, 0, 0, 747, 745, 1, 0, 0, 0, 747, 748, 1, 0, 0, 0, 748,
		751, 1, 0, 0, 0, 749, 747, 1, 0, 0, 0, 750, 752, 5, 52, 0, 0, 751, 750,
		1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 754, 1, 0, 0, 0, 753, 755, 5, 51,
		0, 0, 754, 753, 1, 0, 0, 0, 754, 755, 1, 0, 0, 0, 755, 757, 1, 0, 0, 0,
		756, 733, 1, 0, 0, 0, 756, 757, 1, 0, 0, 0, 757, 759, 1, 0, 0, 0, 758,
		760, 3, 116, 58, 0, 759, 758, 1, 0, 0, 0, 759, 760, 1, 0, 0, 0, 760, 764,
		1, 0, 0, 0, 761, 763, 5, 50, 0, 0, 762, 761, 1, 0, 0, 0, 763, 766, 1, 0,
		0, 0, 764, 762, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0, 765, 768, 1, 0, 0, 0,
		766, 764, 1, 0, 0, 0, 767, 769, 5, 52, 0, 0, 768, 767, 1, 0, 0, 0, 768,
		769, 1, 0, 0, 0, 769, 771, 1, 0, 0, 0, 770, 772, 5, 51, 0, 0, 771, 770,
		1, 0, 0, 0, 771, 772, 1, 0, 0, 0, 772, 776, 1, 0, 0, 0, 773, 775, 5, 50,
		0, 0, 774, 773, 1, 0, 0, 0, 775, 778, 1, 0, 0, 0, 776, 774, 1, 0, 0, 0,
		776, 777, 1, 0, 0, 0, 777, 780, 1, 0, 0, 0, 778, 776, 1, 0, 0, 0, 779,
		781, 5, 52, 0, 0, 780, 779, 1, 0, 0, 0, 780, 781, 1, 0, 0, 0, 781, 782,
		1, 0, 0, 0, 782, 784, 3, 130, 65, 0, 783, 785, 5, 52, 0, 0, 784, 783, 1,
		0, 0, 0, 784, 785, 1, 0, 0, 0, 785, 25, 1, 0, 0, 0, 786, 787, 5, 39, 0,
		0, 787, 27, 1, 0, 0, 0, 788, 789, 3, 126, 63, 0, 789, 29, 1, 0, 0, 0, 790,
		791, 3, 126, 63, 0, 791, 31, 1, 0, 0, 0, 792, 793, 3, 126, 63, 0, 793,
		33, 1, 0, 0, 0, 794, 795, 3, 126, 63, 0, 795, 35, 1, 0, 0, 0, 796, 801,
		3, 38, 19, 0, 797, 801, 3, 40, 20, 0, 798, 801, 3, 42, 21, 0, 799, 801,
		3, 44, 22, 0, 800, 796, 1, 0, 0, 0, 800, 797, 1, 0, 0, 0, 800, 798, 1,
		0, 0, 0, 800, 799, 1, 0, 0, 0, 801, 37, 1, 0, 0, 0, 802, 803, 5, 15, 0,
		0, 803, 39, 1, 0, 0, 0, 804, 805, 5, 16, 0, 0, 805, 41, 1, 0, 0, 0, 806,
		807, 5, 17, 0, 0, 807, 43, 1, 0, 0, 0, 808, 809, 5, 18, 0, 0, 809, 45,
		1, 0, 0, 0, 810, 811, 5, 19, 0, 0, 811, 47, 1, 0, 0, 0, 812, 813, 5, 20,
		0, 0, 813, 49, 1, 0, 0, 0, 814, 815, 5, 21, 0, 0, 815, 51, 1, 0, 0, 0,
		816, 817, 3, 54, 27, 0, 817, 821, 3, 56, 28, 0, 818, 820, 5, 50, 0, 0,
		819, 818, 1, 0, 0, 0, 820, 823, 1, 0, 0, 0, 821, 819, 1, 0, 0, 0, 821,
		822, 1, 0, 0, 0, 822, 824, 1, 0, 0, 0, 823, 821, 1, 0, 0, 0, 824, 825,
		7, 0, 0, 0, 825, 827, 1, 0, 0, 0, 826, 816, 1, 0, 0, 0, 827, 828, 1, 0,
		0, 0, 828, 826, 1, 0, 0, 0, 828, 829, 1, 0, 0, 0, 829, 53, 1, 0, 0, 0,
		830, 831, 5, 45, 0, 0, 831, 832, 3, 120, 60, 0, 832, 55, 1, 0, 0, 0, 833,
		837, 3, 128, 64, 0, 834, 836, 5, 50, 0, 0, 835, 834, 1, 0, 0, 0, 836, 839,
		1, 0, 0, 0, 837, 835, 1, 0, 0, 0, 837, 838, 1, 0, 0, 0, 838, 841, 1, 0,
		0, 0, 839, 837, 1, 0, 0, 0, 840, 842, 5, 52, 0, 0, 841, 840, 1, 0, 0, 0,
		841, 842, 1, 0, 0, 0, 842, 844, 1, 0, 0, 0, 843, 845, 5, 51, 0, 0, 844,
		843, 1, 0, 0, 0, 844, 845, 1, 0, 0, 0, 845, 849, 1, 0, 0, 0, 846, 848,
		5, 50, 0, 0, 847, 846, 1, 0, 0, 0, 848, 851, 1, 0, 0, 0, 849, 847, 1, 0,
		0, 0, 849, 850, 1, 0, 0, 0, 850, 852, 1, 0, 0, 0, 851, 849, 1, 0, 0, 0,
		852, 856, 3, 132, 66, 0, 853, 855, 5, 50, 0, 0, 854, 853, 1, 0, 0, 0, 855,
		858, 1, 0, 0, 0, 856, 854, 1, 0, 0, 0, 856, 857, 1, 0, 0, 0, 857, 860,
		1, 0, 0, 0, 858, 856, 1, 0, 0, 0, 859, 861, 5, 52, 0, 0, 860, 859, 1, 0,
		0, 0, 860, 861, 1, 0, 0, 0, 861, 863, 1, 0, 0, 0, 862, 864, 5, 51, 0, 0,
		863, 862, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864, 889, 1, 0, 0, 0, 865,
		867, 5, 50, 0, 0, 866, 865, 1, 0, 0, 0, 867, 868, 1, 0, 0, 0, 868, 866,
		1, 0, 0, 0, 868, 869, 1, 0, 0, 0, 869, 870, 1, 0, 0, 0, 870, 872, 5, 1,
		0, 0, 871, 873, 5, 50, 0, 0, 872, 871, 1, 0, 0, 0, 873, 874, 1, 0, 0, 0,
		874, 872, 1, 0, 0, 0, 874, 875, 1, 0, 0, 0, 875, 876, 1, 0, 0, 0, 876,
		880, 3, 114, 57, 0, 877, 879, 5, 50, 0, 0, 878, 877, 1, 0, 0, 0, 879, 882,
		1, 0, 0, 0, 880, 878, 1, 0, 0, 0, 880, 881, 1, 0, 0, 0, 881, 884, 1, 0,
		0, 0, 882, 880, 1, 0, 0, 0, 883, 885, 5, 52, 0, 0, 884, 883, 1, 0, 0, 0,
		884, 885, 1, 0, 0, 0, 885, 887, 1, 0, 0, 0, 886, 888, 5, 51, 0, 0, 887,
		886, 1, 0, 0, 0, 887, 888, 1, 0, 0, 0, 888, 890, 1, 0, 0, 0, 889, 866,
		1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890, 915, 1, 0, 0, 0, 891, 893, 5, 50,
		0, 0, 892, 891, 1, 0, 0, 0, 893, 894, 1, 0, 0, 0, 894, 892, 1, 0, 0, 0,
		894, 895, 1, 0, 0, 0, 895, 896, 1, 0, 0, 0, 896, 898, 5, 2, 0, 0, 897,
		899, 5, 50, 0, 0, 898, 897, 1, 0, 0, 0, 899, 900, 1, 0, 0, 0, 900, 898,
		1, 0, 0, 0, 900, 901, 1, 0, 0, 0, 901, 902, 1, 0, 0, 0, 902, 906, 3, 112,
		56, 0, 903, 905, 5, 50, 0, 0, 904, 903, 1, 0, 0, 0, 905, 908, 1, 0, 0,
		0, 906, 904, 1, 0, 0, 0, 906, 907, 1, 0, 0, 0, 907, 910, 1, 0, 0, 0, 908,
		906, 1, 0, 0, 0, 909, 911, 5, 52, 0, 0, 910, 909, 1, 0, 0, 0, 910, 911,
		1, 0, 0, 0, 911, 913, 1, 0, 0, 0, 912, 914, 5, 51, 0, 0, 913, 912, 1, 0,
		0, 0, 913, 914, 1, 0, 0, 0, 914, 916, 1, 0, 0, 0, 915, 892, 1, 0, 0, 0,
		915, 916, 1, 0, 0, 0, 916, 935, 1, 0, 0, 0, 917, 919, 5, 50, 0, 0, 918,
		917, 1, 0, 0, 0, 919, 920, 1, 0, 0, 0, 920, 918, 1, 0, 0, 0, 920, 921,
		1, 0, 0, 0, 921, 922, 1, 0, 0, 0, 922, 926, 3, 104, 52, 0, 923, 925, 5,
		50, 0, 0, 924, 923, 1, 0, 0, 0, 925, 928, 1, 0, 0, 0, 926, 924, 1, 0, 0,
		0, 926, 927, 1, 0, 0, 0, 927, 930, 1, 0, 0, 0, 928, 926, 1, 0, 0, 0, 929,
		931, 5, 52, 0, 0, 930, 929, 1, 0, 0, 0, 930, 931, 1, 0, 0, 0, 931, 933,
		1, 0, 0, 0, 932, 934, 5, 51, 0, 0, 933, 932, 1, 0, 0, 0, 933, 934, 1, 0,
		0, 0, 934, 936, 1, 0, 0, 0, 935, 918, 1, 0, 0, 0, 935, 936, 1, 0, 0, 0,
		936, 961, 1, 0, 0, 0, 937, 939, 5, 50, 0, 0, 938, 937, 1, 0, 0, 0, 939,
		940, 1, 0, 0, 0, 940, 938, 1, 0, 0, 0, 940, 941, 1, 0, 0, 0, 941, 942,
		1, 0, 0, 0, 942, 944, 5, 13, 0, 0, 943, 945, 5, 50, 0, 0, 944, 943, 1,
		0, 0, 0, 945, 946, 1, 0, 0, 0, 946, 944, 1, 0, 0, 0, 946, 947, 1, 0, 0,
		0, 947, 948, 1, 0, 0, 0, 948, 952, 3, 106, 53, 0, 949, 951, 5, 50, 0, 0,
		950, 949, 1, 0, 0, 0, 951, 954, 1, 0, 0, 0, 952, 950, 1, 0, 0, 0, 952,
		953, 1, 0, 0, 0, 953, 956, 1, 0, 0, 0, 954, 952, 1, 0, 0, 0, 955, 957,
		5, 52, 0, 0, 956, 955, 1, 0, 0, 0, 956, 957, 1, 0, 0, 0, 957, 959, 1, 0,
		0, 0, 958, 960, 5, 51, 0, 0, 959, 958, 1, 0, 0, 0, 959, 960, 1, 0, 0, 0,
		960, 962, 1, 0, 0, 0, 961, 938, 1, 0, 0, 0, 961, 962, 1, 0, 0, 0, 962,
		964, 1, 0, 0, 0, 963, 965, 3, 116, 58, 0, 964, 963, 1, 0, 0, 0, 964, 965,
		1, 0, 0, 0, 965, 969, 1, 0, 0, 0, 966, 968, 5, 50, 0, 0, 967, 966, 1, 0,
		0, 0, 968, 971, 1, 0, 0, 0, 969, 967, 1, 0, 0, 0, 969, 970, 1, 0, 0, 0,
		970, 973, 1, 0, 0, 0, 971, 969, 1, 0, 0, 0, 972, 974, 5, 52, 0, 0, 973,
		972, 1, 0, 0, 0, 973, 974, 1, 0, 0, 0, 974, 976, 1, 0, 0, 0, 975, 977,
		5, 51, 0, 0, 976, 975, 1, 0, 0, 0, 976, 977, 1, 0, 0, 0, 977, 981, 1, 0,
		0, 0, 978, 980, 5, 50, 0, 0, 979, 978, 1, 0, 0, 0, 980, 983, 1, 0, 0, 0,
		981, 979, 1, 0, 0, 0, 981, 982, 1, 0, 0, 0, 982, 985, 1, 0, 0, 0, 983,
		981, 1, 0, 0, 0, 984, 986, 5, 52, 0, 0, 985, 984, 1, 0, 0, 0, 985, 986,
		1, 0, 0, 0, 986, 987, 1, 0, 0, 0, 987, 989, 3, 130, 65, 0, 988, 990, 5,
		52, 0, 0, 989, 988, 1, 0, 0, 0, 989, 990, 1, 0, 0, 0, 990, 57, 1, 0, 0,
		0, 991, 992, 3, 60, 30, 0, 992, 996, 3, 62, 31, 0, 993, 995, 5, 50, 0,
		0, 994, 993, 1, 0, 0, 0, 995, 998, 1, 0, 0, 0, 996, 994, 1, 0, 0, 0, 996,
		997, 1, 0, 0, 0, 997, 999, 1, 0, 0, 0, 998, 996, 1, 0, 0, 0, 999, 1000,
		7, 0, 0, 0, 1000, 1002, 1, 0, 0, 0, 1001, 991, 1, 0, 0, 0, 1002, 1003,
		1, 0, 0, 0, 1003, 1001, 1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004, 59, 1,
		0, 0, 0, 1005, 1006, 5, 46, 0, 0, 1006, 1007, 3, 120, 60, 0, 1007, 61,
		1, 0, 0, 0, 1008, 1012, 3, 128, 64, 0, 1009, 1011, 5, 50, 0, 0, 1010, 1009,
		1, 0, 0, 0, 1011, 1014, 1, 0, 0, 0, 1012, 1010, 1, 0, 0, 0, 1012, 1013,
		1, 0, 0, 0, 1013, 1016, 1, 0, 0, 0, 1014, 1012, 1, 0, 0, 0, 1015, 1017,
		5, 52, 0, 0, 1016, 1015, 1, 0, 0, 0, 1016, 1017, 1, 0, 0, 0, 1017, 1019,
		1, 0, 0, 0, 1018, 1020, 5, 51, 0, 0, 1019, 1018, 1, 0, 0, 0, 1019, 1020,
		1, 0, 0, 0, 1020, 1024, 1, 0, 0, 0, 1021, 1023, 5, 50, 0, 0, 1022, 1021,
		1, 0, 0, 0, 1023, 1026, 1, 0, 0, 0, 1024, 1022, 1, 0, 0, 0, 1024, 1025,
		1, 0, 0, 0, 1025, 1027, 1, 0, 0, 0, 1026, 1024, 1, 0, 0, 0, 1027, 1031,
		3, 132, 66, 0, 1028, 1030, 5, 50, 0, 0, 1029, 1028, 1, 0, 0, 0, 1030, 1033,
		1, 0, 0, 0, 1031, 1029, 1, 0, 0, 0, 1031, 1032, 1, 0, 0, 0, 1032, 1035,
		1, 0, 0, 0, 1033, 1031, 1, 0, 0, 0, 1034, 1036, 5, 52, 0, 0, 1035, 1034,
		1, 0, 0, 0, 1035, 1036, 1, 0, 0, 0, 1036, 1038, 1, 0, 0, 0, 1037, 1039,
		5, 51, 0, 0, 1038, 1037, 1, 0, 0, 0, 1038, 1039, 1, 0, 0, 0, 1039, 1064,
		1, 0, 0, 0, 1040, 1042, 5, 50, 0, 0, 1041, 1040, 1, 0, 0, 0, 1042, 1043,
		1, 0, 0, 0, 1043, 1041, 1, 0, 0, 0, 1043, 1044, 1, 0, 0, 0, 1044, 1045,
		1, 0, 0, 0, 1045, 1047, 5, 1, 0, 0, 1046, 1048, 5, 50, 0, 0, 1047, 1046,
		1, 0, 0, 0, 1048, 1049, 1, 0, 0, 0, 1049, 1047, 1, 0, 0, 0, 1049, 1050,
		1, 0, 0, 0, 1050, 1051, 1, 0, 0, 0, 1051, 1055, 3, 114, 57, 0, 1052, 1054,
		5, 50, 0, 0, 1053, 1052, 1, 0, 0, 0, 1054, 1057, 1, 0, 0, 0, 1055, 1053,
		1, 0, 0, 0, 1055, 1056, 1, 0, 0, 0, 1056, 1059, 1, 0, 0, 0, 1057, 1055,
		1, 0, 0, 0, 1058, 1060, 5, 52, 0, 0, 1059, 1058, 1, 0, 0, 0, 1059, 1060,
		1, 0, 0, 0, 1060, 1062, 1, 0, 0, 0, 1061, 1063, 5, 51, 0, 0, 1062, 1061,
		1, 0, 0, 0, 1062, 1063, 1, 0, 0, 0, 1063, 1065, 1, 0, 0, 0, 1064, 1041,
		1, 0, 0, 0, 1064, 1065, 1, 0, 0, 0, 1065, 1090, 1, 0, 0, 0, 1066, 1068,
		5, 50, 0, 0, 1067, 1066, 1, 0, 0, 0, 1068, 1069, 1, 0, 0, 0, 1069, 1067,
		1, 0, 0, 0, 1069, 1070, 1, 0, 0, 0, 1070, 1071, 1, 0, 0, 0, 1071, 1073,
		5, 2, 0, 0, 1072, 1074, 5, 50, 0, 0, 1073, 1072, 1, 0, 0, 0, 1074, 1075,
		1, 0, 0, 0, 1075, 1073, 1, 0, 0, 0, 1075, 1076, 1, 0, 0, 0, 1076, 1077,
		1, 0, 0, 0, 1077, 1081, 3, 112, 56, 0, 1078, 1080, 5, 50, 0, 0, 1079, 1078,
		1, 0, 0, 0, 1080, 1083, 1, 0, 0, 0, 1081, 1079, 1, 0, 0, 0, 1081, 1082,
		1, 0, 0, 0, 1082, 1085, 1, 0, 0, 0, 1083, 1081, 1, 0, 0, 0, 1084, 1086,
		5, 52, 0, 0, 1085, 1084, 1, 0, 0, 0, 1085, 1086, 1, 0, 0, 0, 1086, 1088,
		1, 0, 0, 0, 1087, 1089, 5, 51, 0, 0, 1088, 1087, 1, 0, 0, 0, 1088, 1089,
		1, 0, 0, 0, 1089, 1091, 1, 0, 0, 0, 1090, 1067, 1, 0, 0, 0, 1090, 1091,
		1, 0, 0, 0, 1091, 1110, 1, 0, 0, 0, 1092, 1094, 5, 50, 0, 0, 1093, 1092,
		1, 0, 0, 0, 1094, 1095, 1, 0, 0, 0, 1095, 1093, 1, 0, 0, 0, 1095, 1096,
		1, 0, 0, 0, 1096, 1097, 1, 0, 0, 0, 1097, 1101, 3, 104, 52, 0, 1098, 1100,
		5, 50, 0, 0, 1099, 1098, 1, 0, 0, 0, 1100, 1103, 1, 0, 0, 0, 1101, 1099,
		1, 0, 0, 0, 1101, 1102, 1, 0, 0, 0, 1102, 1105, 1, 0, 0, 0, 1103, 1101,
		1, 0, 0, 0, 1104, 1106, 5, 52, 0, 0, 1105, 1104, 1, 0, 0, 0, 1105, 1106,
		1, 0, 0, 0, 1106, 1108, 1, 0, 0, 0, 1107, 1109, 5, 51, 0, 0, 1108, 1107,
		1, 0, 0, 0, 1108, 1109, 1, 0, 0, 0, 1109, 1111, 1, 0, 0, 0, 1110, 1093,
		1, 0, 0, 0, 1110, 1111, 1, 0, 0, 0, 1111, 1136, 1, 0, 0, 0, 1112, 1114,
		5, 50, 0, 0, 1113, 1112, 1, 0, 0, 0, 1114, 1115, 1, 0, 0, 0, 1115, 1113,
		1, 0, 0, 0, 1115, 1116, 1, 0, 0, 0, 1116, 1117, 1, 0, 0, 0, 1117, 1119,
		5, 22, 0, 0, 1118, 1120, 5, 50, 0, 0, 1119, 1118, 1, 0, 0, 0, 1120, 1121,
		1, 0, 0, 0, 1121, 1119, 1, 0, 0, 0, 1121, 1122, 1, 0, 0, 0, 1122, 1123,
		1, 0, 0, 0, 1123, 1127, 3, 64, 32, 0, 1124, 1126, 5, 50, 0, 0, 1125, 1124,
		1, 0, 0, 0, 1126, 1129, 1, 0, 0, 0, 1127, 1125, 1, 0, 0, 0, 1127, 1128,
		1, 0, 0, 0, 1128, 1131, 1, 0, 0, 0, 1129, 1127, 1, 0, 0, 0, 1130, 1132,
		5, 52, 0, 0, 1131, 1130, 1, 0, 0, 0, 1131, 1132, 1, 0, 0, 0, 1132, 1134,
		1, 0, 0, 0, 1133, 1135, 5, 51, 0, 0, 1134, 1133, 1, 0, 0, 0, 1134, 1135,
		1, 0, 0, 0, 1135, 1137, 1, 0, 0, 0, 1136, 1113, 1, 0, 0, 0, 1136, 1137,
		1, 0, 0, 0, 1137, 1139, 1, 0, 0, 0, 1138, 1140, 3, 116, 58, 0, 1139, 1138,
		1, 0, 0, 0, 1139, 1140, 1, 0, 0, 0, 1140, 1144, 1, 0, 0, 0, 1141, 1143,
		5, 50, 0, 0, 1142, 1141, 1, 0, 0, 0, 1143, 1146, 1, 0, 0, 0, 1144, 1142,
		1, 0, 0, 0, 1144, 1145, 1, 0, 0, 0, 1145, 1148, 1, 0, 0, 0, 1146, 1144,
		1, 0, 0, 0, 1147, 1149, 5, 52, 0, 0, 1148, 1147, 1, 0, 0, 0, 1148, 1149,
		1, 0, 0, 0, 1149, 1151, 1, 0, 0, 0, 1150, 1152, 5, 51, 0, 0, 1151, 1150,
		1, 0, 0, 0, 1151, 1152, 1, 0, 0, 0, 1152, 1156, 1, 0, 0, 0, 1153, 1155,
		5, 50, 0, 0, 1154, 1153, 1, 0, 0, 0, 1155, 1158, 1, 0, 0, 0, 1156, 1154,
		1, 0, 0, 0, 1156, 1157, 1, 0, 0, 0, 1157, 1160, 1, 0, 0, 0, 1158, 1156,
		1, 0, 0, 0, 1159, 1161, 5, 52, 0, 0, 1160, 1159, 1, 0, 0, 0, 1160, 1161,
		1, 0, 0, 0, 1161, 1162, 1, 0, 0, 0, 1162, 1164, 3, 130, 65, 0, 1163, 1165,
		5, 52, 0, 0, 1164, 1163, 1, 0, 0, 0, 1164, 1165, 1, 0, 0, 0, 1165, 63,
		1, 0, 0, 0, 1166, 1169, 3, 126, 63, 0, 1167, 1169, 3, 122, 61, 0, 1168,
		1166, 1, 0, 0, 0, 1168, 1167, 1, 0, 0, 0, 1169, 65, 1, 0, 0, 0, 1170, 1171,
		3, 68, 34, 0, 1171, 1175, 3, 70, 35, 0, 1172, 1174, 5, 50, 0, 0, 1173,
		1172, 1, 0, 0, 0, 1174, 1177, 1, 0, 0, 0, 1175, 1173, 1, 0, 0, 0, 1175,
		1176, 1, 0, 0, 0, 1176, 1178, 1, 0, 0, 0, 1177, 1175, 1, 0, 0, 0, 1178,
		1179, 7, 0, 0, 0, 1179, 1181, 1, 0, 0, 0, 1180, 1170, 1, 0, 0, 0, 1181,
		1182, 1, 0, 0, 0, 1182, 1180, 1, 0, 0, 0, 1182, 1183, 1, 0, 0, 0, 1183,
		67, 1, 0, 0, 0, 1184, 1185, 5, 44, 0, 0, 1185, 1186, 3, 120, 60, 0, 1186,
		69, 1, 0, 0, 0, 1187, 1191, 3, 128, 64, 0, 1188, 1190, 5, 50, 0, 0, 1189,
		1188, 1, 0, 0, 0, 1190, 1193, 1, 0, 0, 0, 1191, 1189, 1, 0, 0, 0, 1191,
		1192, 1, 0, 0, 0, 1192, 1195, 1, 0, 0, 0, 1193, 1191, 1, 0, 0, 0, 1194,
		1196, 5, 52, 0, 0, 1195, 1194, 1, 0, 0, 0, 1195, 1196, 1, 0, 0, 0, 1196,
		1198, 1, 0, 0, 0, 1197, 1199, 5, 51, 0, 0, 1198, 1197, 1, 0, 0, 0, 1198,
		1199, 1, 0, 0, 0, 1199, 1203, 1, 0, 0, 0, 1200, 1202, 5, 50, 0, 0, 1201,
		1200, 1, 0, 0, 0, 1202, 1205, 1, 0, 0, 0, 1203, 1201, 1, 0, 0, 0, 1203,
		1204, 1, 0, 0, 0, 1204, 1206, 1, 0, 0, 0, 1205, 1203, 1, 0, 0, 0, 1206,
		1210, 3, 132, 66, 0, 1207, 1209, 5, 50, 0, 0, 1208, 1207, 1, 0, 0, 0, 1209,
		1212, 1, 0, 0, 0, 1210, 1208, 1, 0, 0, 0, 1210, 1211, 1, 0, 0, 0, 1211,
		1214, 1, 0, 0, 0, 1212, 1210, 1, 0, 0, 0, 1213, 1215, 5, 52, 0, 0, 1214,
		1213, 1, 0, 0, 0, 1214, 1215, 1, 0, 0, 0, 1215, 1217, 1, 0, 0, 0, 1216,
		1218, 5, 51, 0, 0, 1217, 1216, 1, 0, 0, 0, 1217, 1218, 1, 0, 0, 0, 1218,
		1243, 1, 0, 0, 0, 1219, 1221, 5, 50, 0, 0, 1220, 1219, 1, 0, 0, 0, 1221,
		1222, 1, 0, 0, 0, 1222, 1220, 1, 0, 0, 0, 1222, 1223, 1, 0, 0, 0, 1223,
		1224, 1, 0, 0, 0, 1224, 1226, 5, 2, 0, 0, 1225, 1227, 5, 50, 0, 0, 1226,
		1225, 1, 0, 0, 0, 1227, 1228, 1, 0, 0, 0, 1228, 1226, 1, 0, 0, 0, 1228,
		1229, 1, 0, 0, 0, 1229, 1230, 1, 0, 0, 0, 1230, 1234, 3, 112, 56, 0, 1231,
		1233, 5, 50, 0, 0, 1232, 1231, 1, 0, 0, 0, 1233, 1236, 1, 0, 0, 0, 1234,
		1232, 1, 0, 0, 0, 1234, 1235, 1, 0, 0, 0, 1235, 1238, 1, 0, 0, 0, 1236,
		1234, 1, 0, 0, 0, 1237, 1239, 5, 52, 0, 0, 1238, 1237, 1, 0, 0, 0, 1238,
		1239, 1, 0, 0, 0, 1239, 1241, 1, 0, 0, 0, 1240, 1242, 5, 51, 0, 0, 1241,
		1240, 1, 0, 0, 0, 1241, 1242, 1, 0, 0, 0, 1242, 1244, 1, 0, 0, 0, 1243,
		1220, 1, 0, 0, 0, 1243, 1244, 1, 0, 0, 0, 1244, 1246, 1, 0, 0, 0, 1245,
		1247, 3, 116, 58, 0, 1246, 1245, 1, 0, 0, 0, 1246, 1247, 1, 0, 0, 0, 1247,
		1251, 1, 0, 0, 0, 1248, 1250, 5, 50, 0, 0, 1249, 1248, 1, 0, 0, 0, 1250,
		1253, 1, 0, 0, 0, 1251, 1249, 1, 0, 0, 0, 1251, 1252, 1, 0, 0, 0, 1252,
		1255, 1, 0, 0, 0, 1253, 1251, 1, 0, 0, 0, 1254, 1256, 5, 52, 0, 0, 1255,
		1254, 1, 0, 0, 0, 1255, 1256, 1, 0, 0, 0, 1256, 1258, 1, 0, 0, 0, 1257,
		1259, 5, 51, 0, 0, 1258, 1257, 1, 0, 0, 0, 1258, 1259, 1, 0, 0, 0, 1259,
		1263, 1, 0, 0, 0, 1260, 1262, 5, 50, 0, 0, 1261, 1260, 1, 0, 0, 0, 1262,
		1265, 1, 0, 0, 0, 1263, 1261, 1, 0, 0, 0, 1263, 1264, 1, 0, 0, 0, 1264,
		1267, 1, 0, 0, 0, 1265, 1263, 1, 0, 0, 0, 1266, 1268, 5, 52, 0, 0, 1267,
		1266, 1, 0, 0, 0, 1267, 1268, 1, 0, 0, 0, 1268, 1269, 1, 0, 0, 0, 1269,
		1271, 3, 130, 65, 0, 1270, 1272, 5, 52, 0, 0, 1271, 1270, 1, 0, 0, 0, 1271,
		1272, 1, 0, 0, 0, 1272, 71, 1, 0, 0, 0, 1273, 1274, 3, 74, 37, 0, 1274,
		1278, 3, 76, 38, 0, 1275, 1277, 5, 50, 0, 0, 1276, 1275, 1, 0, 0, 0, 1277,
		1280, 1, 0, 0, 0, 1278, 1276, 1, 0, 0, 0, 1278, 1279, 1, 0, 0, 0, 1279,
		1281, 1, 0, 0, 0, 1280, 1278, 1, 0, 0, 0, 1281, 1282, 7, 0, 0, 0, 1282,
		1284, 1, 0, 0, 0, 1283, 1273, 1, 0, 0, 0, 1284, 1285, 1, 0, 0, 0, 1285,
		1283, 1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286, 73, 1, 0, 0, 0, 1287, 1288,
		5, 48, 0, 0, 1288, 1289, 3, 120, 60, 0, 1289, 75, 1, 0, 0, 0, 1290, 1294,
		3, 128, 64, 0, 1291, 1293, 5, 50, 0, 0, 1292, 1291, 1, 0, 0, 0, 1293, 1296,
		1, 0, 0, 0, 1294, 1292, 1, 0, 0, 0, 1294, 1295, 1, 0, 0, 0, 1295, 1298,
		1, 0, 0, 0, 1296, 1294, 1, 0, 0, 0, 1297, 1299, 5, 52, 0, 0, 1298, 1297,
		1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1301, 1, 0, 0, 0, 1300, 1302,
		5, 51, 0, 0, 1301, 1300, 1, 0, 0, 0, 1301, 1302, 1, 0, 0, 0, 1302, 1306,
		1, 0, 0, 0, 1303, 1305, 5, 50, 0, 0, 1304, 1303, 1, 0, 0, 0, 1305, 1308,
		1, 0, 0, 0, 1306, 1304, 1, 0, 0, 0, 1306, 1307, 1, 0, 0, 0, 1307, 1309,
		1, 0, 0, 0, 1308, 1306, 1, 0, 0, 0, 1309, 1313, 3, 132, 66, 0, 1310, 1312,
		5, 50, 0, 0, 1311, 1310, 1, 0, 0, 0, 1312, 1315, 1, 0, 0, 0, 1313, 1311,
		1, 0, 0, 0, 1313, 1314, 1, 0, 0, 0, 1314, 1317, 1, 0, 0, 0, 1315, 1313,
		1, 0, 0, 0, 1316, 1318, 5, 52, 0, 0, 1317, 1316, 1, 0, 0, 0, 1317, 1318,
		1, 0, 0, 0, 1318, 1320, 1, 0, 0, 0, 1319, 1321, 5, 51, 0, 0, 1320, 1319,
		1, 0, 0, 0, 1320, 1321, 1, 0, 0, 0, 1321, 1346, 1, 0, 0, 0, 1322, 1324,
		5, 50, 0, 0, 1323, 1322, 1, 0, 0, 0, 1324, 1325, 1, 0, 0, 0, 1325, 1323,
		1, 0, 0, 0, 1325, 1326, 1, 0, 0, 0, 1326, 1327, 1, 0, 0, 0, 1327, 1329,
		5, 1, 0, 0, 1328, 1330, 5, 50, 0, 0, 1329, 1328, 1, 0, 0, 0, 1330, 1331,
		1, 0, 0, 0, 1331, 1329, 1, 0, 0, 0, 1331, 1332, 1, 0, 0, 0, 1332, 1333,
		1, 0, 0, 0, 1333, 1337, 3, 114, 57, 0, 1334, 1336, 5, 50, 0, 0, 1335, 1334,
		1, 0, 0, 0, 1336, 1339, 1, 0, 0, 0, 1337, 1335, 1, 0, 0, 0, 1337, 1338,
		1, 0, 0, 0, 1338, 1341, 1, 0, 0, 0, 1339, 1337, 1, 0, 0, 0, 1340, 1342,
		5, 52, 0, 0, 1341, 1340, 1, 0, 0, 0, 1341, 1342, 1, 0, 0, 0, 1342, 1344,
		1, 0, 0, 0, 1343, 1345, 5, 51, 0, 0, 1344, 1343, 1, 0, 0, 0, 1344, 1345,
		1, 0, 0, 0, 1345, 1347, 1, 0, 0, 0, 1346, 1323, 1, 0, 0, 0, 1346, 1347,
		1, 0, 0, 0, 1347, 1372, 1, 0, 0, 0, 1348, 1350, 5, 50, 0, 0, 1349, 1348,
		1, 0, 0, 0, 1350, 1351, 1, 0, 0, 0, 1351, 1349, 1, 0, 0, 0, 1351, 1352,
		1, 0, 0, 0, 1352, 1353, 1, 0, 0, 0, 1353, 1355, 5, 2, 0, 0, 1354, 1356,
		5, 50, 0, 0, 1355, 1354, 1, 0, 0, 0, 1356, 1357, 1, 0, 0, 0, 1357, 1355,
		1, 0, 0, 0, 1357, 1358, 1, 0, 0, 0, 1358, 1359, 1, 0, 0, 0, 1359, 1363,
		3, 112, 56, 0, 1360, 1362, 5, 50, 0, 0, 1361, 1360, 1, 0, 0, 0, 1362, 1365,
		1, 0, 0, 0, 1363, 1361, 1, 0, 0, 0, 1363, 1364, 1, 0, 0, 0, 1364, 1367,
		1, 0, 0, 0, 1365, 1363, 1, 0, 0, 0, 1366, 1368, 5, 52, 0, 0, 1367, 1366,
		1, 0, 0, 0, 1367, 1368, 1, 0, 0, 0, 1368, 1370, 1, 0, 0, 0, 1369, 1371,
		5, 51, 0, 0, 1370, 1369, 1, 0, 0, 0, 1370, 1371, 1, 0, 0, 0, 1371, 1373,
		1, 0, 0, 0, 1372, 1349, 1, 0, 0, 0, 1372, 1373, 1, 0, 0, 0, 1373, 1392,
		1, 0, 0, 0, 1374, 1376, 5, 50, 0, 0, 1375, 1374, 1, 0, 0, 0, 1376, 1377,
		1, 0, 0, 0, 1377, 1375, 1, 0, 0, 0, 1377, 1378, 1, 0, 0, 0, 1378, 1379,
		1, 0, 0, 0, 1379, 1383, 3, 104, 52, 0, 1380, 1382, 5, 50, 0, 0, 1381, 1380,
		1, 0, 0, 0, 1382, 1385, 1, 0, 0, 0, 1383, 1381, 1, 0, 0, 0, 1383, 1384,
		1, 0, 0, 0, 1384, 1387, 1, 0, 0, 0, 1385, 1383, 1, 0, 0, 0, 1386, 1388,
		5, 52, 0, 0, 1387, 1386, 1, 0, 0, 0, 1387, 1388, 1, 0, 0, 0, 1388, 1390,
		1, 0, 0, 0, 1389, 1391, 5, 51, 0, 0, 1390, 1389, 1, 0, 0, 0, 1390, 1391,
		1, 0, 0, 0, 1391, 1393, 1, 0, 0, 0, 1392, 1375, 1, 0, 0, 0, 1392, 1393,
		1, 0, 0, 0, 1393, 1418, 1, 0, 0, 0, 1394, 1396, 5, 50, 0, 0, 1395, 1394,
		1, 0, 0, 0, 1396, 1397, 1, 0, 0, 0, 1397, 1395, 1, 0, 0, 0, 1397, 1398,
		1, 0, 0, 0, 1398, 1399, 1, 0, 0, 0, 1399, 1401, 5, 23, 0, 0, 1400, 1402,
		5, 50, 0, 0, 1401, 1400, 1, 0, 0, 0, 1402, 1403, 1, 0, 0, 0, 1403, 1401,
		1, 0, 0, 0, 1403, 1404, 1, 0, 0, 0, 1404, 1405, 1, 0, 0, 0, 1405, 1409,
		3, 80, 40, 0, 1406, 1408, 5, 50, 0, 0, 1407, 1406, 1, 0, 0, 0, 1408, 1411,
		1, 0, 0, 0, 1409, 1407, 1, 0, 0, 0, 1409, 1410, 1, 0, 0, 0, 1410, 1413,
		1, 0, 0, 0, 1411, 1409, 1, 0, 0, 0, 1412, 1414, 5, 52, 0, 0, 1413, 1412,
		1, 0, 0, 0, 1413, 1414, 1, 0, 0, 0, 1414, 1416, 1, 0, 0, 0, 1415, 1417,
		5, 51, 0, 0, 1416, 1415, 1, 0, 0, 0, 1416, 1417, 1, 0, 0, 0, 1417, 1419,
		1, 0, 0, 0, 1418, 1395, 1, 0, 0, 0, 1418, 1419, 1, 0, 0, 0, 1419, 1444,
		1, 0, 0, 0, 1420, 1422, 5, 50, 0, 0, 1421, 1420, 1, 0, 0, 0, 1422, 1423,
		1, 0, 0, 0, 1423, 1421, 1, 0, 0, 0, 1423, 1424, 1, 0, 0, 0, 1424, 1425,
		1, 0, 0, 0, 1425, 1427, 5, 4, 0, 0, 1426, 1428, 5, 50, 0, 0, 1427, 1426,
		1, 0, 0, 0, 1428, 1429, 1, 0, 0, 0, 1429, 1427, 1, 0, 0, 0, 1429, 1430,
		1, 0, 0, 0, 1430, 1431, 1, 0, 0, 0, 1431, 1435, 3, 108, 54, 0, 1432, 1434,
		5, 50, 0, 0, 1433, 1432, 1, 0, 0, 0, 1434, 1437, 1, 0, 0, 0, 1435, 1433,
		1, 0, 0, 0, 1435, 1436, 1, 0, 0, 0, 1436, 1439, 1, 0, 0, 0, 1437, 1435,
		1, 0, 0, 0, 1438, 1440, 5, 52, 0, 0, 1439, 1438, 1, 0, 0, 0, 1439, 1440,
		1, 0, 0, 0, 1440, 1442, 1, 0, 0, 0, 1441, 1443, 5, 51, 0, 0, 1442, 1441,
		1, 0, 0, 0, 1442, 1443, 1, 0, 0, 0, 1443, 1445, 1, 0, 0, 0, 1444, 1421,
		1, 0, 0, 0, 1444, 1445, 1, 0, 0, 0, 1445, 1470, 1, 0, 0, 0, 1446, 1448,
		5, 50, 0, 0, 1447, 1446, 1, 0, 0, 0, 1448, 1449, 1, 0, 0, 0, 1449, 1447,
		1, 0, 0, 0, 1449, 1450, 1, 0, 0, 0, 1450, 1451, 1, 0, 0, 0, 1451, 1453,
		5, 5, 0, 0, 1452, 1454, 5, 50, 0, 0, 1453, 1452, 1, 0, 0, 0, 1454, 1455,
		1, 0, 0, 0, 1455, 1453, 1, 0, 0, 0, 1455, 1456, 1, 0, 0, 0, 1456, 1457,
		1, 0, 0, 0, 1457, 1461, 3, 110, 55, 0, 1458, 1460, 5, 50, 0, 0, 1459, 1458,
		1, 0, 0, 0, 1460, 1463, 1, 0, 0, 0, 1461, 1459, 1, 0, 0, 0, 1461, 1462,
		1, 0, 0, 0, 1462, 1465, 1, 0, 0, 0, 1463, 1461, 1, 0, 0, 0, 1464, 1466,
		5, 52, 0, 0, 1465, 1464, 1, 0, 0, 0, 1465, 1466, 1, 0, 0, 0, 1466, 1468,
		1, 0, 0, 0, 1467, 1469, 5, 51, 0, 0, 1468, 1467, 1, 0, 0, 0, 1468, 1469,
		1, 0, 0, 0, 1469, 1471, 1, 0, 0, 0, 1470, 1447, 1, 0, 0, 0, 1470, 1471,
		1, 0, 0, 0, 1471, 1496, 1, 0, 0, 0, 1472, 1474, 5, 50, 0, 0, 1473, 1472,
		1, 0, 0, 0, 1474, 1475, 1, 0, 0, 0, 1475, 1473, 1, 0, 0, 0, 1475, 1476,
		1, 0, 0, 0, 1476, 1477, 1, 0, 0, 0, 1477, 1479, 5, 24, 0, 0, 1478, 1480,
		5, 50, 0, 0, 1479, 1478, 1, 0, 0, 0, 1480, 1481, 1, 0, 0, 0, 1481, 1479,
		1, 0, 0, 0, 1481, 1482, 1, 0, 0, 0, 1482, 1483, 1, 0, 0, 0, 1483, 1487,
		3, 78, 39, 0, 1484, 1486, 5, 50, 0, 0, 1485, 1484, 1, 0, 0, 0, 1486, 1489,
		1, 0, 0, 0, 1487, 1485, 1, 0, 0, 0, 1487, 1488, 1, 0, 0, 0, 1488, 1491,
		1, 0, 0, 0, 1489, 1487, 1, 0, 0, 0, 1490, 1492, 5, 52, 0, 0, 1491, 1490,
		1, 0, 0, 0, 1491, 1492, 1, 0, 0, 0, 1492, 1494, 1, 0, 0, 0, 1493, 1495,
		5, 51, 0, 0, 1494, 1493, 1, 0, 0, 0, 1494, 1495, 1, 0, 0, 0, 1495, 1497,
		1, 0, 0, 0, 1496, 1473, 1, 0, 0, 0, 1496, 1497, 1, 0, 0, 0, 1497, 1499,
		1, 0, 0, 0, 1498, 1500, 3, 116, 58, 0, 1499, 1498, 1, 0, 0, 0, 1499, 1500,
		1, 0, 0, 0, 1500, 1504, 1, 0, 0, 0, 1501, 1503, 5, 50, 0, 0, 1502, 1501,
		1, 0, 0, 0, 1503, 1506, 1, 0, 0, 0, 1504, 1502, 1, 0, 0, 0, 1504, 1505,
		1, 0, 0, 0, 1505, 1508, 1, 0, 0, 0, 1506, 1504, 1, 0, 0, 0, 1507, 1509,
		5, 52, 0, 0, 1508, 1507, 1, 0, 0, 0, 1508, 1509, 1, 0, 0, 0, 1509, 1511,
		1, 0, 0, 0, 1510, 1512, 5, 51, 0, 0, 1511, 1510, 1, 0, 0, 0, 1511, 1512,
		1, 0, 0, 0, 1512, 1516, 1, 0, 0, 0, 1513, 1515, 5, 50, 0, 0, 1514, 1513,
		1, 0, 0, 0, 1515, 1518, 1, 0, 0, 0, 1516, 1514, 1, 0, 0, 0, 1516, 1517,
		1, 0, 0, 0, 1517, 1520, 1, 0, 0, 0, 1518, 1516, 1, 0, 0, 0, 1519, 1521,
		5, 52, 0, 0, 1520, 1519, 1, 0, 0, 0, 1520, 1521, 1, 0, 0, 0, 1521, 1522,
		1, 0, 0, 0, 1522, 1523, 3, 130, 65, 0, 1523, 77, 1, 0, 0, 0, 1524, 1527,
		3, 126, 63, 0, 1525, 1527, 3, 122, 61, 0, 1526, 1524, 1, 0, 0, 0, 1526,
		1525, 1, 0, 0, 0, 1527, 79, 1, 0, 0, 0, 1528, 1531, 3, 126, 63, 0, 1529,
		1531, 3, 122, 61, 0, 1530, 1528, 1, 0, 0, 0, 1530, 1529, 1, 0, 0, 0, 1531,
		81, 1, 0, 0, 0, 1532, 1533, 3, 84, 42, 0, 1533, 1537, 3, 86, 43, 0, 1534,
		1536, 5, 50, 0, 0, 1535, 1534, 1, 0, 0, 0, 1536, 1539, 1, 0, 0, 0, 1537,
		1535, 1, 0, 0, 0, 1537, 1538, 1, 0, 0, 0, 1538, 1540, 1, 0, 0, 0, 1539,
		1537, 1, 0, 0, 0, 1540, 1541, 7, 0, 0, 0, 1541, 1543, 1, 0, 0, 0, 1542,
		1532, 1, 0, 0, 0, 1543, 1544, 1, 0, 0, 0, 1544, 1542, 1, 0, 0, 0, 1544,
		1545, 1, 0, 0, 0, 1545, 83, 1, 0, 0, 0, 1546, 1547, 5, 47, 0, 0, 1547,
		1548, 3, 120, 60, 0, 1548, 85, 1, 0, 0, 0, 1549, 1553, 3, 128, 64, 0, 1550,
		1552, 5, 50, 0, 0, 1551, 1550, 1, 0, 0, 0, 1552, 1555, 1, 0, 0, 0, 1553,
		1551, 1, 0, 0, 0, 1553, 1554, 1, 0, 0, 0, 1554, 1557, 1, 0, 0, 0, 1555,
		1553, 1, 0, 0, 0, 1556, 1558, 5, 52, 0, 0, 1557, 1556, 1, 0, 0, 0, 1557,
		1558, 1, 0, 0, 0, 1558, 1560, 1, 0, 0, 0, 1559, 1561, 5, 51, 0, 0, 1560,
		1559, 1, 0, 0, 0, 1560, 1561, 1, 0, 0, 0, 1561, 1565, 1, 0, 0, 0, 1562,
		1564, 5, 50, 0, 0, 1563, 1562, 1, 0, 0, 0, 1564, 1567, 1, 0, 0, 0, 1565,
		1563, 1, 0, 0, 0, 1565, 1566, 1, 0, 0, 0, 1566, 1568, 1, 0, 0, 0, 1567,
		1565, 1, 0, 0, 0, 1568, 1572, 3, 92, 46, 0, 1569, 1571, 5, 50, 0, 0, 1570,
		1569, 1, 0, 0, 0, 1571, 1574, 1, 0, 0, 0, 1572, 1570, 1, 0, 0, 0, 1572,
		1573, 1, 0, 0, 0, 1573, 1576, 1, 0, 0, 0, 1574, 1572, 1, 0, 0, 0, 1575,
		1577, 5, 52, 0, 0, 1576, 1575, 1, 0, 0, 0, 1576, 1577, 1, 0, 0, 0, 1577,
		1579, 1, 0, 0, 0, 1578, 1580, 5, 51, 0, 0, 1579, 1578, 1, 0, 0, 0, 1579,
		1580, 1, 0, 0, 0, 1580, 1605, 1, 0, 0, 0, 1581, 1583, 5, 50, 0, 0, 1582,
		1581, 1, 0, 0, 0, 1583, 1584, 1, 0, 0, 0, 1584, 1582, 1, 0, 0, 0, 1584,
		1585, 1, 0, 0, 0, 1585, 1586, 1, 0, 0, 0, 1586, 1588, 5, 1, 0, 0, 1587,
		1589, 5, 50, 0, 0, 1588, 1587, 1, 0, 0, 0, 1589, 1590, 1, 0, 0, 0, 1590,
		1588, 1, 0, 0, 0, 1590, 1591, 1, 0, 0, 0, 1591, 1592, 1, 0, 0, 0, 1592,
		1596, 3, 114, 57, 0, 1593, 1595, 5, 50, 0, 0, 1594, 1593, 1, 0, 0, 0, 1595,
		1598, 1, 0, 0, 0, 1596, 1594, 1, 0, 0, 0, 1596, 1597, 1, 0, 0, 0, 1597,
		1600, 1, 0, 0, 0, 1598, 1596, 1, 0, 0, 0, 1599, 1601, 5, 52, 0, 0, 1600,
		1599, 1, 0, 0, 0, 1600, 1601, 1, 0, 0, 0, 1601, 1603, 1, 0, 0, 0, 1602,
		1604, 5, 51, 0, 0, 1603, 1602, 1, 0, 0, 0, 1603, 1604, 1, 0, 0, 0, 1604,
		1606, 1, 0, 0, 0, 1605, 1582, 1, 0, 0, 0, 1605, 1606, 1, 0, 0, 0, 1606,
		1631, 1, 0, 0, 0, 1607, 1609, 5, 50, 0, 0, 1608, 1607, 1, 0, 0, 0, 1609,
		1610, 1, 0, 0, 0, 1610, 1608, 1, 0, 0, 0, 1610, 1611, 1, 0, 0, 0, 1611,
		1612, 1, 0, 0, 0, 1612, 1614, 5, 2, 0, 0, 1613, 1615, 5, 50, 0, 0, 1614,
		1613, 1, 0, 0, 0, 1615, 1616, 1, 0, 0, 0, 1616, 1614, 1, 0, 0, 0, 1616,
		1617, 1, 0, 0, 0, 1617, 1618, 1, 0, 0, 0, 1618, 1622, 3, 112, 56, 0, 1619,
		1621, 5, 50, 0, 0, 1620, 1619, 1, 0, 0, 0, 1621, 1624, 1, 0, 0, 0, 1622,
		1620, 1, 0, 0, 0, 1622, 1623, 1, 0, 0, 0, 1623, 1626, 1, 0, 0, 0, 1624,
		1622, 1, 0, 0, 0, 1625, 1627, 5, 52, 0, 0, 1626, 1625, 1, 0, 0, 0, 1626,
		1627, 1, 0, 0, 0, 1627, 1629, 1, 0, 0, 0, 1628, 1630, 5, 51, 0, 0, 1629,
		1628, 1, 0, 0, 0, 1629, 1630, 1, 0, 0, 0, 1630, 1632, 1, 0, 0, 0, 1631,
		1608, 1, 0, 0, 0, 1631, 1632, 1, 0, 0, 0, 1632, 1651, 1, 0, 0, 0, 1633,
		1635, 5, 50, 0, 0, 1634, 1633, 1, 0, 0, 0, 1635, 1636, 1, 0, 0, 0, 1636,
		1634, 1, 0, 0, 0, 1636, 1637, 1, 0, 0, 0, 1637, 1638, 1, 0, 0, 0, 1638,
		1642, 3, 104, 52, 0, 1639, 1641, 5, 50, 0, 0, 1640, 1639, 1, 0, 0, 0, 1641,
		1644, 1, 0, 0, 0, 1642, 1640, 1, 0, 0, 0, 1642, 1643, 1, 0, 0, 0, 1643,
		1646, 1, 0, 0, 0, 1644, 1642, 1, 0, 0, 0, 1645, 1647, 5, 52, 0, 0, 1646,
		1645, 1, 0, 0, 0, 1646, 1647, 1, 0, 0, 0, 1647, 1649, 1, 0, 0, 0, 1648,
		1650, 5, 51, 0, 0, 1649, 1648, 1, 0, 0, 0, 1649, 1650, 1, 0, 0, 0, 1650,
		1652, 1, 0, 0, 0, 1651, 1634, 1, 0, 0, 0, 1651, 1652, 1, 0, 0, 0, 1652,
		1654, 1, 0, 0, 0, 1653, 1655, 5, 50, 0, 0, 1654, 1653, 1, 0, 0, 0, 1655,
		1656, 1, 0, 0, 0, 1656, 1654, 1, 0, 0, 0, 1656, 1657, 1, 0, 0, 0, 1657,
		1658, 1, 0, 0, 0, 1658, 1660, 5, 25, 0, 0, 1659, 1661, 5, 50, 0, 0, 1660,
		1659, 1, 0, 0, 0, 1661, 1662, 1, 0, 0, 0, 1662, 1660, 1, 0, 0, 0, 1662,
		1663, 1, 0, 0, 0, 1663, 1664, 1, 0, 0, 0, 1664, 1668, 3, 94, 47, 0, 1665,
		1667, 5, 50, 0, 0, 1666, 1665, 1, 0, 0, 0, 1667, 1670, 1, 0, 0, 0, 1668,
		1666, 1, 0, 0, 0, 1668, 1669, 1, 0, 0, 0, 1669, 1672, 1, 0, 0, 0, 1670,
		1668, 1, 0, 0, 0, 1671, 1673, 5, 52, 0, 0, 1672, 1671, 1, 0, 0, 0, 1672,
		1673, 1, 0, 0, 0, 1673, 1675, 1, 0, 0, 0, 1674, 1676, 5, 51, 0, 0, 1675,
		1674, 1, 0, 0, 0, 1675, 1676, 1, 0, 0, 0, 1676, 1701, 1, 0, 0, 0, 1677,
		1679, 5, 50, 0, 0, 1678, 1677, 1, 0, 0, 0, 1679, 1680, 1, 0, 0, 0, 1680,
		1678, 1, 0, 0, 0, 1680, 1681, 1, 0, 0, 0, 1681, 1682, 1, 0, 0, 0, 1682,
		1684, 5, 3, 0, 0, 1683, 1685, 5, 50, 0, 0, 1684, 1683, 1, 0, 0, 0, 1685,
		1686, 1, 0, 0, 0, 1686, 1684, 1, 0, 0, 0, 1686, 1687, 1, 0, 0, 0, 1687,
		1688, 1, 0, 0, 0, 1688, 1692, 3, 90, 45, 0, 1689, 1691, 5, 50, 0, 0, 1690,
		1689, 1, 0, 0, 0, 1691, 1694, 1, 0, 0, 0, 1692, 1690, 1, 0, 0, 0, 1692,
		1693, 1, 0, 0, 0, 1693, 1696, 1, 0, 0, 0, 1694, 1692, 1, 0, 0, 0, 1695,
		1697, 5, 52, 0, 0, 1696, 1695, 1, 0, 0, 0, 1696, 1697, 1, 0, 0, 0, 1697,
		1699, 1, 0, 0, 0, 1698, 1700, 5, 51, 0, 0, 1699, 1698, 1, 0, 0, 0, 1699,
		1700, 1, 0, 0, 0, 1700, 1702, 1, 0, 0, 0, 1701, 1678, 1, 0, 0, 0, 1701,
		1702, 1, 0, 0, 0, 1702, 1704, 1, 0, 0, 0, 1703, 1705, 3, 116, 58, 0, 1704,
		1703, 1, 0, 0, 0, 1704, 1705, 1, 0, 0, 0, 1705, 1709, 1, 0, 0, 0, 1706,
		1708, 5, 50, 0, 0, 1707, 1706, 1, 0, 0, 0, 1708, 1711, 1, 0, 0, 0, 1709,
		1707, 1, 0, 0, 0, 1709, 1710, 1, 0, 0, 0, 1710, 1713, 1, 0, 0, 0, 1711,
		1709, 1, 0, 0, 0, 1712, 1714, 5, 52, 0, 0, 1713, 1712, 1, 0, 0, 0, 1713,
		1714, 1, 0, 0, 0, 1714, 1716, 1, 0, 0, 0, 1715, 1717, 5, 51, 0, 0, 1716,
		1715, 1, 0, 0, 0, 1716, 1717, 1, 0, 0, 0, 1717, 1721, 1, 0, 0, 0, 1718,
		1720, 5, 50, 0, 0, 1719, 1718, 1, 0, 0, 0, 1720, 1723, 1, 0, 0, 0, 1721,
		1719, 1, 0, 0, 0, 1721, 1722, 1, 0, 0, 0, 1722, 1725, 1, 0, 0, 0, 1723,
		1721, 1, 0, 0, 0, 1724, 1726, 5, 52, 0, 0, 1725, 1724, 1, 0, 0, 0, 1725,
		1726, 1, 0, 0, 0, 1726, 1727, 1, 0, 0, 0, 1727, 1729, 3, 130, 65, 0, 1728,
		1730, 5, 52, 0, 0, 1729, 1728, 1, 0, 0, 0, 1729, 1730, 1, 0, 0, 0, 1730,
		87, 1, 0, 0, 0, 1731, 1735, 3, 128, 64, 0, 1732, 1734, 5, 50, 0, 0, 1733,
		1732, 1, 0, 0, 0, 1734, 1737, 1, 0, 0, 0, 1735, 1733, 1, 0, 0, 0, 1735,
		1736, 1, 0, 0, 0, 1736, 1739, 1, 0, 0, 0, 1737, 1735, 1, 0, 0, 0, 1738,
		1740, 5, 52, 0, 0, 1739, 1738, 1, 0, 0, 0, 1739, 1740, 1, 0, 0, 0, 1740,
		1742, 1, 0, 0, 0, 1741, 1743, 5, 51, 0, 0, 1742, 1741, 1, 0, 0, 0, 1742,
		1743, 1, 0, 0, 0, 1743, 1747, 1, 0, 0, 0, 1744, 1746, 5, 50, 0, 0, 1745,
		1744, 1, 0, 0, 0, 1746, 1749, 1, 0, 0, 0, 1747, 1745, 1, 0, 0, 0, 1747,
		1748, 1, 0, 0, 0, 1748, 1751, 1, 0, 0, 0, 1749, 1747, 1, 0, 0, 0, 1750,
		1752, 5, 52, 0, 0, 1751, 1750, 1, 0, 0, 0, 1751, 1752, 1, 0, 0, 0, 1752,
		1753, 1, 0, 0, 0, 1753, 1757, 3, 92, 46, 0, 1754, 1756, 5, 50, 0, 0, 1755,
		1754, 1, 0, 0, 0, 1756, 1759, 1, 0, 0, 0, 1757, 1755, 1, 0, 0, 0, 1757,
		1758, 1, 0, 0, 0, 1758, 1761, 1, 0, 0, 0, 1759, 1757, 1, 0, 0, 0, 1760,
		1762, 5, 52, 0, 0, 1761, 1760, 1, 0, 0, 0, 1761, 1762, 1, 0, 0, 0, 1762,
		1764, 1, 0, 0, 0, 1763, 1765, 5, 51, 0, 0, 1764, 1763, 1, 0, 0, 0, 1764,
		1765, 1, 0, 0, 0, 1765, 1774, 1, 0, 0, 0, 1766, 1768, 5, 50, 0, 0, 1767,
		1766, 1, 0, 0, 0, 1768, 1769, 1, 0, 0, 0, 1769, 1767, 1, 0, 0, 0, 1769,
		1770, 1, 0, 0, 0, 1770, 1771, 1, 0, 0, 0, 1771, 1773, 3, 92, 46, 0, 1772,
		1767, 1, 0, 0, 0, 1773, 1776, 1, 0, 0, 0, 1774, 1772, 1, 0, 0, 0, 1774,
		1775, 1, 0, 0, 0, 1775, 1780, 1, 0, 0, 0, 1776, 1774, 1, 0, 0, 0, 1777,
		1779, 5, 50, 0, 0, 1778, 1777, 1, 0, 0, 0, 1779, 1782, 1, 0, 0, 0, 1780,
		1778, 1, 0, 0, 0, 1780, 1781, 1, 0, 0, 0, 1781, 1784, 1, 0, 0, 0, 1782,
		1780, 1, 0, 0, 0, 1783, 1785, 5, 52, 0, 0, 1784, 1783, 1, 0, 0, 0, 1784,
		1785, 1, 0, 0, 0, 1785, 1787, 1, 0, 0, 0, 1786, 1788, 5, 51, 0, 0, 1787,
		1786, 1, 0, 0, 0, 1787, 1788, 1, 0, 0, 0, 1788, 1792, 1, 0, 0, 0, 1789,
		1791, 5, 50, 0, 0, 1790, 1789, 1, 0, 0, 0, 1791, 1794, 1, 0, 0, 0, 1792,
		1790, 1, 0, 0, 0, 1792, 1793, 1, 0, 0, 0, 1793, 1795, 1, 0, 0, 0, 1794,
		1792, 1, 0, 0, 0, 1795, 1799, 3, 130, 65, 0, 1796, 1798, 5, 50, 0, 0, 1797,
		1796, 1, 0, 0, 0, 1798, 1801, 1, 0, 0, 0, 1799, 1797, 1, 0, 0, 0, 1799,
		1800, 1, 0, 0, 0, 1800, 1803, 1, 0, 0, 0, 1801, 1799, 1, 0, 0, 0, 1802,
		1804, 5, 52, 0, 0, 1803, 1802, 1, 0, 0, 0, 1803, 1804, 1, 0, 0, 0, 1804,
		89, 1, 0, 0, 0, 1805, 1808, 3, 92, 46, 0, 1806, 1808, 3, 88, 44, 0, 1807,
		1805, 1, 0, 0, 0, 1807, 1806, 1, 0, 0, 0, 1808, 91, 1, 0, 0, 0, 1809, 1810,
		3, 140, 70, 0, 1810, 93, 1, 0, 0, 0, 1811, 1812, 3, 126, 63, 0, 1812, 95,
		1, 0, 0, 0, 1813, 1814, 3, 98, 49, 0, 1814, 1818, 3, 100, 50, 0, 1815,
		1817, 5, 50, 0, 0, 1816, 1815, 1, 0, 0, 0, 1817, 1820, 1, 0, 0, 0, 1818,
		1816, 1, 0, 0, 0, 1818, 1819, 1, 0, 0, 0, 1819, 1821, 1, 0, 0, 0, 1820,
		1818, 1, 0, 0, 0, 1821, 1822, 7, 0, 0, 0, 1822, 1824, 1, 0, 0, 0, 1823,
		1813, 1, 0, 0, 0, 1824, 1825, 1, 0, 0, 0, 1825, 1823, 1, 0, 0, 0, 1825,
		1826, 1, 0, 0, 0, 1826, 97, 1, 0, 0, 0, 1827, 1828, 5, 41, 0, 0, 1828,
		1829, 3, 120, 60, 0, 1829, 99, 1, 0, 0, 0, 1830, 1834, 3, 128, 64, 0, 1831,
		1833, 5, 50, 0, 0, 1832, 1831, 1, 0, 0, 0, 1833, 1836, 1, 0, 0, 0, 1834,
		1832, 1, 0, 0, 0, 1834, 1835, 1, 0, 0, 0, 1835, 1838, 1, 0, 0, 0, 1836,
		1834, 1, 0, 0, 0, 1837, 1839, 5, 52, 0, 0, 1838, 1837, 1, 0, 0, 0, 1838,
		1839, 1, 0, 0, 0, 1839, 1841, 1, 0, 0, 0, 1840, 1842, 5, 51, 0, 0, 1841,
		1840, 1, 0, 0, 0, 1841, 1842, 1, 0, 0, 0, 1842, 1846, 1, 0, 0, 0, 1843,
		1845, 5, 50, 0, 0, 1844, 1843, 1, 0, 0, 0, 1845, 1848, 1, 0, 0, 0, 1846,
		1844, 1, 0, 0, 0, 1846, 1847, 1, 0, 0, 0, 1847, 1849, 1, 0, 0, 0, 1848,
		1846, 1, 0, 0, 0, 1849, 1853, 3, 132, 66, 0, 1850, 1852, 5, 50, 0, 0, 1851,
		1850, 1, 0, 0, 0, 1852, 1855, 1, 0, 0, 0, 1853, 1851, 1, 0, 0, 0, 1853,
		1854, 1, 0, 0, 0, 1854, 1857, 1, 0, 0, 0, 1855, 1853, 1, 0, 0, 0, 1856,
		1858, 5, 52, 0, 0, 1857, 1856, 1, 0, 0, 0, 1857, 1858, 1, 0, 0, 0, 1858,
		1860, 1, 0, 0, 0, 1859, 1861, 5, 51, 0, 0, 1860, 1859, 1, 0, 0, 0, 1860,
		1861, 1, 0, 0, 0, 1861, 1886, 1, 0, 0, 0, 1862, 1864, 5, 50, 0, 0, 1863,
		1862, 1, 0, 0, 0, 1864, 1865, 1, 0, 0, 0, 1865, 1863, 1, 0, 0, 0, 1865,
		1866, 1, 0, 0, 0, 1866, 1867, 1, 0, 0, 0, 1867, 1869, 5, 1, 0, 0, 1868,
		1870, 5, 50, 0, 0, 1869, 1868, 1, 0, 0, 0, 1870, 1871, 1, 0, 0, 0, 1871,
		1869, 1, 0, 0, 0, 1871, 1872, 1, 0, 0, 0, 1872, 1873, 1, 0, 0, 0, 1873,
		1877, 3, 114, 57, 0, 1874, 1876, 5, 50, 0, 0, 1875, 1874, 1, 0, 0, 0, 1876,
		1879, 1, 0, 0, 0, 1877, 1875, 1, 0, 0, 0, 1877, 1878, 1, 0, 0, 0, 1878,
		1881, 1, 0, 0, 0, 1879, 1877, 1, 0, 0, 0, 1880, 1882, 5, 52, 0, 0, 1881,
		1880, 1, 0, 0, 0, 1881, 1882, 1, 0, 0, 0, 1882, 1884, 1, 0, 0, 0, 1883,
		1885, 5, 51, 0, 0, 1884, 1883, 1, 0, 0, 0, 1884, 1885, 1, 0, 0, 0, 1885,
		1887, 1, 0, 0, 0, 1886, 1863, 1, 0, 0, 0, 1886, 1887, 1, 0, 0, 0, 1887,
		1912, 1, 0, 0, 0, 1888, 1890, 5, 50, 0, 0, 1889, 1888, 1, 0, 0, 0, 1890,
		1891, 1, 0, 0, 0, 1891, 1889, 1, 0, 0, 0, 1891, 1892, 1, 0, 0, 0, 1892,
		1893, 1, 0, 0, 0, 1893, 1895, 5, 2, 0, 0, 1894, 1896, 5, 50, 0, 0, 1895,
		1894, 1, 0, 0, 0, 1896, 1897, 1, 0, 0, 0, 1897, 1895, 1, 0, 0, 0, 1897,
		1898, 1, 0, 0, 0, 1898, 1899, 1, 0, 0, 0, 1899, 1903, 3, 112, 56, 0, 1900,
		1902, 5, 50, 0, 0, 1901, 1900, 1, 0, 0, 0, 1902, 1905, 1, 0, 0, 0, 1903,
		1901, 1, 0, 0, 0, 1903, 1904, 1, 0, 0, 0, 1904, 1907, 1, 0, 0, 0, 1905,
		1903, 1, 0, 0, 0, 1906, 1908, 5, 52, 0, 0, 1907, 1906, 1, 0, 0, 0, 1907,
		1908, 1, 0, 0, 0, 1908, 1910, 1, 0, 0, 0, 1909, 1911, 5, 51, 0, 0, 1910,
		1909, 1, 0, 0, 0, 1910, 1911, 1, 0, 0, 0, 1911, 1913, 1, 0, 0, 0, 1912,
		1889, 1, 0, 0, 0, 1912, 1913, 1, 0, 0, 0, 1913, 1932, 1, 0, 0, 0, 1914,
		1916, 5, 50, 0, 0, 1915, 1914, 1, 0, 0, 0, 1916, 1917, 1, 0, 0, 0, 1917,
		1915, 1, 0, 0, 0, 1917, 1918, 1, 0, 0, 0, 1918, 1919, 1, 0, 0, 0, 1919,
		1923, 3, 104, 52, 0, 1920, 1922, 5, 50, 0, 0, 1921, 1920, 1, 0, 0, 0, 1922,
		1925, 1, 0, 0, 0, 1923, 1921, 1, 0, 0, 0, 1923, 1924, 1, 0, 0, 0, 1924,
		1927, 1, 0, 0, 0, 1925, 1923, 1, 0, 0, 0, 1926, 1928, 5, 52, 0, 0, 1927,
		1926, 1, 0, 0, 0, 1927, 1928, 1, 0, 0, 0, 1928, 1930, 1, 0, 0, 0, 1929,
		1931, 5, 51, 0, 0, 1930, 1929, 1, 0, 0, 0, 1930, 1931, 1, 0, 0, 0, 1931,
		1933, 1, 0, 0, 0, 1932, 1915, 1, 0, 0, 0, 1932, 1933, 1, 0, 0, 0, 1933,
		1935, 1, 0, 0, 0, 1934, 1936, 5, 50, 0, 0, 1935, 1934, 1, 0, 0, 0, 1936,
		1937, 1, 0, 0, 0, 1937, 1935, 1, 0, 0, 0, 1937, 1938, 1, 0, 0, 0, 1938,
		1939, 1, 0, 0, 0, 1939, 1941, 5, 26, 0, 0, 1940, 1942, 5, 50, 0, 0, 1941,
		1940, 1, 0, 0, 0, 1942, 1943, 1, 0, 0, 0, 1943, 1941, 1, 0, 0, 0, 1943,
		1944, 1, 0, 0, 0, 1944, 1945, 1, 0, 0, 0, 1945, 1949, 3, 102, 51, 0, 1946,
		1948, 5, 50, 0, 0, 1947, 1946, 1, 0, 0, 0, 1948, 1951, 1, 0, 0, 0, 1949,
		1947, 1, 0, 0, 0, 1949, 1950, 1, 0, 0, 0, 1950, 1953, 1, 0, 0, 0, 1951,
		1949, 1, 0, 0, 0, 1952, 1954, 5, 52, 0, 0, 1953, 1952, 1, 0, 0, 0, 1953,
		1954, 1, 0, 0, 0, 1954, 1956, 1, 0, 0, 0, 1955, 1957, 5, 51, 0, 0, 1956,
		1955, 1, 0, 0, 0, 1956, 1957, 1, 0, 0, 0, 1957, 1959, 1, 0, 0, 0, 1958,
		1960, 5, 50, 0, 0, 1959, 1958, 1, 0, 0, 0, 1960, 1961, 1, 0, 0, 0, 1961,
		1959, 1, 0, 0, 0, 1961, 1962, 1, 0, 0, 0, 1962, 1963, 1, 0, 0, 0, 1963,
		1965, 5, 4, 0, 0, 1964, 1966, 5, 50, 0, 0, 1965, 1964, 1, 0, 0, 0, 1966,
		1967, 1, 0, 0, 0, 1967, 1965, 1, 0, 0, 0, 1967, 1968, 1, 0, 0, 0, 1968,
		1969, 1, 0, 0, 0, 1969, 1973, 3, 108, 54, 0, 1970, 1972, 5, 50, 0, 0, 1971,
		1970, 1, 0, 0, 0, 1972, 1975, 1, 0, 0, 0, 1973, 1971, 1, 0, 0, 0, 1973,
		1974, 1, 0, 0, 0, 1974, 1977, 1, 0, 0, 0, 1975, 1973, 1, 0, 0, 0, 1976,
		1978, 5, 52, 0, 0, 1977, 1976, 1, 0, 0, 0, 1977, 1978, 1, 0, 0, 0, 1978,
		1980, 1, 0, 0, 0, 1979, 1981, 5, 51, 0, 0, 1980, 1979, 1, 0, 0, 0, 1980,
		1981, 1, 0, 0, 0, 1981, 2006, 1, 0, 0, 0, 1982, 1984, 5, 50, 0, 0, 1983,
		1982, 1, 0, 0, 0, 1984, 1985, 1, 0, 0, 0, 1985, 1983, 1, 0, 0, 0, 1985,
		1986, 1, 0, 0, 0, 1986, 1987, 1, 0, 0, 0, 1987, 1989, 5, 5, 0, 0, 1988,
		1990, 5, 50, 0, 0, 1989, 1988, 1, 0, 0, 0, 1990, 1991, 1, 0, 0, 0, 1991,
		1989, 1, 0, 0, 0, 1991, 1992, 1, 0, 0, 0, 1992, 1993, 1, 0, 0, 0, 1993,
		1997, 3, 110, 55, 0, 1994, 1996, 5, 50, 0, 0, 1995, 1994, 1, 0, 0, 0, 1996,
		1999, 1, 0, 0, 0, 1997, 1995, 1, 0, 0, 0, 1997, 1998, 1, 0, 0, 0, 1998,
		2001, 1, 0, 0, 0, 1999, 1997, 1, 0, 0, 0, 2000, 2002, 5, 52, 0, 0, 2001,
		2000, 1, 0, 0, 0, 2001, 2002, 1, 0, 0, 0, 2002, 2004, 1, 0, 0, 0, 2003,
		2005, 5, 51, 0, 0, 2004, 2003, 1, 0, 0, 0, 2004, 2005, 1, 0, 0, 0, 2005,
		2007, 1, 0, 0, 0, 2006, 1983, 1, 0, 0, 0, 2006, 2007, 1, 0, 0, 0, 2007,
		2009, 1, 0, 0, 0, 2008, 2010, 3, 116, 58, 0, 2009, 2008, 1, 0, 0, 0, 2009,
		2010, 1, 0, 0, 0, 2010, 2014, 1, 0, 0, 0, 2011, 2013, 5, 50, 0, 0, 2012,
		2011, 1, 0, 0, 0, 2013, 2016, 1, 0, 0, 0, 2014, 2012, 1, 0, 0, 0, 2014,
		2015, 1, 0, 0, 0, 2015, 2018, 1, 0, 0, 0, 2016, 2014, 1, 0, 0, 0, 2017,
		2019, 5, 52, 0, 0, 2018, 2017, 1, 0, 0, 0, 2018, 2019, 1, 0, 0, 0, 2019,
		2021, 1, 0, 0, 0, 2020, 2022, 5, 51, 0, 0, 2021, 2020, 1, 0, 0, 0, 2021,
		2022, 1, 0, 0, 0, 2022, 2026, 1, 0, 0, 0, 2023, 2025, 5, 50, 0, 0, 2024,
		2023, 1, 0, 0, 0, 2025, 2028, 1, 0, 0, 0, 2026, 2024, 1, 0, 0, 0, 2026,
		2027, 1, 0, 0, 0, 2027, 2030, 1, 0, 0, 0, 2028, 2026, 1, 0, 0, 0, 2029,
		2031, 5, 52, 0, 0, 2030, 2029, 1, 0, 0, 0, 2030, 2031, 1, 0, 0, 0, 2031,
		2032, 1, 0, 0, 0, 2032, 2034, 3, 130, 65, 0, 2033, 2035, 5, 52, 0, 0, 2034,
		2033, 1, 0, 0, 0, 2034, 2035, 1, 0, 0, 0, 2035, 101, 1, 0, 0, 0, 2036,
		2037, 3, 126, 63, 0, 2037, 103, 1, 0, 0, 0, 2038, 2039, 5, 27, 0, 0, 2039,
		105, 1, 0, 0, 0, 2040, 2041, 3, 136, 68, 0, 2041, 107, 1, 0, 0, 0, 2042,
		2045, 3, 126, 63, 0, 2043, 2045, 3, 122, 61, 0, 2044, 2042, 1, 0, 0, 0,
		2044, 2043, 1, 0, 0, 0, 2045, 109, 1, 0, 0, 0, 2046, 2049, 3, 126, 63,
		0, 2047, 2049, 3, 122, 61, 0, 2048, 2046, 1, 0, 0, 0, 2048, 2047, 1, 0,
		0, 0, 2049, 111, 1, 0, 0, 0, 2050, 2051, 7, 1, 0, 0, 2051, 113, 1, 0, 0,
		0, 2052, 2128, 5, 37, 0, 0, 2053, 2057, 3, 128, 64, 0, 2054, 2056, 5, 50,
		0, 0, 2055, 2054, 1, 0, 0, 0, 2056, 2059, 1, 0, 0, 0, 2057, 2055, 1, 0,
		0, 0, 2057, 2058, 1, 0, 0, 0, 2058, 2061, 1, 0, 0, 0, 2059, 2057, 1, 0,
		0, 0, 2060, 2062, 5, 52, 0, 0, 2061, 2060, 1, 0, 0, 0, 2061, 2062, 1, 0,
		0, 0, 2062, 2064, 1, 0, 0, 0, 2063, 2065, 5, 51, 0, 0, 2064, 2063, 1, 0,
		0, 0, 2064, 2065, 1, 0, 0, 0, 2065, 2069, 1, 0, 0, 0, 2066, 2068, 5, 50,
		0, 0, 2067, 2066, 1, 0, 0, 0, 2068, 2071, 1, 0, 0, 0, 2069, 2067, 1, 0,
		0, 0, 2069, 2070, 1, 0, 0, 0, 2070, 2073, 1, 0, 0, 0, 2071, 2069, 1, 0,
		0, 0, 2072, 2074, 5, 52, 0, 0, 2073, 2072, 1, 0, 0, 0, 2073, 2074, 1, 0,
		0, 0, 2074, 2075, 1, 0, 0, 0, 2075, 2079, 5, 37, 0, 0, 2076, 2078, 5, 50,
		0, 0, 2077, 2076, 1, 0, 0, 0, 2078, 2081, 1, 0, 0, 0, 2079, 2077, 1, 0,
		0, 0, 2079, 2080, 1, 0, 0, 0, 2080, 2083, 1, 0, 0, 0, 2081, 2079, 1, 0,
		0, 0, 2082, 2084, 5, 52, 0, 0, 2083, 2082, 1, 0, 0, 0, 2083, 2084, 1, 0,
		0, 0, 2084, 2086, 1, 0, 0, 0, 2085, 2087, 5, 51, 0, 0, 2086, 2085, 1, 0,
		0, 0, 2086, 2087, 1, 0, 0, 0, 2087, 2096, 1, 0, 0, 0, 2088, 2090, 5, 50,
		0, 0, 2089, 2088, 1, 0, 0, 0, 2090, 2091, 1, 0, 0, 0, 2091, 2089, 1, 0,
		0, 0, 2091, 2092, 1, 0, 0, 0, 2092, 2093, 1, 0, 0, 0, 2093, 2095, 5, 37,
		0, 0, 2094, 2089, 1, 0, 0, 0, 2095, 2098, 1, 0, 0, 0, 2096, 2094, 1, 0,
		0, 0, 2096, 2097, 1, 0, 0, 0, 2097, 2102, 1, 0, 0, 0, 2098, 2096, 1, 0,
		0, 0, 2099, 2101, 5, 50, 0, 0, 2100, 2099, 1, 0, 0, 0, 2101, 2104, 1, 0,
		0, 0, 2102, 2100, 1, 0, 0, 0, 2102, 2103, 1, 0, 0, 0, 2103, 2106, 1, 0,
		0, 0, 2104, 2102, 1, 0, 0, 0, 2105, 2107, 5, 52, 0, 0, 2106, 2105, 1, 0,
		0, 0, 2106, 2107, 1, 0, 0, 0, 2107, 2109, 1, 0, 0, 0, 2108, 2110, 5, 51,
		0, 0, 2109, 2108, 1, 0, 0, 0, 2109, 2110, 1, 0, 0, 0, 2110, 2114, 1, 0,
		0, 0, 2111, 2113, 5, 50, 0, 0, 2112, 2111, 1, 0, 0, 0, 2113, 2116, 1, 0,
		0, 0, 2114, 2112, 1, 0, 0, 0, 2114, 2115, 1, 0, 0, 0, 2115, 2117, 1, 0,
		0, 0, 2116, 2114, 1, 0, 0, 0, 2117, 2121, 3, 130, 65, 0, 2118, 2120, 5,
		50, 0, 0, 2119, 2118, 1, 0, 0, 0, 2120, 2123, 1, 0, 0, 0, 2121, 2119, 1,
		0, 0, 0, 2121, 2122, 1, 0, 0, 0, 2122, 2125, 1, 0, 0, 0, 2123, 2121, 1,
		0, 0, 0, 2124, 2126, 5, 52, 0, 0, 2125, 2124, 1, 0, 0, 0, 2125, 2126, 1,
		0, 0, 0, 2126, 2128, 1, 0, 0, 0, 2127, 2052, 1, 0, 0, 0, 2127, 2053, 1,
		0, 0, 0, 2128, 115, 1, 0, 0, 0, 2129, 2131, 3, 118, 59, 0, 2130, 2129,
		1, 0, 0, 0, 2131, 2132, 1, 0, 0, 0, 2132, 2130, 1, 0, 0, 0, 2132, 2133,
		1, 0, 0, 0, 2133, 117, 1, 0, 0, 0, 2134, 2136, 5, 51, 0, 0, 2135, 2134,
		1, 0, 0, 0, 2135, 2136, 1, 0, 0, 0, 2136, 2137, 1, 0, 0, 0, 2137, 2213,
		5, 36, 0, 0, 2138, 2214, 3, 146, 73, 0, 2139, 2143, 3, 128, 64, 0, 2140,
		2142, 5, 50, 0, 0, 2141, 2140, 1, 0, 0, 0, 2142, 2145, 1, 0, 0, 0, 2143,
		2141, 1, 0, 0, 0, 2143, 2144, 1, 0, 0, 0, 2144, 2147, 1, 0, 0, 0, 2145,
		2143, 1, 0, 0, 0, 2146, 2148, 5, 52, 0, 0, 2147, 2146, 1, 0, 0, 0, 2147,
		2148, 1, 0, 0, 0, 2148, 2150, 1, 0, 0, 0, 2149, 2151, 5, 51, 0, 0, 2150,
		2149, 1, 0, 0, 0, 2150, 2151, 1, 0, 0, 0, 2151, 2155, 1, 0, 0, 0, 2152,
		2154, 5, 50, 0, 0, 2153, 2152, 1, 0, 0, 0, 2154, 2157, 1, 0, 0, 0, 2155,
		2153, 1, 0, 0, 0, 2155, 2156, 1, 0, 0, 0, 2156, 2159, 1, 0, 0, 0, 2157,
		2155, 1, 0, 0, 0, 2158, 2160, 5, 52, 0, 0, 2159, 2158, 1, 0, 0, 0, 2159,
		2160, 1, 0, 0, 0, 2160, 2161, 1, 0, 0, 0, 2161, 2165, 3, 146, 73, 0, 2162,
		2164, 5, 50, 0, 0, 2163, 2162, 1, 0, 0, 0, 2164, 2167, 1, 0, 0, 0, 2165,
		2163, 1, 0, 0, 0, 2165, 2166, 1, 0, 0, 0, 2166, 2169, 1, 0, 0, 0, 2167,
		2165, 1, 0, 0, 0, 2168, 2170, 5, 52, 0, 0, 2169, 2168, 1, 0, 0, 0, 2169,
		2170, 1, 0, 0, 0, 2170, 2172, 1, 0, 0, 0, 2171, 2173, 5, 51, 0, 0, 2172,
		2171, 1, 0, 0, 0, 2172, 2173, 1, 0, 0, 0, 2173, 2182, 1, 0, 0, 0, 2174,
		2176, 5, 50, 0, 0, 2175, 2174, 1, 0, 0, 0, 2176, 2177, 1, 0, 0, 0, 2177,
		2175, 1, 0, 0, 0, 2177, 2178, 1, 0, 0, 0, 2178, 2179, 1, 0, 0, 0, 2179,
		2181, 3, 146, 73, 0, 2180, 2175, 1, 0, 0, 0, 2181, 2184, 1, 0, 0, 0, 2182,
		2180, 1, 0, 0, 0, 2182, 2183, 1, 0, 0, 0, 2183, 2188, 1, 0, 0, 0, 2184,
		2182, 1, 0, 0, 0, 2185, 2187, 5, 50, 0, 0, 2186, 2185, 1, 0, 0, 0, 2187,
		2190, 1, 0, 0, 0, 2188, 2186, 1, 0, 0, 0, 2188, 2189, 1, 0, 0, 0, 2189,
		2192, 1, 0, 0, 0, 2190, 2188, 1, 0, 0, 0, 2191, 2193, 5, 52, 0, 0, 2192,
		2191, 1, 0, 0, 0, 2192, 2193, 1, 0, 0, 0, 2193, 2195, 1, 0, 0, 0, 2194,
		2196, 5, 51, 0, 0, 2195, 2194, 1, 0, 0, 0, 2195, 2196, 1, 0, 0, 0, 2196,
		2200, 1, 0, 0, 0, 2197, 2199, 5, 50, 0, 0, 2198, 2197, 1, 0, 0, 0, 2199,
		2202, 1, 0, 0, 0, 2200, 2198, 1, 0, 0, 0, 2200, 2201, 1, 0, 0, 0, 2201,
		2203, 1, 0, 0, 0, 2202, 2200, 1, 0, 0, 0, 2203, 2207, 3, 130, 65, 0, 2204,
		2206, 5, 50, 0, 0, 2205, 2204, 1, 0, 0, 0, 2206, 2209, 1, 0, 0, 0, 2207,
		2205, 1, 0, 0, 0, 2207, 2208, 1, 0, 0, 0, 2208, 2211, 1, 0, 0, 0, 2209,
		2207, 1, 0, 0, 0, 2210, 2212, 5, 52, 0, 0, 2211, 2210, 1, 0, 0, 0, 2211,
		2212, 1, 0, 0, 0, 2212, 2214, 1, 0, 0, 0, 2213, 2138, 1, 0, 0, 0, 2213,
		2139, 1, 0, 0, 0, 2214, 119, 1, 0, 0, 0, 2215, 2217, 5, 50, 0, 0, 2216,
		2215, 1, 0, 0, 0, 2217, 2220, 1, 0, 0, 0, 2218, 2216, 1, 0, 0, 0, 2218,
		2219, 1, 0, 0, 0, 2219, 2221, 1, 0, 0, 0, 2220, 2218, 1, 0, 0, 0, 2221,
		2225, 5, 28, 0, 0, 2222, 2224, 5, 50, 0, 0, 2223, 2222, 1, 0, 0, 0, 2224,
		2227, 1, 0, 0, 0, 2225, 2223, 1, 0, 0, 0, 2225, 2226, 1, 0, 0, 0, 2226,
		2242, 1, 0, 0, 0, 2227, 2225, 1, 0, 0, 0, 2228, 2230, 5, 50, 0, 0, 2229,
		2228, 1, 0, 0, 0, 2230, 2233, 1, 0, 0, 0, 2231, 2229, 1, 0, 0, 0, 2231,
		2232, 1, 0, 0, 0, 2232, 2234, 1, 0, 0, 0, 2233, 2231, 1, 0, 0, 0, 2234,
		2238, 5, 29, 0, 0, 2235, 2237, 5, 50, 0, 0, 2236, 2235, 1, 0, 0, 0, 2237,
		2240, 1, 0, 0, 0, 2238, 2236, 1, 0, 0, 0, 2238, 2239, 1, 0, 0, 0, 2239,
		2242, 1, 0, 0, 0, 2240, 2238, 1, 0, 0, 0, 2241, 2218, 1, 0, 0, 0, 2241,
		2231, 1, 0, 0, 0, 2242, 2249, 1, 0, 0, 0, 2243, 2245, 5, 50, 0, 0, 2244,
		2243, 1, 0, 0, 0, 2245, 2246, 1, 0, 0, 0, 2246, 2244, 1, 0, 0, 0, 2246,
		2247, 1, 0, 0, 0, 2247, 2249, 1, 0, 0, 0, 2248, 2241, 1, 0, 0, 0, 2248,
		2244, 1, 0, 0, 0, 2249, 121, 1, 0, 0, 0, 2250, 2254, 3, 128, 64, 0, 2251,
		2253, 5, 50, 0, 0, 2252, 2251, 1, 0, 0, 0, 2253, 2256, 1, 0, 0, 0, 2254,
		2252, 1, 0, 0, 0, 2254, 2255, 1, 0, 0, 0, 2255, 2258, 1, 0, 0, 0, 2256,
		2254, 1, 0, 0, 0, 2257, 2259, 5, 52, 0, 0, 2258, 2257, 1, 0, 0, 0, 2258,
		2259, 1, 0, 0, 0, 2259, 2261, 1, 0, 0, 0, 2260, 2262, 5, 51, 0, 0, 2261,
		2260, 1, 0, 0, 0, 2261, 2262, 1, 0, 0, 0, 2262, 2266, 1, 0, 0, 0, 2263,
		2265, 5, 50, 0, 0, 2264, 2263, 1, 0, 0, 0, 2265, 2268, 1, 0, 0, 0, 2266,
		2264, 1, 0, 0, 0, 2266, 2267, 1, 0, 0, 0, 2267, 2269, 1, 0, 0, 0, 2268,
		2266, 1, 0, 0, 0, 2269, 2273, 3, 126, 63, 0, 2270, 2272, 5, 50, 0, 0, 2271,
		2270, 1, 0, 0, 0, 2272, 2275, 1, 0, 0, 0, 2273, 2271, 1, 0, 0, 0, 2273,
		2274, 1, 0, 0, 0, 2274, 2277, 1, 0, 0, 0, 2275, 2273, 1, 0, 0, 0, 2276,
		2278, 5, 52, 0, 0, 2277, 2276, 1, 0, 0, 0, 2277, 2278, 1, 0, 0, 0, 2278,
		2280, 1, 0, 0, 0, 2279, 2281, 5, 51, 0, 0, 2280, 2279, 1, 0, 0, 0, 2280,
		2281, 1, 0, 0, 0, 2281, 2292, 1, 0, 0, 0, 2282, 2286, 5, 33, 0, 0, 2283,
		2285, 5, 50, 0, 0, 2284, 2283, 1, 0, 0, 0, 2285, 2288, 1, 0, 0, 0, 2286,
		2284, 1, 0, 0, 0, 2286, 2287, 1, 0, 0, 0, 2287, 2289, 1, 0, 0, 0, 2288,
		2286, 1, 0, 0, 0, 2289, 2291, 3, 126, 63, 0, 2290, 2282, 1, 0, 0, 0, 2291,
		2294, 1, 0, 0, 0, 2292, 2290, 1, 0, 0, 0, 2292, 2293, 1, 0, 0, 0, 2293,
		2298, 1, 0, 0, 0, 2294, 2292, 1, 0, 0, 0, 2295, 2297, 5, 50, 0, 0, 2296,
		2295, 1, 0, 0, 0, 2297, 2300, 1, 0, 0, 0, 2298, 2296, 1, 0, 0, 0, 2298,
		2299, 1, 0, 0, 0, 2299, 2302, 1, 0, 0, 0, 2300, 2298, 1, 0, 0, 0, 2301,
		2303, 5, 52, 0, 0, 2302, 2301, 1, 0, 0, 0, 2302, 2303, 1, 0, 0, 0, 2303,
		2305, 1, 0, 0, 0, 2304, 2306, 5, 51, 0, 0, 2305, 2304, 1, 0, 0, 0, 2305,
		2306, 1, 0, 0, 0, 2306, 2310, 1, 0, 0, 0, 2307, 2309, 5, 50, 0, 0, 2308,
		2307, 1, 0, 0, 0, 2309, 2312, 1, 0, 0, 0, 2310, 2308, 1, 0, 0, 0, 2310,
		2311, 1, 0, 0, 0, 2311, 2314, 1, 0, 0, 0, 2312, 2310, 1, 0, 0, 0, 2313,
		2315, 5, 52, 0, 0, 2314, 2313, 1, 0, 0, 0, 2314, 2315, 1, 0, 0, 0, 2315,
		2316, 1, 0, 0, 0, 2316, 2320, 3, 130, 65, 0, 2317, 2319, 5, 50, 0, 0, 2318,
		2317, 1, 0, 0, 0, 2319, 2322, 1, 0, 0, 0, 2320, 2318, 1, 0, 0, 0, 2320,
		2321, 1, 0, 0, 0, 2321, 2324, 1, 0, 0, 0, 2322, 2320, 1, 0, 0, 0, 2323,
		2325, 5, 52, 0, 0, 2324, 2323, 1, 0, 0, 0, 2324, 2325, 1, 0, 0, 0, 2325,
		123, 1, 0, 0, 0, 2326, 2328, 3, 126, 63, 0, 2327, 2329, 3, 142, 71, 0,
		2328, 2327, 1, 0, 0, 0, 2328, 2329, 1, 0, 0, 0, 2329, 125, 1, 0, 0, 0,
		2330, 2333, 3, 144, 72, 0, 2331, 2333, 3, 136, 68, 0, 2332, 2330, 1, 0,
		0, 0, 2332, 2331, 1, 0, 0, 0, 2333, 127, 1, 0, 0, 0, 2334, 2335, 5, 31,
		0, 0, 2335, 129, 1, 0, 0, 0, 2336, 2337, 5, 32, 0, 0, 2337, 131, 1, 0,
		0, 0, 2338, 2341, 3, 134, 67, 0, 2339, 2341, 3, 136, 68, 0, 2340, 2338,
		1, 0, 0, 0, 2340, 2339, 1, 0, 0, 0, 2341, 133, 1, 0, 0, 0, 2342, 2343,
		3, 144, 72, 0, 2343, 2344, 3, 138, 69, 0, 2344, 135, 1, 0, 0, 0, 2345,
		2346, 5, 35, 0, 0, 2346, 137, 1, 0, 0, 0, 2347, 2348, 5, 34, 0, 0, 2348,
		139, 1, 0, 0, 0, 2349, 2350, 5, 40, 0, 0, 2350, 141, 1, 0, 0, 0, 2351,
		2352, 5, 30, 0, 0, 2352, 2354, 3, 144, 72, 0, 2353, 2351, 1, 0, 0, 0, 2354,
		2355, 1, 0, 0, 0, 2355, 2353, 1, 0, 0, 0, 2355, 2356, 1, 0, 0, 0, 2356,
		143, 1, 0, 0, 0, 2357, 2358, 7, 2, 0, 0, 2358, 145, 1, 0, 0, 0, 2359, 2360,
		7, 1, 0, 0, 2360, 147, 1, 0, 0, 0, 479, 149, 152, 166, 168, 175, 182, 191,
		195, 198, 203, 210, 214, 217, 222, 228, 234, 238, 241, 243, 248, 254, 260,
		264, 267, 269, 274, 280, 284, 287, 289, 294, 300, 306, 310, 313, 315, 320,
		326, 330, 333, 335, 340, 346, 352, 356, 359, 361, 366, 372, 378, 382, 385,
		387, 390, 395, 399, 402, 407, 411, 415, 420, 430, 437, 444, 453, 457, 460,
		465, 472, 476, 479, 484, 490, 496, 500, 503, 505, 510, 516, 522, 526, 529,
		531, 536, 542, 546, 549, 551, 556, 562, 568, 572, 575, 577, 582, 588, 594,
		598, 601, 603, 608, 614, 620, 624, 627, 629, 634, 638, 643, 649, 653, 656,
		658, 663, 669, 673, 678, 682, 685, 687, 692, 696, 701, 705, 708, 710, 715,
		721, 725, 728, 730, 735, 741, 747, 751, 754, 756, 759, 764, 768, 771, 776,
		780, 784, 800, 821, 828, 837, 841, 844, 849, 856, 860, 863, 868, 874, 880,
		884, 887, 889, 894, 900, 906, 910, 913, 915, 920, 926, 930, 933, 935, 940,
		946, 952, 956, 959, 961, 964, 969, 973, 976, 981, 985, 989, 996, 1003,
		1012, 1016, 1019, 1024, 1031, 1035, 1038, 1043, 1049, 1055, 1059, 1062,
		1064, 1069, 1075, 1081, 1085, 1088, 1090, 1095, 1101, 1105, 1108, 1110,
		1115, 1121, 1127, 1131, 1134, 1136, 1139, 1144, 1148, 1151, 1156, 1160,
		1164, 1168, 1175, 1182, 1191, 1195, 1198, 1203, 1210, 1214, 1217, 1222,
		1228, 1234, 1238, 1241, 1243, 1246, 1251, 1255, 1258, 1263, 1267, 1271,
		1278, 1285, 1294, 1298, 1301, 1306, 1313, 1317, 1320, 1325, 1331, 1337,
		1341, 1344, 1346, 1351, 1357, 1363, 1367, 1370, 1372, 1377, 1383, 1387,
		1390, 1392, 1397, 1403, 1409, 1413, 1416, 1418, 1423, 1429, 1435, 1439,
		1442, 1444, 1449, 1455, 1461, 1465, 1468, 1470, 1475, 1481, 1487, 1491,
		1494, 1496, 1499, 1504, 1508, 1511, 1516, 1520, 1526, 1530, 1537, 1544,
		1553, 1557, 1560, 1565, 1572, 1576, 1579, 1584, 1590, 1596, 1600, 1603,
		1605, 1610, 1616, 1622, 1626, 1629, 1631, 1636, 1642, 1646, 1649, 1651,
		1656, 1662, 1668, 1672, 1675, 1680, 1686, 1692, 1696, 1699, 1701, 1704,
		1709, 1713, 1716, 1721, 1725, 1729, 1735, 1739, 1742, 1747, 1751, 1757,
		1761, 1764, 1769, 1774, 1780, 1784, 1787, 1792, 1799, 1803, 1807, 1818,
		1825, 1834, 1838, 1841, 1846, 1853, 1857, 1860, 1865, 1871, 1877, 1881,
		1884, 1886, 1891, 1897, 1903, 1907, 1910, 1912, 1917, 1923, 1927, 1930,
		1932, 1937, 1943, 1949, 1953, 1956, 1961, 1967, 1973, 1977, 1980, 1985,
		1991, 1997, 2001, 2004, 2006, 2009, 2014, 2018, 2021, 2026, 2030, 2034,
		2044, 2048, 2057, 2061, 2064, 2069, 2073, 2079, 2083, 2086, 2091, 2096,
		2102, 2106, 2109, 2114, 2121, 2125, 2127, 2132, 2135, 2143, 2147, 2150,
		2155, 2159, 2165, 2169, 2172, 2177, 2182, 2188, 2192, 2195, 2200, 2207,
		2211, 2213, 2218, 2225, 2231, 2238, 2241, 2246, 2248, 2254, 2258, 2261,
		2266, 2273, 2277, 2280, 2286, 2292, 2298, 2302, 2305, 2310, 2314, 2320,
		2324, 2328, 2332, 2340, 2355,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// RFC4512ParserInit initializes any static state used to implement RFC4512Parser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewRFC4512Parser(). You can call this function if you wish to initialize the static state ahead
// of time.
func RFC4512ParserInit() {
	staticData := &RFC4512ParserStaticData
	staticData.once.Do(rfc4512ParserInit)
}

// NewRFC4512Parser produces a new parser instance for the optional input antlr.TokenStream.
func NewRFC4512Parser(input antlr.TokenStream) *RFC4512Parser {
	RFC4512ParserInit()
	this := new(RFC4512Parser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &RFC4512ParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "RFC4512.g4"

	return this
}

// RFC4512Parser tokens.
const (
	RFC4512ParserEOF              = antlr.TokenEOF
	RFC4512ParserT__0             = 1
	RFC4512ParserT__1             = 2
	RFC4512ParserT__2             = 3
	RFC4512ParserT__3             = 4
	RFC4512ParserT__4             = 5
	RFC4512ParserT__5             = 6
	RFC4512ParserT__6             = 7
	RFC4512ParserT__7             = 8
	RFC4512ParserT__8             = 9
	RFC4512ParserT__9             = 10
	RFC4512ParserT__10            = 11
	RFC4512ParserT__11            = 12
	RFC4512ParserT__12            = 13
	RFC4512ParserT__13            = 14
	RFC4512ParserT__14            = 15
	RFC4512ParserT__15            = 16
	RFC4512ParserT__16            = 17
	RFC4512ParserT__17            = 18
	RFC4512ParserT__18            = 19
	RFC4512ParserT__19            = 20
	RFC4512ParserT__20            = 21
	RFC4512ParserT__21            = 22
	RFC4512ParserT__22            = 23
	RFC4512ParserT__23            = 24
	RFC4512ParserT__24            = 25
	RFC4512ParserT__25            = 26
	RFC4512ParserT__26            = 27
	RFC4512ParserT__27            = 28
	RFC4512ParserT__28            = 29
	RFC4512ParserT__29            = 30
	RFC4512ParserOpenParenthesis  = 31
	RFC4512ParserCloseParenthesis = 32
	RFC4512ParserODelim           = 33
	RFC4512ParserMacroSuffix      = 34
	RFC4512ParserNumOID           = 35
	RFC4512ParserExtensionName    = 36
	RFC4512ParserQuotedDescriptor = 37
	RFC4512ParserQuotedString     = 38
	RFC4512ParserMinUpperBounds   = 39
	RFC4512ParserDigit            = 40
	RFC4512ParserNFLabel          = 41
	RFC4512ParserOCLabel          = 42
	RFC4512ParserATLabel          = 43
	RFC4512ParserLSLabel          = 44
	RFC4512ParserMRLabel          = 45
	RFC4512ParserMULabel          = 46
	RFC4512ParserDSLabel          = 47
	RFC4512ParserDCLabel          = 48
	RFC4512ParserDescr            = 49
	RFC4512ParserSP               = 50
	RFC4512ParserNEWLINE          = 51
	RFC4512ParserLineComment      = 52
)

// RFC4512Parser rules.
const (
	RFC4512ParserRULE_fileparse                    = 0
	RFC4512ParserRULE_definitions                  = 1
	RFC4512ParserRULE_objectClassDescriptions      = 2
	RFC4512ParserRULE_objectClassLabel             = 3
	RFC4512ParserRULE_objectClassDescription       = 4
	RFC4512ParserRULE_oCKind                       = 5
	RFC4512ParserRULE_abstractKind                 = 6
	RFC4512ParserRULE_structuralKind               = 7
	RFC4512ParserRULE_auxiliaryKind                = 8
	RFC4512ParserRULE_oCSuperClasses               = 9
	RFC4512ParserRULE_attributeTypeDescriptions    = 10
	RFC4512ParserRULE_attributeTypeLabel           = 11
	RFC4512ParserRULE_attributeTypeDescription     = 12
	RFC4512ParserRULE_minimumUpperBounds           = 13
	RFC4512ParserRULE_aTEquality                   = 14
	RFC4512ParserRULE_aTOrdering                   = 15
	RFC4512ParserRULE_aTSubstring                  = 16
	RFC4512ParserRULE_aTSuperType                  = 17
	RFC4512ParserRULE_aTUsage                      = 18
	RFC4512ParserRULE_userApplication              = 19
	RFC4512ParserRULE_directoryOperation           = 20
	RFC4512ParserRULE_distributedOperation         = 21
	RFC4512ParserRULE_dSAOperation                 = 22
	RFC4512ParserRULE_aTSingleValue                = 23
	RFC4512ParserRULE_aTCollective                 = 24
	RFC4512ParserRULE_aTNoUserModification         = 25
	RFC4512ParserRULE_matchingRuleDescriptions     = 26
	RFC4512ParserRULE_matchingRuleLabel            = 27
	RFC4512ParserRULE_matchingRuleDescription      = 28
	RFC4512ParserRULE_matchingRuleUseDescriptions  = 29
	RFC4512ParserRULE_matchingRuleUseLabel         = 30
	RFC4512ParserRULE_matchingRuleUseDescription   = 31
	RFC4512ParserRULE_mRUApplies                   = 32
	RFC4512ParserRULE_lDAPSyntaxDescriptions       = 33
	RFC4512ParserRULE_lDAPSyntaxLabel              = 34
	RFC4512ParserRULE_lDAPSyntaxDescription        = 35
	RFC4512ParserRULE_dITContentRuleDescriptions   = 36
	RFC4512ParserRULE_dITContentRuleLabel          = 37
	RFC4512ParserRULE_dITContentRuleDescription    = 38
	RFC4512ParserRULE_dCRNot                       = 39
	RFC4512ParserRULE_dCRAux                       = 40
	RFC4512ParserRULE_dITStructureRuleDescriptions = 41
	RFC4512ParserRULE_dITStructureRuleLabel        = 42
	RFC4512ParserRULE_dITStructureRuleDescription  = 43
	RFC4512ParserRULE_structureRules               = 44
	RFC4512ParserRULE_dSRSuperRules                = 45
	RFC4512ParserRULE_structureRule                = 46
	RFC4512ParserRULE_dSRForm                      = 47
	RFC4512ParserRULE_nameFormDescriptions         = 48
	RFC4512ParserRULE_nameFormLabel                = 49
	RFC4512ParserRULE_nameFormDescription          = 50
	RFC4512ParserRULE_nFStructuralOC               = 51
	RFC4512ParserRULE_definitionObsolete           = 52
	RFC4512ParserRULE_definitionSyntax             = 53
	RFC4512ParserRULE_definitionMust               = 54
	RFC4512ParserRULE_definitionMay                = 55
	RFC4512ParserRULE_definitionDescription        = 56
	RFC4512ParserRULE_definitionName               = 57
	RFC4512ParserRULE_definitionExtensions         = 58
	RFC4512ParserRULE_definitionExtension          = 59
	RFC4512ParserRULE_definitionLabelDelim         = 60
	RFC4512ParserRULE_oIDs                         = 61
	RFC4512ParserRULE_attributeDescription         = 62
	RFC4512ParserRULE_oID                          = 63
	RFC4512ParserRULE_openParen                    = 64
	RFC4512ParserRULE_closeParen                   = 65
	RFC4512ParserRULE_numericOIDOrMacro            = 66
	RFC4512ParserRULE_macro                        = 67
	RFC4512ParserRULE_numericOID                   = 68
	RFC4512ParserRULE_macroSuffix                  = 69
	RFC4512ParserRULE_number                       = 70
	RFC4512ParserRULE_attrOptions                  = 71
	RFC4512ParserRULE_descriptor                   = 72
	RFC4512ParserRULE_extensionValue               = 73
)

// IFileparseContext is an interface to support dynamic dispatch.
type IFileparseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Definitions() IDefinitionsContext
	EOF() antlr.TerminalNode
	NEWLINE() antlr.TerminalNode
	LineComment() antlr.TerminalNode

	// IsFileparseContext differentiates from other interfaces.
	IsFileparseContext()
}

type FileparseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileparseContext() *FileparseContext {
	var p = new(FileparseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_fileparse
	return p
}

func InitEmptyFileparseContext(p *FileparseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_fileparse
}

func (*FileparseContext) IsFileparseContext() {}

func NewFileparseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileparseContext {
	var p = new(FileparseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_fileparse

	return p
}

func (s *FileparseContext) GetParser() antlr.Parser { return s.parser }

func (s *FileparseContext) Definitions() IDefinitionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionsContext)
}

func (s *FileparseContext) EOF() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, 0)
}

func (s *FileparseContext) NEWLINE() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, 0)
}

func (s *FileparseContext) LineComment() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, 0)
}

func (s *FileparseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileparseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileparseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterFileparse(s)
	}
}

func (s *FileparseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitFileparse(s)
	}
}

func (p *RFC4512Parser) Fileparse() (localctx IFileparseContext) {
	localctx = NewFileparseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, RFC4512ParserRULE_fileparse)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(149)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(148)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(152)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(151)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(154)
		p.Definitions()
	}
	{
		p.SetState(155)
		p.Match(RFC4512ParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionsContext is an interface to support dynamic dispatch.
type IDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllLDAPSyntaxDescriptions() []ILDAPSyntaxDescriptionsContext
	LDAPSyntaxDescriptions(i int) ILDAPSyntaxDescriptionsContext
	AllMatchingRuleDescriptions() []IMatchingRuleDescriptionsContext
	MatchingRuleDescriptions(i int) IMatchingRuleDescriptionsContext
	AllAttributeTypeDescriptions() []IAttributeTypeDescriptionsContext
	AttributeTypeDescriptions(i int) IAttributeTypeDescriptionsContext
	AllMatchingRuleUseDescriptions() []IMatchingRuleUseDescriptionsContext
	MatchingRuleUseDescriptions(i int) IMatchingRuleUseDescriptionsContext
	AllObjectClassDescriptions() []IObjectClassDescriptionsContext
	ObjectClassDescriptions(i int) IObjectClassDescriptionsContext
	AllDITContentRuleDescriptions() []IDITContentRuleDescriptionsContext
	DITContentRuleDescriptions(i int) IDITContentRuleDescriptionsContext
	AllNameFormDescriptions() []INameFormDescriptionsContext
	NameFormDescriptions(i int) INameFormDescriptionsContext
	AllDITStructureRuleDescriptions() []IDITStructureRuleDescriptionsContext
	DITStructureRuleDescriptions(i int) IDITStructureRuleDescriptionsContext

	// IsDefinitionsContext differentiates from other interfaces.
	IsDefinitionsContext()
}

type DefinitionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionsContext() *DefinitionsContext {
	var p = new(DefinitionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitions
	return p
}

func InitEmptyDefinitionsContext(p *DefinitionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitions
}

func (*DefinitionsContext) IsDefinitionsContext() {}

func NewDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionsContext {
	var p = new(DefinitionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitions

	return p
}

func (s *DefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionsContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DefinitionsContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DefinitionsContext) AllLDAPSyntaxDescriptions() []ILDAPSyntaxDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILDAPSyntaxDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]ILDAPSyntaxDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILDAPSyntaxDescriptionsContext); ok {
			tst[i] = t.(ILDAPSyntaxDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) LDAPSyntaxDescriptions(i int) ILDAPSyntaxDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDAPSyntaxDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDAPSyntaxDescriptionsContext)
}

func (s *DefinitionsContext) AllMatchingRuleDescriptions() []IMatchingRuleDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleDescriptionsContext); ok {
			tst[i] = t.(IMatchingRuleDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) MatchingRuleDescriptions(i int) IMatchingRuleDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleDescriptionsContext)
}

func (s *DefinitionsContext) AllAttributeTypeDescriptions() []IAttributeTypeDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeTypeDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IAttributeTypeDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeTypeDescriptionsContext); ok {
			tst[i] = t.(IAttributeTypeDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) AttributeTypeDescriptions(i int) IAttributeTypeDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeTypeDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeTypeDescriptionsContext)
}

func (s *DefinitionsContext) AllMatchingRuleUseDescriptions() []IMatchingRuleUseDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleUseDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleUseDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleUseDescriptionsContext); ok {
			tst[i] = t.(IMatchingRuleUseDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) MatchingRuleUseDescriptions(i int) IMatchingRuleUseDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleUseDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleUseDescriptionsContext)
}

func (s *DefinitionsContext) AllObjectClassDescriptions() []IObjectClassDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectClassDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IObjectClassDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectClassDescriptionsContext); ok {
			tst[i] = t.(IObjectClassDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) ObjectClassDescriptions(i int) IObjectClassDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectClassDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectClassDescriptionsContext)
}

func (s *DefinitionsContext) AllDITContentRuleDescriptions() []IDITContentRuleDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITContentRuleDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IDITContentRuleDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITContentRuleDescriptionsContext); ok {
			tst[i] = t.(IDITContentRuleDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) DITContentRuleDescriptions(i int) IDITContentRuleDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITContentRuleDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITContentRuleDescriptionsContext)
}

func (s *DefinitionsContext) AllNameFormDescriptions() []INameFormDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameFormDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]INameFormDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameFormDescriptionsContext); ok {
			tst[i] = t.(INameFormDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) NameFormDescriptions(i int) INameFormDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameFormDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameFormDescriptionsContext)
}

func (s *DefinitionsContext) AllDITStructureRuleDescriptions() []IDITStructureRuleDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITStructureRuleDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IDITStructureRuleDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITStructureRuleDescriptionsContext); ok {
			tst[i] = t.(IDITStructureRuleDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) DITStructureRuleDescriptions(i int) IDITStructureRuleDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITStructureRuleDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITStructureRuleDescriptionsContext)
}

func (s *DefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitions(s)
	}
}

func (s *DefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitions(s)
	}
}

func (p *RFC4512Parser) Definitions() (localctx IDefinitionsContext) {
	localctx = NewDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, RFC4512ParserRULE_definitions)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(166)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&5064350557536256) != 0) {
		p.SetState(166)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case RFC4512ParserLineComment:
			{
				p.SetState(157)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case RFC4512ParserLSLabel:
			{
				p.SetState(158)
				p.LDAPSyntaxDescriptions()
			}

		case RFC4512ParserMRLabel:
			{
				p.SetState(159)
				p.MatchingRuleDescriptions()
			}

		case RFC4512ParserATLabel:
			{
				p.SetState(160)
				p.AttributeTypeDescriptions()
			}

		case RFC4512ParserMULabel:
			{
				p.SetState(161)
				p.MatchingRuleUseDescriptions()
			}

		case RFC4512ParserOCLabel:
			{
				p.SetState(162)
				p.ObjectClassDescriptions()
			}

		case RFC4512ParserDCLabel:
			{
				p.SetState(163)
				p.DITContentRuleDescriptions()
			}

		case RFC4512ParserNFLabel:
			{
				p.SetState(164)
				p.NameFormDescriptions()
			}

		case RFC4512ParserDSLabel:
			{
				p.SetState(165)
				p.DITStructureRuleDescriptions()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(168)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectClassDescriptionsContext is an interface to support dynamic dispatch.
type IObjectClassDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllObjectClassLabel() []IObjectClassLabelContext
	ObjectClassLabel(i int) IObjectClassLabelContext
	AllObjectClassDescription() []IObjectClassDescriptionContext
	ObjectClassDescription(i int) IObjectClassDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsObjectClassDescriptionsContext differentiates from other interfaces.
	IsObjectClassDescriptionsContext()
}

type ObjectClassDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectClassDescriptionsContext() *ObjectClassDescriptionsContext {
	var p = new(ObjectClassDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescriptions
	return p
}

func InitEmptyObjectClassDescriptionsContext(p *ObjectClassDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescriptions
}

func (*ObjectClassDescriptionsContext) IsObjectClassDescriptionsContext() {}

func NewObjectClassDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectClassDescriptionsContext {
	var p = new(ObjectClassDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectClassDescriptions

	return p
}

func (s *ObjectClassDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectClassDescriptionsContext) AllObjectClassLabel() []IObjectClassLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectClassLabelContext); ok {
			len++
		}
	}

	tst := make([]IObjectClassLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectClassLabelContext); ok {
			tst[i] = t.(IObjectClassLabelContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionsContext) ObjectClassLabel(i int) IObjectClassLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectClassLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectClassLabelContext)
}

func (s *ObjectClassDescriptionsContext) AllObjectClassDescription() []IObjectClassDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectClassDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IObjectClassDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectClassDescriptionContext); ok {
			tst[i] = t.(IObjectClassDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionsContext) ObjectClassDescription(i int) IObjectClassDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectClassDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectClassDescriptionContext)
}

func (s *ObjectClassDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *ObjectClassDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *ObjectClassDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *ObjectClassDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *ObjectClassDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ObjectClassDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ObjectClassDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectClassDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectClassDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectClassDescriptions(s)
	}
}

func (s *ObjectClassDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectClassDescriptions(s)
	}
}

func (p *RFC4512Parser) ObjectClassDescriptions() (localctx IObjectClassDescriptionsContext) {
	localctx = NewObjectClassDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, RFC4512ParserRULE_objectClassDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(180)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(170)
				p.ObjectClassLabel()
			}
			{
				p.SetState(171)
				p.ObjectClassDescription()
			}
			p.SetState(175)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(172)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(177)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(178)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(182)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectClassLabelContext is an interface to support dynamic dispatch.
type IObjectClassLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OCLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsObjectClassLabelContext differentiates from other interfaces.
	IsObjectClassLabelContext()
}

type ObjectClassLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectClassLabelContext() *ObjectClassLabelContext {
	var p = new(ObjectClassLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassLabel
	return p
}

func InitEmptyObjectClassLabelContext(p *ObjectClassLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassLabel
}

func (*ObjectClassLabelContext) IsObjectClassLabelContext() {}

func NewObjectClassLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectClassLabelContext {
	var p = new(ObjectClassLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectClassLabel

	return p
}

func (s *ObjectClassLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectClassLabelContext) OCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserOCLabel, 0)
}

func (s *ObjectClassLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *ObjectClassLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectClassLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectClassLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectClassLabel(s)
	}
}

func (s *ObjectClassLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectClassLabel(s)
	}
}

func (p *RFC4512Parser) ObjectClassLabel() (localctx IObjectClassLabelContext) {
	localctx = NewObjectClassLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, RFC4512ParserRULE_objectClassLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(184)
		p.Match(RFC4512ParserOCLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(185)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectClassDescriptionContext is an interface to support dynamic dispatch.
type IObjectClassDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionName() IDefinitionNameContext
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionObsolete() IDefinitionObsoleteContext
	OCSuperClasses() IOCSuperClassesContext
	OCKind() IOCKindContext
	DefinitionMust() IDefinitionMustContext
	DefinitionMay() IDefinitionMayContext
	DefinitionExtensions() IDefinitionExtensionsContext

	// IsObjectClassDescriptionContext differentiates from other interfaces.
	IsObjectClassDescriptionContext()
}

type ObjectClassDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectClassDescriptionContext() *ObjectClassDescriptionContext {
	var p = new(ObjectClassDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescription
	return p
}

func InitEmptyObjectClassDescriptionContext(p *ObjectClassDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescription
}

func (*ObjectClassDescriptionContext) IsObjectClassDescriptionContext() {}

func NewObjectClassDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectClassDescriptionContext {
	var p = new(ObjectClassDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectClassDescription

	return p
}

func (s *ObjectClassDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectClassDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *ObjectClassDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *ObjectClassDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *ObjectClassDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ObjectClassDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ObjectClassDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *ObjectClassDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *ObjectClassDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *ObjectClassDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *ObjectClassDescriptionContext) DefinitionName() IDefinitionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionNameContext)
}

func (s *ObjectClassDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *ObjectClassDescriptionContext) DefinitionObsolete() IDefinitionObsoleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionObsoleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionObsoleteContext)
}

func (s *ObjectClassDescriptionContext) OCSuperClasses() IOCSuperClassesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOCSuperClassesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOCSuperClassesContext)
}

func (s *ObjectClassDescriptionContext) OCKind() IOCKindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOCKindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOCKindContext)
}

func (s *ObjectClassDescriptionContext) DefinitionMust() IDefinitionMustContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionMustContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionMustContext)
}

func (s *ObjectClassDescriptionContext) DefinitionMay() IDefinitionMayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionMayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionMayContext)
}

func (s *ObjectClassDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *ObjectClassDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectClassDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectClassDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectClassDescription(s)
	}
}

func (s *ObjectClassDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectClassDescription(s)
	}
}

func (p *RFC4512Parser) ObjectClassDescription() (localctx IObjectClassDescriptionContext) {
	localctx = NewObjectClassDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, RFC4512ParserRULE_objectClassDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(187)
		p.OpenParen()
	}
	p.SetState(191)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(188)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(193)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(195)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(194)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(198)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(197)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(203)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(200)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(205)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(206)
		p.NumericOIDOrMacro()
	}
	p.SetState(210)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(207)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(212)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(214)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(213)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(217)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(216)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(243)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
		p.SetState(220)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(219)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(222)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(224)
			p.Match(RFC4512ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(226)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(225)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(228)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(230)
			p.DefinitionName()
		}
		p.SetState(234)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(231)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(236)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(238)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(237)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(241)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(240)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(269)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		p.SetState(246)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(245)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(248)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(250)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(252)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(251)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(254)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(256)
			p.DefinitionDescription()
		}
		p.SetState(260)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(257)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(262)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(264)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(263)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(267)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 23, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(266)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(289)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		p.SetState(272)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(271)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(274)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(276)
			p.DefinitionObsolete()
		}
		p.SetState(280)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(277)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(282)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(284)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(283)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(287)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(286)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(315)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
		p.SetState(292)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(291)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(294)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(296)
			p.Match(RFC4512ParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(298)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(297)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(300)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(302)
			p.OCSuperClasses()
		}
		p.SetState(306)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(303)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(308)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(310)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(309)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(313)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(312)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(335)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		p.SetState(318)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(317)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(320)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(322)
			p.OCKind()
		}
		p.SetState(326)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(323)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(328)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(330)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(329)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(333)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(332)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(361)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
		p.SetState(338)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(337)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(340)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(342)
			p.Match(RFC4512ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(344)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(343)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(346)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(348)
			p.DefinitionMust()
		}
		p.SetState(352)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(349)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(354)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(356)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(355)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(359)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(358)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(387)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		p.SetState(364)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(363)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(366)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(368)
			p.Match(RFC4512ParserT__4)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(370)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(369)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(372)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(374)
			p.DefinitionMay()
		}
		p.SetState(378)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(375)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(380)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(382)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(381)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(385)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(384)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(390)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(389)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(395)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(392)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(397)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(399)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(398)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(402)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(401)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(404)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(411)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(410)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(413)
		p.CloseParen()
	}
	p.SetState(415)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(414)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOCKindContext is an interface to support dynamic dispatch.
type IOCKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StructuralKind() IStructuralKindContext
	AuxiliaryKind() IAuxiliaryKindContext
	AbstractKind() IAbstractKindContext

	// IsOCKindContext differentiates from other interfaces.
	IsOCKindContext()
}

type OCKindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOCKindContext() *OCKindContext {
	var p = new(OCKindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oCKind
	return p
}

func InitEmptyOCKindContext(p *OCKindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oCKind
}

func (*OCKindContext) IsOCKindContext() {}

func NewOCKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OCKindContext {
	var p = new(OCKindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_oCKind

	return p
}

func (s *OCKindContext) GetParser() antlr.Parser { return s.parser }

func (s *OCKindContext) StructuralKind() IStructuralKindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructuralKindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructuralKindContext)
}

func (s *OCKindContext) AuxiliaryKind() IAuxiliaryKindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAuxiliaryKindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAuxiliaryKindContext)
}

func (s *OCKindContext) AbstractKind() IAbstractKindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbstractKindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbstractKindContext)
}

func (s *OCKindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OCKindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OCKindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOCKind(s)
	}
}

func (s *OCKindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOCKind(s)
	}
}

func (p *RFC4512Parser) OCKind() (localctx IOCKindContext) {
	localctx = NewOCKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, RFC4512ParserRULE_oCKind)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserT__6:
		{
			p.SetState(417)
			p.StructuralKind()
		}

	case RFC4512ParserT__7:
		{
			p.SetState(418)
			p.AuxiliaryKind()
		}

	case RFC4512ParserT__5:
		{
			p.SetState(419)
			p.AbstractKind()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAbstractKindContext is an interface to support dynamic dispatch.
type IAbstractKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAbstractKindContext differentiates from other interfaces.
	IsAbstractKindContext()
}

type AbstractKindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractKindContext() *AbstractKindContext {
	var p = new(AbstractKindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_abstractKind
	return p
}

func InitEmptyAbstractKindContext(p *AbstractKindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_abstractKind
}

func (*AbstractKindContext) IsAbstractKindContext() {}

func NewAbstractKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractKindContext {
	var p = new(AbstractKindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_abstractKind

	return p
}

func (s *AbstractKindContext) GetParser() antlr.Parser { return s.parser }
func (s *AbstractKindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractKindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractKindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAbstractKind(s)
	}
}

func (s *AbstractKindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAbstractKind(s)
	}
}

func (p *RFC4512Parser) AbstractKind() (localctx IAbstractKindContext) {
	localctx = NewAbstractKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, RFC4512ParserRULE_abstractKind)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(422)
		p.Match(RFC4512ParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructuralKindContext is an interface to support dynamic dispatch.
type IStructuralKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsStructuralKindContext differentiates from other interfaces.
	IsStructuralKindContext()
}

type StructuralKindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructuralKindContext() *StructuralKindContext {
	var p = new(StructuralKindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structuralKind
	return p
}

func InitEmptyStructuralKindContext(p *StructuralKindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structuralKind
}

func (*StructuralKindContext) IsStructuralKindContext() {}

func NewStructuralKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructuralKindContext {
	var p = new(StructuralKindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_structuralKind

	return p
}

func (s *StructuralKindContext) GetParser() antlr.Parser { return s.parser }
func (s *StructuralKindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructuralKindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructuralKindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterStructuralKind(s)
	}
}

func (s *StructuralKindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitStructuralKind(s)
	}
}

func (p *RFC4512Parser) StructuralKind() (localctx IStructuralKindContext) {
	localctx = NewStructuralKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, RFC4512ParserRULE_structuralKind)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(424)
		p.Match(RFC4512ParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAuxiliaryKindContext is an interface to support dynamic dispatch.
type IAuxiliaryKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAuxiliaryKindContext differentiates from other interfaces.
	IsAuxiliaryKindContext()
}

type AuxiliaryKindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuxiliaryKindContext() *AuxiliaryKindContext {
	var p = new(AuxiliaryKindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_auxiliaryKind
	return p
}

func InitEmptyAuxiliaryKindContext(p *AuxiliaryKindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_auxiliaryKind
}

func (*AuxiliaryKindContext) IsAuxiliaryKindContext() {}

func NewAuxiliaryKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AuxiliaryKindContext {
	var p = new(AuxiliaryKindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_auxiliaryKind

	return p
}

func (s *AuxiliaryKindContext) GetParser() antlr.Parser { return s.parser }
func (s *AuxiliaryKindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuxiliaryKindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AuxiliaryKindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAuxiliaryKind(s)
	}
}

func (s *AuxiliaryKindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAuxiliaryKind(s)
	}
}

func (p *RFC4512Parser) AuxiliaryKind() (localctx IAuxiliaryKindContext) {
	localctx = NewAuxiliaryKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, RFC4512ParserRULE_auxiliaryKind)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(426)
		p.Match(RFC4512ParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOCSuperClassesContext is an interface to support dynamic dispatch.
type IOCSuperClassesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext

	// IsOCSuperClassesContext differentiates from other interfaces.
	IsOCSuperClassesContext()
}

type OCSuperClassesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOCSuperClassesContext() *OCSuperClassesContext {
	var p = new(OCSuperClassesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oCSuperClasses
	return p
}

func InitEmptyOCSuperClassesContext(p *OCSuperClassesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oCSuperClasses
}

func (*OCSuperClassesContext) IsOCSuperClassesContext() {}

func NewOCSuperClassesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OCSuperClassesContext {
	var p = new(OCSuperClassesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_oCSuperClasses

	return p
}

func (s *OCSuperClassesContext) GetParser() antlr.Parser { return s.parser }

func (s *OCSuperClassesContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *OCSuperClassesContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *OCSuperClassesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OCSuperClassesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OCSuperClassesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOCSuperClasses(s)
	}
}

func (s *OCSuperClassesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOCSuperClasses(s)
	}
}

func (p *RFC4512Parser) OCSuperClasses() (localctx IOCSuperClassesContext) {
	localctx = NewOCSuperClassesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, RFC4512ParserRULE_oCSuperClasses)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(430)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(428)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(429)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeTypeDescriptionsContext is an interface to support dynamic dispatch.
type IAttributeTypeDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAttributeTypeLabel() []IAttributeTypeLabelContext
	AttributeTypeLabel(i int) IAttributeTypeLabelContext
	AllAttributeTypeDescription() []IAttributeTypeDescriptionContext
	AttributeTypeDescription(i int) IAttributeTypeDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsAttributeTypeDescriptionsContext differentiates from other interfaces.
	IsAttributeTypeDescriptionsContext()
}

type AttributeTypeDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeTypeDescriptionsContext() *AttributeTypeDescriptionsContext {
	var p = new(AttributeTypeDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescriptions
	return p
}

func InitEmptyAttributeTypeDescriptionsContext(p *AttributeTypeDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescriptions
}

func (*AttributeTypeDescriptionsContext) IsAttributeTypeDescriptionsContext() {}

func NewAttributeTypeDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeTypeDescriptionsContext {
	var p = new(AttributeTypeDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescriptions

	return p
}

func (s *AttributeTypeDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeTypeDescriptionsContext) AllAttributeTypeLabel() []IAttributeTypeLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeTypeLabelContext); ok {
			len++
		}
	}

	tst := make([]IAttributeTypeLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeTypeLabelContext); ok {
			tst[i] = t.(IAttributeTypeLabelContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionsContext) AttributeTypeLabel(i int) IAttributeTypeLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeTypeLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeTypeLabelContext)
}

func (s *AttributeTypeDescriptionsContext) AllAttributeTypeDescription() []IAttributeTypeDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeTypeDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IAttributeTypeDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeTypeDescriptionContext); ok {
			tst[i] = t.(IAttributeTypeDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionsContext) AttributeTypeDescription(i int) IAttributeTypeDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeTypeDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeTypeDescriptionContext)
}

func (s *AttributeTypeDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *AttributeTypeDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *AttributeTypeDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *AttributeTypeDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *AttributeTypeDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *AttributeTypeDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *AttributeTypeDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeTypeDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeTypeDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeTypeDescriptions(s)
	}
}

func (s *AttributeTypeDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeTypeDescriptions(s)
	}
}

func (p *RFC4512Parser) AttributeTypeDescriptions() (localctx IAttributeTypeDescriptionsContext) {
	localctx = NewAttributeTypeDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, RFC4512ParserRULE_attributeTypeDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(432)
				p.AttributeTypeLabel()
			}
			{
				p.SetState(433)
				p.AttributeTypeDescription()
			}
			p.SetState(437)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(434)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(439)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(440)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(444)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeTypeLabelContext is an interface to support dynamic dispatch.
type IAttributeTypeLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ATLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsAttributeTypeLabelContext differentiates from other interfaces.
	IsAttributeTypeLabelContext()
}

type AttributeTypeLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeTypeLabelContext() *AttributeTypeLabelContext {
	var p = new(AttributeTypeLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeLabel
	return p
}

func InitEmptyAttributeTypeLabelContext(p *AttributeTypeLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeLabel
}

func (*AttributeTypeLabelContext) IsAttributeTypeLabelContext() {}

func NewAttributeTypeLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeTypeLabelContext {
	var p = new(AttributeTypeLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeTypeLabel

	return p
}

func (s *AttributeTypeLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeTypeLabelContext) ATLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserATLabel, 0)
}

func (s *AttributeTypeLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *AttributeTypeLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeTypeLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeTypeLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeTypeLabel(s)
	}
}

func (s *AttributeTypeLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeTypeLabel(s)
	}
}

func (p *RFC4512Parser) AttributeTypeLabel() (localctx IAttributeTypeLabelContext) {
	localctx = NewAttributeTypeLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, RFC4512ParserRULE_attributeTypeLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(446)
		p.Match(RFC4512ParserATLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(447)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeTypeDescriptionContext is an interface to support dynamic dispatch.
type IAttributeTypeDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionName() IDefinitionNameContext
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionObsolete() IDefinitionObsoleteContext
	ATSuperType() IATSuperTypeContext
	ATEquality() IATEqualityContext
	ATOrdering() IATOrderingContext
	ATSubstring() IATSubstringContext
	DefinitionSyntax() IDefinitionSyntaxContext
	ATNoUserModification() IATNoUserModificationContext
	ATUsage() IATUsageContext
	DefinitionExtensions() IDefinitionExtensionsContext
	ATSingleValue() IATSingleValueContext
	ATCollective() IATCollectiveContext
	MinimumUpperBounds() IMinimumUpperBoundsContext

	// IsAttributeTypeDescriptionContext differentiates from other interfaces.
	IsAttributeTypeDescriptionContext()
}

type AttributeTypeDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeTypeDescriptionContext() *AttributeTypeDescriptionContext {
	var p = new(AttributeTypeDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescription
	return p
}

func InitEmptyAttributeTypeDescriptionContext(p *AttributeTypeDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescription
}

func (*AttributeTypeDescriptionContext) IsAttributeTypeDescriptionContext() {}

func NewAttributeTypeDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeTypeDescriptionContext {
	var p = new(AttributeTypeDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescription

	return p
}

func (s *AttributeTypeDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeTypeDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *AttributeTypeDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *AttributeTypeDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *AttributeTypeDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *AttributeTypeDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *AttributeTypeDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *AttributeTypeDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *AttributeTypeDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *AttributeTypeDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *AttributeTypeDescriptionContext) DefinitionName() IDefinitionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionNameContext)
}

func (s *AttributeTypeDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *AttributeTypeDescriptionContext) DefinitionObsolete() IDefinitionObsoleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionObsoleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionObsoleteContext)
}

func (s *AttributeTypeDescriptionContext) ATSuperType() IATSuperTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATSuperTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATSuperTypeContext)
}

func (s *AttributeTypeDescriptionContext) ATEquality() IATEqualityContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATEqualityContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATEqualityContext)
}

func (s *AttributeTypeDescriptionContext) ATOrdering() IATOrderingContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATOrderingContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATOrderingContext)
}

func (s *AttributeTypeDescriptionContext) ATSubstring() IATSubstringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATSubstringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATSubstringContext)
}

func (s *AttributeTypeDescriptionContext) DefinitionSyntax() IDefinitionSyntaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionSyntaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionSyntaxContext)
}

func (s *AttributeTypeDescriptionContext) ATNoUserModification() IATNoUserModificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATNoUserModificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATNoUserModificationContext)
}

func (s *AttributeTypeDescriptionContext) ATUsage() IATUsageContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATUsageContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATUsageContext)
}

func (s *AttributeTypeDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *AttributeTypeDescriptionContext) ATSingleValue() IATSingleValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATSingleValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATSingleValueContext)
}

func (s *AttributeTypeDescriptionContext) ATCollective() IATCollectiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IATCollectiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IATCollectiveContext)
}

func (s *AttributeTypeDescriptionContext) MinimumUpperBounds() IMinimumUpperBoundsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMinimumUpperBoundsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMinimumUpperBoundsContext)
}

func (s *AttributeTypeDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeTypeDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeTypeDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeTypeDescription(s)
	}
}

func (s *AttributeTypeDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeTypeDescription(s)
	}
}

func (p *RFC4512Parser) AttributeTypeDescription() (localctx IAttributeTypeDescriptionContext) {
	localctx = NewAttributeTypeDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, RFC4512ParserRULE_attributeTypeDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(449)
		p.OpenParen()
	}
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(450)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(455)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(456)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(459)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(462)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(468)
		p.NumericOIDOrMacro()
	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(469)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(474)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(476)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(475)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(479)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(478)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(505)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		p.SetState(482)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(481)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(484)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(486)
			p.Match(RFC4512ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(488)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(487)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(490)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(492)
			p.DefinitionName()
		}
		p.SetState(496)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(493)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(498)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(500)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(499)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(503)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(502)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(531)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
		p.SetState(508)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(507)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(510)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(512)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(514)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(513)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(516)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(518)
			p.DefinitionDescription()
		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(519)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(524)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(526)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(525)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(529)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(528)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(551)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		p.SetState(534)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(533)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(536)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(538)
			p.DefinitionObsolete()
		}
		p.SetState(542)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(539)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(544)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(546)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(545)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(549)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(548)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(553)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(556)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(558)
			p.Match(RFC4512ParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(560)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(559)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(562)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(564)
			p.ATSuperType()
		}
		p.SetState(568)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(565)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(570)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(572)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(571)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(575)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(574)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		p.SetState(580)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(579)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(582)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(584)
			p.Match(RFC4512ParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(586)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(585)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(588)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(590)
			p.ATEquality()
		}
		p.SetState(594)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(591)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(596)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(598)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(597)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(601)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(600)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(629)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext()) == 1 {
		p.SetState(606)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(605)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(608)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(610)
			p.Match(RFC4512ParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(612)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(611)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(614)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(616)
			p.ATOrdering()
		}
		p.SetState(620)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 102, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(617)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(622)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 102, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(624)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(623)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(627)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(626)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(658)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
		p.SetState(632)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(631)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(634)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(636)
			p.Match(RFC4512ParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(638)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserT__11 {
			{
				p.SetState(637)
				p.Match(RFC4512ParserT__11)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(641)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(640)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(643)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(645)
			p.ATSubstring()
		}
		p.SetState(649)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(646)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(651)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(653)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(652)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(656)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(655)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(687)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(660)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(663)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(665)
			p.Match(RFC4512ParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(667)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(666)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(669)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(671)
			p.DefinitionSyntax()
		}
		p.SetState(673)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserMinUpperBounds {
			{
				p.SetState(672)
				p.MinimumUpperBounds()
			}

		}
		p.SetState(678)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(675)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(680)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(682)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(681)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(685)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(684)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(710)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
		p.SetState(690)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(689)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(692)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(696)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case RFC4512ParserT__18:
			{
				p.SetState(694)
				p.ATSingleValue()
			}

		case RFC4512ParserT__19:
			{
				p.SetState(695)
				p.ATCollective()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(701)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(698)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(703)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(705)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(704)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(708)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(707)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(730)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
		p.SetState(713)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(712)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(715)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(717)
			p.ATNoUserModification()
		}
		p.SetState(721)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(718)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(723)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(725)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(724)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(728)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(727)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(756)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 136, p.GetParserRuleContext()) == 1 {
		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(732)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(735)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(737)
			p.Match(RFC4512ParserT__13)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(739)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(738)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(741)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(743)
			p.ATUsage()
		}
		p.SetState(747)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 133, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(744)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(749)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 133, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(751)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(750)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(754)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(753)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(759)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(758)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 138, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(761)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 138, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(768)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(767)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(771)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(770)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(776)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(773)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(778)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(779)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(782)
		p.CloseParen()
	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(783)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMinimumUpperBoundsContext is an interface to support dynamic dispatch.
type IMinimumUpperBoundsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MinUpperBounds() antlr.TerminalNode

	// IsMinimumUpperBoundsContext differentiates from other interfaces.
	IsMinimumUpperBoundsContext()
}

type MinimumUpperBoundsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMinimumUpperBoundsContext() *MinimumUpperBoundsContext {
	var p = new(MinimumUpperBoundsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_minimumUpperBounds
	return p
}

func InitEmptyMinimumUpperBoundsContext(p *MinimumUpperBoundsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_minimumUpperBounds
}

func (*MinimumUpperBoundsContext) IsMinimumUpperBoundsContext() {}

func NewMinimumUpperBoundsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MinimumUpperBoundsContext {
	var p = new(MinimumUpperBoundsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_minimumUpperBounds

	return p
}

func (s *MinimumUpperBoundsContext) GetParser() antlr.Parser { return s.parser }

func (s *MinimumUpperBoundsContext) MinUpperBounds() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMinUpperBounds, 0)
}

func (s *MinimumUpperBoundsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MinimumUpperBoundsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MinimumUpperBoundsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMinimumUpperBounds(s)
	}
}

func (s *MinimumUpperBoundsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMinimumUpperBounds(s)
	}
}

func (p *RFC4512Parser) MinimumUpperBounds() (localctx IMinimumUpperBoundsContext) {
	localctx = NewMinimumUpperBoundsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, RFC4512ParserRULE_minimumUpperBounds)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(786)
		p.Match(RFC4512ParserMinUpperBounds)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATEqualityContext is an interface to support dynamic dispatch.
type IATEqualityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext

	// IsATEqualityContext differentiates from other interfaces.
	IsATEqualityContext()
}

type ATEqualityContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATEqualityContext() *ATEqualityContext {
	var p = new(ATEqualityContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTEquality
	return p
}

func InitEmptyATEqualityContext(p *ATEqualityContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTEquality
}

func (*ATEqualityContext) IsATEqualityContext() {}

func NewATEqualityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATEqualityContext {
	var p = new(ATEqualityContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTEquality

	return p
}

func (s *ATEqualityContext) GetParser() antlr.Parser { return s.parser }

func (s *ATEqualityContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *ATEqualityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATEqualityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATEqualityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATEquality(s)
	}
}

func (s *ATEqualityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATEquality(s)
	}
}

func (p *RFC4512Parser) ATEquality() (localctx IATEqualityContext) {
	localctx = NewATEqualityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, RFC4512ParserRULE_aTEquality)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(788)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATOrderingContext is an interface to support dynamic dispatch.
type IATOrderingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext

	// IsATOrderingContext differentiates from other interfaces.
	IsATOrderingContext()
}

type ATOrderingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATOrderingContext() *ATOrderingContext {
	var p = new(ATOrderingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTOrdering
	return p
}

func InitEmptyATOrderingContext(p *ATOrderingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTOrdering
}

func (*ATOrderingContext) IsATOrderingContext() {}

func NewATOrderingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATOrderingContext {
	var p = new(ATOrderingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTOrdering

	return p
}

func (s *ATOrderingContext) GetParser() antlr.Parser { return s.parser }

func (s *ATOrderingContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *ATOrderingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATOrderingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATOrderingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATOrdering(s)
	}
}

func (s *ATOrderingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATOrdering(s)
	}
}

func (p *RFC4512Parser) ATOrdering() (localctx IATOrderingContext) {
	localctx = NewATOrderingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, RFC4512ParserRULE_aTOrdering)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(790)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATSubstringContext is an interface to support dynamic dispatch.
type IATSubstringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext

	// IsATSubstringContext differentiates from other interfaces.
	IsATSubstringContext()
}

type ATSubstringContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATSubstringContext() *ATSubstringContext {
	var p = new(ATSubstringContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTSubstring
	return p
}

func InitEmptyATSubstringContext(p *ATSubstringContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTSubstring
}

func (*ATSubstringContext) IsATSubstringContext() {}

func NewATSubstringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATSubstringContext {
	var p = new(ATSubstringContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTSubstring

	return p
}

func (s *ATSubstringContext) GetParser() antlr.Parser { return s.parser }

func (s *ATSubstringContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *ATSubstringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATSubstringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATSubstringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATSubstring(s)
	}
}

func (s *ATSubstringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATSubstring(s)
	}
}

func (p *RFC4512Parser) ATSubstring() (localctx IATSubstringContext) {
	localctx = NewATSubstringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, RFC4512ParserRULE_aTSubstring)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(792)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATSuperTypeContext is an interface to support dynamic dispatch.
type IATSuperTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext

	// IsATSuperTypeContext differentiates from other interfaces.
	IsATSuperTypeContext()
}

type ATSuperTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATSuperTypeContext() *ATSuperTypeContext {
	var p = new(ATSuperTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTSuperType
	return p
}

func InitEmptyATSuperTypeContext(p *ATSuperTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTSuperType
}

func (*ATSuperTypeContext) IsATSuperTypeContext() {}

func NewATSuperTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATSuperTypeContext {
	var p = new(ATSuperTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTSuperType

	return p
}

func (s *ATSuperTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ATSuperTypeContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *ATSuperTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATSuperTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATSuperTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATSuperType(s)
	}
}

func (s *ATSuperTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATSuperType(s)
	}
}

func (p *RFC4512Parser) ATSuperType() (localctx IATSuperTypeContext) {
	localctx = NewATSuperTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, RFC4512ParserRULE_aTSuperType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(794)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATUsageContext is an interface to support dynamic dispatch.
type IATUsageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UserApplication() IUserApplicationContext
	DirectoryOperation() IDirectoryOperationContext
	DistributedOperation() IDistributedOperationContext
	DSAOperation() IDSAOperationContext

	// IsATUsageContext differentiates from other interfaces.
	IsATUsageContext()
}

type ATUsageContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATUsageContext() *ATUsageContext {
	var p = new(ATUsageContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTUsage
	return p
}

func InitEmptyATUsageContext(p *ATUsageContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTUsage
}

func (*ATUsageContext) IsATUsageContext() {}

func NewATUsageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATUsageContext {
	var p = new(ATUsageContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTUsage

	return p
}

func (s *ATUsageContext) GetParser() antlr.Parser { return s.parser }

func (s *ATUsageContext) UserApplication() IUserApplicationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUserApplicationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUserApplicationContext)
}

func (s *ATUsageContext) DirectoryOperation() IDirectoryOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectoryOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectoryOperationContext)
}

func (s *ATUsageContext) DistributedOperation() IDistributedOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistributedOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistributedOperationContext)
}

func (s *ATUsageContext) DSAOperation() IDSAOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDSAOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDSAOperationContext)
}

func (s *ATUsageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATUsageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATUsageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATUsage(s)
	}
}

func (s *ATUsageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATUsage(s)
	}
}

func (p *RFC4512Parser) ATUsage() (localctx IATUsageContext) {
	localctx = NewATUsageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, RFC4512ParserRULE_aTUsage)
	p.SetState(800)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserT__14:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(796)
			p.UserApplication()
		}

	case RFC4512ParserT__15:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(797)
			p.DirectoryOperation()
		}

	case RFC4512ParserT__16:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(798)
			p.DistributedOperation()
		}

	case RFC4512ParserT__17:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(799)
			p.DSAOperation()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUserApplicationContext is an interface to support dynamic dispatch.
type IUserApplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsUserApplicationContext differentiates from other interfaces.
	IsUserApplicationContext()
}

type UserApplicationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserApplicationContext() *UserApplicationContext {
	var p = new(UserApplicationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_userApplication
	return p
}

func InitEmptyUserApplicationContext(p *UserApplicationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_userApplication
}

func (*UserApplicationContext) IsUserApplicationContext() {}

func NewUserApplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserApplicationContext {
	var p = new(UserApplicationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_userApplication

	return p
}

func (s *UserApplicationContext) GetParser() antlr.Parser { return s.parser }
func (s *UserApplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserApplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserApplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterUserApplication(s)
	}
}

func (s *UserApplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitUserApplication(s)
	}
}

func (p *RFC4512Parser) UserApplication() (localctx IUserApplicationContext) {
	localctx = NewUserApplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, RFC4512ParserRULE_userApplication)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(802)
		p.Match(RFC4512ParserT__14)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDirectoryOperationContext is an interface to support dynamic dispatch.
type IDirectoryOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDirectoryOperationContext differentiates from other interfaces.
	IsDirectoryOperationContext()
}

type DirectoryOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectoryOperationContext() *DirectoryOperationContext {
	var p = new(DirectoryOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_directoryOperation
	return p
}

func InitEmptyDirectoryOperationContext(p *DirectoryOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_directoryOperation
}

func (*DirectoryOperationContext) IsDirectoryOperationContext() {}

func NewDirectoryOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectoryOperationContext {
	var p = new(DirectoryOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_directoryOperation

	return p
}

func (s *DirectoryOperationContext) GetParser() antlr.Parser { return s.parser }
func (s *DirectoryOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectoryOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectoryOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDirectoryOperation(s)
	}
}

func (s *DirectoryOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDirectoryOperation(s)
	}
}

func (p *RFC4512Parser) DirectoryOperation() (localctx IDirectoryOperationContext) {
	localctx = NewDirectoryOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, RFC4512ParserRULE_directoryOperation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(804)
		p.Match(RFC4512ParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDistributedOperationContext is an interface to support dynamic dispatch.
type IDistributedOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDistributedOperationContext differentiates from other interfaces.
	IsDistributedOperationContext()
}

type DistributedOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDistributedOperationContext() *DistributedOperationContext {
	var p = new(DistributedOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_distributedOperation
	return p
}

func InitEmptyDistributedOperationContext(p *DistributedOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_distributedOperation
}

func (*DistributedOperationContext) IsDistributedOperationContext() {}

func NewDistributedOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistributedOperationContext {
	var p = new(DistributedOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_distributedOperation

	return p
}

func (s *DistributedOperationContext) GetParser() antlr.Parser { return s.parser }
func (s *DistributedOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistributedOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistributedOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDistributedOperation(s)
	}
}

func (s *DistributedOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDistributedOperation(s)
	}
}

func (p *RFC4512Parser) DistributedOperation() (localctx IDistributedOperationContext) {
	localctx = NewDistributedOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, RFC4512ParserRULE_distributedOperation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(806)
		p.Match(RFC4512ParserT__16)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDSAOperationContext is an interface to support dynamic dispatch.
type IDSAOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDSAOperationContext differentiates from other interfaces.
	IsDSAOperationContext()
}

type DSAOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDSAOperationContext() *DSAOperationContext {
	var p = new(DSAOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSAOperation
	return p
}

func InitEmptyDSAOperationContext(p *DSAOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSAOperation
}

func (*DSAOperationContext) IsDSAOperationContext() {}

func NewDSAOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DSAOperationContext {
	var p = new(DSAOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dSAOperation

	return p
}

func (s *DSAOperationContext) GetParser() antlr.Parser { return s.parser }
func (s *DSAOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DSAOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DSAOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDSAOperation(s)
	}
}

func (s *DSAOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDSAOperation(s)
	}
}

func (p *RFC4512Parser) DSAOperation() (localctx IDSAOperationContext) {
	localctx = NewDSAOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, RFC4512ParserRULE_dSAOperation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(808)
		p.Match(RFC4512ParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATSingleValueContext is an interface to support dynamic dispatch.
type IATSingleValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsATSingleValueContext differentiates from other interfaces.
	IsATSingleValueContext()
}

type ATSingleValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATSingleValueContext() *ATSingleValueContext {
	var p = new(ATSingleValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTSingleValue
	return p
}

func InitEmptyATSingleValueContext(p *ATSingleValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTSingleValue
}

func (*ATSingleValueContext) IsATSingleValueContext() {}

func NewATSingleValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATSingleValueContext {
	var p = new(ATSingleValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTSingleValue

	return p
}

func (s *ATSingleValueContext) GetParser() antlr.Parser { return s.parser }
func (s *ATSingleValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATSingleValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATSingleValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATSingleValue(s)
	}
}

func (s *ATSingleValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATSingleValue(s)
	}
}

func (p *RFC4512Parser) ATSingleValue() (localctx IATSingleValueContext) {
	localctx = NewATSingleValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, RFC4512ParserRULE_aTSingleValue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(810)
		p.Match(RFC4512ParserT__18)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATCollectiveContext is an interface to support dynamic dispatch.
type IATCollectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsATCollectiveContext differentiates from other interfaces.
	IsATCollectiveContext()
}

type ATCollectiveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATCollectiveContext() *ATCollectiveContext {
	var p = new(ATCollectiveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTCollective
	return p
}

func InitEmptyATCollectiveContext(p *ATCollectiveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTCollective
}

func (*ATCollectiveContext) IsATCollectiveContext() {}

func NewATCollectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATCollectiveContext {
	var p = new(ATCollectiveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTCollective

	return p
}

func (s *ATCollectiveContext) GetParser() antlr.Parser { return s.parser }
func (s *ATCollectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATCollectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATCollectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATCollective(s)
	}
}

func (s *ATCollectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATCollective(s)
	}
}

func (p *RFC4512Parser) ATCollective() (localctx IATCollectiveContext) {
	localctx = NewATCollectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, RFC4512ParserRULE_aTCollective)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(812)
		p.Match(RFC4512ParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IATNoUserModificationContext is an interface to support dynamic dispatch.
type IATNoUserModificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsATNoUserModificationContext differentiates from other interfaces.
	IsATNoUserModificationContext()
}

type ATNoUserModificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyATNoUserModificationContext() *ATNoUserModificationContext {
	var p = new(ATNoUserModificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTNoUserModification
	return p
}

func InitEmptyATNoUserModificationContext(p *ATNoUserModificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aTNoUserModification
}

func (*ATNoUserModificationContext) IsATNoUserModificationContext() {}

func NewATNoUserModificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ATNoUserModificationContext {
	var p = new(ATNoUserModificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aTNoUserModification

	return p
}

func (s *ATNoUserModificationContext) GetParser() antlr.Parser { return s.parser }
func (s *ATNoUserModificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ATNoUserModificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ATNoUserModificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterATNoUserModification(s)
	}
}

func (s *ATNoUserModificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitATNoUserModification(s)
	}
}

func (p *RFC4512Parser) ATNoUserModification() (localctx IATNoUserModificationContext) {
	localctx = NewATNoUserModificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, RFC4512ParserRULE_aTNoUserModification)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(814)
		p.Match(RFC4512ParserT__20)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleDescriptionsContext is an interface to support dynamic dispatch.
type IMatchingRuleDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMatchingRuleLabel() []IMatchingRuleLabelContext
	MatchingRuleLabel(i int) IMatchingRuleLabelContext
	AllMatchingRuleDescription() []IMatchingRuleDescriptionContext
	MatchingRuleDescription(i int) IMatchingRuleDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsMatchingRuleDescriptionsContext differentiates from other interfaces.
	IsMatchingRuleDescriptionsContext()
}

type MatchingRuleDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleDescriptionsContext() *MatchingRuleDescriptionsContext {
	var p = new(MatchingRuleDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescriptions
	return p
}

func InitEmptyMatchingRuleDescriptionsContext(p *MatchingRuleDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescriptions
}

func (*MatchingRuleDescriptionsContext) IsMatchingRuleDescriptionsContext() {}

func NewMatchingRuleDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleDescriptionsContext {
	var p = new(MatchingRuleDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescriptions

	return p
}

func (s *MatchingRuleDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleDescriptionsContext) AllMatchingRuleLabel() []IMatchingRuleLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleLabelContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleLabelContext); ok {
			tst[i] = t.(IMatchingRuleLabelContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleDescriptionsContext) MatchingRuleLabel(i int) IMatchingRuleLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleLabelContext)
}

func (s *MatchingRuleDescriptionsContext) AllMatchingRuleDescription() []IMatchingRuleDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleDescriptionContext); ok {
			tst[i] = t.(IMatchingRuleDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleDescriptionsContext) MatchingRuleDescription(i int) IMatchingRuleDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleDescriptionContext)
}

func (s *MatchingRuleDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *MatchingRuleDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *MatchingRuleDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleDescriptions(s)
	}
}

func (s *MatchingRuleDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleDescriptions(s)
	}
}

func (p *RFC4512Parser) MatchingRuleDescriptions() (localctx IMatchingRuleDescriptionsContext) {
	localctx = NewMatchingRuleDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, RFC4512ParserRULE_matchingRuleDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(826)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(816)
				p.MatchingRuleLabel()
			}
			{
				p.SetState(817)
				p.MatchingRuleDescription()
			}
			p.SetState(821)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(818)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(823)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(824)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(828)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleLabelContext is an interface to support dynamic dispatch.
type IMatchingRuleLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MRLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsMatchingRuleLabelContext differentiates from other interfaces.
	IsMatchingRuleLabelContext()
}

type MatchingRuleLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleLabelContext() *MatchingRuleLabelContext {
	var p = new(MatchingRuleLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleLabel
	return p
}

func InitEmptyMatchingRuleLabelContext(p *MatchingRuleLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleLabel
}

func (*MatchingRuleLabelContext) IsMatchingRuleLabelContext() {}

func NewMatchingRuleLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleLabelContext {
	var p = new(MatchingRuleLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleLabel

	return p
}

func (s *MatchingRuleLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleLabelContext) MRLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMRLabel, 0)
}

func (s *MatchingRuleLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *MatchingRuleLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleLabel(s)
	}
}

func (s *MatchingRuleLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleLabel(s)
	}
}

func (p *RFC4512Parser) MatchingRuleLabel() (localctx IMatchingRuleLabelContext) {
	localctx = NewMatchingRuleLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, RFC4512ParserRULE_matchingRuleLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(830)
		p.Match(RFC4512ParserMRLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(831)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleDescriptionContext is an interface to support dynamic dispatch.
type IMatchingRuleDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionName() IDefinitionNameContext
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionObsolete() IDefinitionObsoleteContext
	DefinitionSyntax() IDefinitionSyntaxContext
	DefinitionExtensions() IDefinitionExtensionsContext

	// IsMatchingRuleDescriptionContext differentiates from other interfaces.
	IsMatchingRuleDescriptionContext()
}

type MatchingRuleDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleDescriptionContext() *MatchingRuleDescriptionContext {
	var p = new(MatchingRuleDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescription
	return p
}

func InitEmptyMatchingRuleDescriptionContext(p *MatchingRuleDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescription
}

func (*MatchingRuleDescriptionContext) IsMatchingRuleDescriptionContext() {}

func NewMatchingRuleDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleDescriptionContext {
	var p = new(MatchingRuleDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescription

	return p
}

func (s *MatchingRuleDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *MatchingRuleDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *MatchingRuleDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *MatchingRuleDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *MatchingRuleDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *MatchingRuleDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleDescriptionContext) DefinitionName() IDefinitionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionNameContext)
}

func (s *MatchingRuleDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *MatchingRuleDescriptionContext) DefinitionObsolete() IDefinitionObsoleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionObsoleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionObsoleteContext)
}

func (s *MatchingRuleDescriptionContext) DefinitionSyntax() IDefinitionSyntaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionSyntaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionSyntaxContext)
}

func (s *MatchingRuleDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *MatchingRuleDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleDescription(s)
	}
}

func (s *MatchingRuleDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleDescription(s)
	}
}

func (p *RFC4512Parser) MatchingRuleDescription() (localctx IMatchingRuleDescriptionContext) {
	localctx = NewMatchingRuleDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, RFC4512ParserRULE_matchingRuleDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(833)
		p.OpenParen()
	}
	p.SetState(837)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(834)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(839)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(841)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(840)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(844)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(843)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(846)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(851)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(852)
		p.NumericOIDOrMacro()
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 151, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(853)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(858)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 151, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(860)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(859)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(863)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 153, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(862)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(889)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
		p.SetState(866)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(865)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(868)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(870)
			p.Match(RFC4512ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(872)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(871)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(874)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(876)
			p.DefinitionName()
		}
		p.SetState(880)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 156, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(877)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(882)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 156, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(884)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(883)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(887)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(886)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(915)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
		p.SetState(892)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(891)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(894)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(896)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(898)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(897)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(900)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(902)
			p.DefinitionDescription()
		}
		p.SetState(906)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 162, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(903)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(908)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 162, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(910)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(909)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(913)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(912)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext()) == 1 {
		p.SetState(918)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(917)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(920)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(922)
			p.DefinitionObsolete()
		}
		p.SetState(926)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 167, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(923)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(928)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 167, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(930)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 168, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(929)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(933)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 169, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(932)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(961)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		p.SetState(938)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(937)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(940)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(942)
			p.Match(RFC4512ParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(944)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(943)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(946)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(948)
			p.DefinitionSyntax()
		}
		p.SetState(952)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 173, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(949)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(954)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 173, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(956)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 174, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(955)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(959)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(958)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(964)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(963)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(969)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(966)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(971)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(973)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(972)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(976)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(975)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(981)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(978)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(983)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(985)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(984)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(987)
		p.CloseParen()
	}
	p.SetState(989)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(988)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleUseDescriptionsContext is an interface to support dynamic dispatch.
type IMatchingRuleUseDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMatchingRuleUseLabel() []IMatchingRuleUseLabelContext
	MatchingRuleUseLabel(i int) IMatchingRuleUseLabelContext
	AllMatchingRuleUseDescription() []IMatchingRuleUseDescriptionContext
	MatchingRuleUseDescription(i int) IMatchingRuleUseDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsMatchingRuleUseDescriptionsContext differentiates from other interfaces.
	IsMatchingRuleUseDescriptionsContext()
}

type MatchingRuleUseDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleUseDescriptionsContext() *MatchingRuleUseDescriptionsContext {
	var p = new(MatchingRuleUseDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescriptions
	return p
}

func InitEmptyMatchingRuleUseDescriptionsContext(p *MatchingRuleUseDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescriptions
}

func (*MatchingRuleUseDescriptionsContext) IsMatchingRuleUseDescriptionsContext() {}

func NewMatchingRuleUseDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleUseDescriptionsContext {
	var p = new(MatchingRuleUseDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescriptions

	return p
}

func (s *MatchingRuleUseDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleUseDescriptionsContext) AllMatchingRuleUseLabel() []IMatchingRuleUseLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleUseLabelContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleUseLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleUseLabelContext); ok {
			tst[i] = t.(IMatchingRuleUseLabelContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleUseDescriptionsContext) MatchingRuleUseLabel(i int) IMatchingRuleUseLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleUseLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleUseLabelContext)
}

func (s *MatchingRuleUseDescriptionsContext) AllMatchingRuleUseDescription() []IMatchingRuleUseDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleUseDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleUseDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleUseDescriptionContext); ok {
			tst[i] = t.(IMatchingRuleUseDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleUseDescriptionsContext) MatchingRuleUseDescription(i int) IMatchingRuleUseDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleUseDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleUseDescriptionContext)
}

func (s *MatchingRuleUseDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleUseDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleUseDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *MatchingRuleUseDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *MatchingRuleUseDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleUseDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleUseDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleUseDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleUseDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleUseDescriptions(s)
	}
}

func (s *MatchingRuleUseDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleUseDescriptions(s)
	}
}

func (p *RFC4512Parser) MatchingRuleUseDescriptions() (localctx IMatchingRuleUseDescriptionsContext) {
	localctx = NewMatchingRuleUseDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, RFC4512ParserRULE_matchingRuleUseDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(991)
				p.MatchingRuleUseLabel()
			}
			{
				p.SetState(992)
				p.MatchingRuleUseDescription()
			}
			p.SetState(996)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(993)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(998)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(999)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1003)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 185, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleUseLabelContext is an interface to support dynamic dispatch.
type IMatchingRuleUseLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MULabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsMatchingRuleUseLabelContext differentiates from other interfaces.
	IsMatchingRuleUseLabelContext()
}

type MatchingRuleUseLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleUseLabelContext() *MatchingRuleUseLabelContext {
	var p = new(MatchingRuleUseLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseLabel
	return p
}

func InitEmptyMatchingRuleUseLabelContext(p *MatchingRuleUseLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseLabel
}

func (*MatchingRuleUseLabelContext) IsMatchingRuleUseLabelContext() {}

func NewMatchingRuleUseLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleUseLabelContext {
	var p = new(MatchingRuleUseLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseLabel

	return p
}

func (s *MatchingRuleUseLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleUseLabelContext) MULabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMULabel, 0)
}

func (s *MatchingRuleUseLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *MatchingRuleUseLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleUseLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleUseLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleUseLabel(s)
	}
}

func (s *MatchingRuleUseLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleUseLabel(s)
	}
}

func (p *RFC4512Parser) MatchingRuleUseLabel() (localctx IMatchingRuleUseLabelContext) {
	localctx = NewMatchingRuleUseLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, RFC4512ParserRULE_matchingRuleUseLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1005)
		p.Match(RFC4512ParserMULabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1006)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleUseDescriptionContext is an interface to support dynamic dispatch.
type IMatchingRuleUseDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionName() IDefinitionNameContext
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionObsolete() IDefinitionObsoleteContext
	MRUApplies() IMRUAppliesContext
	DefinitionExtensions() IDefinitionExtensionsContext

	// IsMatchingRuleUseDescriptionContext differentiates from other interfaces.
	IsMatchingRuleUseDescriptionContext()
}

type MatchingRuleUseDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleUseDescriptionContext() *MatchingRuleUseDescriptionContext {
	var p = new(MatchingRuleUseDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescription
	return p
}

func InitEmptyMatchingRuleUseDescriptionContext(p *MatchingRuleUseDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescription
}

func (*MatchingRuleUseDescriptionContext) IsMatchingRuleUseDescriptionContext() {}

func NewMatchingRuleUseDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleUseDescriptionContext {
	var p = new(MatchingRuleUseDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescription

	return p
}

func (s *MatchingRuleUseDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleUseDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *MatchingRuleUseDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *MatchingRuleUseDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *MatchingRuleUseDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleUseDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleUseDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *MatchingRuleUseDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *MatchingRuleUseDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleUseDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleUseDescriptionContext) DefinitionName() IDefinitionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionNameContext)
}

func (s *MatchingRuleUseDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *MatchingRuleUseDescriptionContext) DefinitionObsolete() IDefinitionObsoleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionObsoleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionObsoleteContext)
}

func (s *MatchingRuleUseDescriptionContext) MRUApplies() IMRUAppliesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMRUAppliesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMRUAppliesContext)
}

func (s *MatchingRuleUseDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *MatchingRuleUseDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleUseDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleUseDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleUseDescription(s)
	}
}

func (s *MatchingRuleUseDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleUseDescription(s)
	}
}

func (p *RFC4512Parser) MatchingRuleUseDescription() (localctx IMatchingRuleUseDescriptionContext) {
	localctx = NewMatchingRuleUseDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, RFC4512ParserRULE_matchingRuleUseDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1008)
		p.OpenParen()
	}
	p.SetState(1012)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 186, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1009)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1014)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 186, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1016)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1015)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1019)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1018)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1024)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1021)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1026)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1027)
		p.NumericOIDOrMacro()
	}
	p.SetState(1031)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1028)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1033)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1035)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1034)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1038)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 192, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1037)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1064)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 198, p.GetParserRuleContext()) == 1 {
		p.SetState(1041)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1040)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1043)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1045)
			p.Match(RFC4512ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1047)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1046)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1049)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1051)
			p.DefinitionName()
		}
		p.SetState(1055)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 195, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1052)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1057)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 195, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1059)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1058)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1062)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1061)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1090)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
		p.SetState(1067)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1066)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1069)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1071)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1073)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1072)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1075)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1077)
			p.DefinitionDescription()
		}
		p.SetState(1081)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 201, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1078)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1083)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 201, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1085)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1084)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1087)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1110)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
		p.SetState(1093)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1092)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1095)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1097)
			p.DefinitionObsolete()
		}
		p.SetState(1101)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 206, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1098)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1103)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 206, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1105)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1104)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1108)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1107)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1136)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 215, p.GetParserRuleContext()) == 1 {
		p.SetState(1113)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1112)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1115)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1117)
			p.Match(RFC4512ParserT__21)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1119)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1118)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1121)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1123)
			p.MRUApplies()
		}
		p.SetState(1127)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 212, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1124)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1129)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 212, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1131)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 213, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1130)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1134)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1133)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 216, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1138)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1144)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 217, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1141)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1146)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 217, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1148)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1147)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1151)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1150)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1156)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1153)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1158)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1160)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1159)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1162)
		p.CloseParen()
	}
	p.SetState(1164)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1163)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMRUAppliesContext is an interface to support dynamic dispatch.
type IMRUAppliesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext

	// IsMRUAppliesContext differentiates from other interfaces.
	IsMRUAppliesContext()
}

type MRUAppliesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMRUAppliesContext() *MRUAppliesContext {
	var p = new(MRUAppliesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_mRUApplies
	return p
}

func InitEmptyMRUAppliesContext(p *MRUAppliesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_mRUApplies
}

func (*MRUAppliesContext) IsMRUAppliesContext() {}

func NewMRUAppliesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MRUAppliesContext {
	var p = new(MRUAppliesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_mRUApplies

	return p
}

func (s *MRUAppliesContext) GetParser() antlr.Parser { return s.parser }

func (s *MRUAppliesContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *MRUAppliesContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *MRUAppliesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MRUAppliesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MRUAppliesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMRUApplies(s)
	}
}

func (s *MRUAppliesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMRUApplies(s)
	}
}

func (p *RFC4512Parser) MRUApplies() (localctx IMRUAppliesContext) {
	localctx = NewMRUAppliesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, RFC4512ParserRULE_mRUApplies)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1168)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(1166)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(1167)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILDAPSyntaxDescriptionsContext is an interface to support dynamic dispatch.
type ILDAPSyntaxDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLDAPSyntaxLabel() []ILDAPSyntaxLabelContext
	LDAPSyntaxLabel(i int) ILDAPSyntaxLabelContext
	AllLDAPSyntaxDescription() []ILDAPSyntaxDescriptionContext
	LDAPSyntaxDescription(i int) ILDAPSyntaxDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsLDAPSyntaxDescriptionsContext differentiates from other interfaces.
	IsLDAPSyntaxDescriptionsContext()
}

type LDAPSyntaxDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLDAPSyntaxDescriptionsContext() *LDAPSyntaxDescriptionsContext {
	var p = new(LDAPSyntaxDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescriptions
	return p
}

func InitEmptyLDAPSyntaxDescriptionsContext(p *LDAPSyntaxDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescriptions
}

func (*LDAPSyntaxDescriptionsContext) IsLDAPSyntaxDescriptionsContext() {}

func NewLDAPSyntaxDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LDAPSyntaxDescriptionsContext {
	var p = new(LDAPSyntaxDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescriptions

	return p
}

func (s *LDAPSyntaxDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *LDAPSyntaxDescriptionsContext) AllLDAPSyntaxLabel() []ILDAPSyntaxLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILDAPSyntaxLabelContext); ok {
			len++
		}
	}

	tst := make([]ILDAPSyntaxLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILDAPSyntaxLabelContext); ok {
			tst[i] = t.(ILDAPSyntaxLabelContext)
			i++
		}
	}

	return tst
}

func (s *LDAPSyntaxDescriptionsContext) LDAPSyntaxLabel(i int) ILDAPSyntaxLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDAPSyntaxLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDAPSyntaxLabelContext)
}

func (s *LDAPSyntaxDescriptionsContext) AllLDAPSyntaxDescription() []ILDAPSyntaxDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILDAPSyntaxDescriptionContext); ok {
			len++
		}
	}

	tst := make([]ILDAPSyntaxDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILDAPSyntaxDescriptionContext); ok {
			tst[i] = t.(ILDAPSyntaxDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *LDAPSyntaxDescriptionsContext) LDAPSyntaxDescription(i int) ILDAPSyntaxDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDAPSyntaxDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDAPSyntaxDescriptionContext)
}

func (s *LDAPSyntaxDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *LDAPSyntaxDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *LDAPSyntaxDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *LDAPSyntaxDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *LDAPSyntaxDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *LDAPSyntaxDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *LDAPSyntaxDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LDAPSyntaxDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LDAPSyntaxDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterLDAPSyntaxDescriptions(s)
	}
}

func (s *LDAPSyntaxDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitLDAPSyntaxDescriptions(s)
	}
}

func (p *RFC4512Parser) LDAPSyntaxDescriptions() (localctx ILDAPSyntaxDescriptionsContext) {
	localctx = NewLDAPSyntaxDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, RFC4512ParserRULE_lDAPSyntaxDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1180)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1170)
				p.LDAPSyntaxLabel()
			}
			{
				p.SetState(1171)
				p.LDAPSyntaxDescription()
			}
			p.SetState(1175)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(1172)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(1177)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1178)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1182)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILDAPSyntaxLabelContext is an interface to support dynamic dispatch.
type ILDAPSyntaxLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LSLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsLDAPSyntaxLabelContext differentiates from other interfaces.
	IsLDAPSyntaxLabelContext()
}

type LDAPSyntaxLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLDAPSyntaxLabelContext() *LDAPSyntaxLabelContext {
	var p = new(LDAPSyntaxLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxLabel
	return p
}

func InitEmptyLDAPSyntaxLabelContext(p *LDAPSyntaxLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxLabel
}

func (*LDAPSyntaxLabelContext) IsLDAPSyntaxLabelContext() {}

func NewLDAPSyntaxLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LDAPSyntaxLabelContext {
	var p = new(LDAPSyntaxLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxLabel

	return p
}

func (s *LDAPSyntaxLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *LDAPSyntaxLabelContext) LSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLSLabel, 0)
}

func (s *LDAPSyntaxLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *LDAPSyntaxLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LDAPSyntaxLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LDAPSyntaxLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterLDAPSyntaxLabel(s)
	}
}

func (s *LDAPSyntaxLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitLDAPSyntaxLabel(s)
	}
}

func (p *RFC4512Parser) LDAPSyntaxLabel() (localctx ILDAPSyntaxLabelContext) {
	localctx = NewLDAPSyntaxLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, RFC4512ParserRULE_lDAPSyntaxLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1184)
		p.Match(RFC4512ParserLSLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1185)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILDAPSyntaxDescriptionContext is an interface to support dynamic dispatch.
type ILDAPSyntaxDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionExtensions() IDefinitionExtensionsContext

	// IsLDAPSyntaxDescriptionContext differentiates from other interfaces.
	IsLDAPSyntaxDescriptionContext()
}

type LDAPSyntaxDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLDAPSyntaxDescriptionContext() *LDAPSyntaxDescriptionContext {
	var p = new(LDAPSyntaxDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescription
	return p
}

func InitEmptyLDAPSyntaxDescriptionContext(p *LDAPSyntaxDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescription
}

func (*LDAPSyntaxDescriptionContext) IsLDAPSyntaxDescriptionContext() {}

func NewLDAPSyntaxDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LDAPSyntaxDescriptionContext {
	var p = new(LDAPSyntaxDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescription

	return p
}

func (s *LDAPSyntaxDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *LDAPSyntaxDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *LDAPSyntaxDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *LDAPSyntaxDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *LDAPSyntaxDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *LDAPSyntaxDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *LDAPSyntaxDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *LDAPSyntaxDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *LDAPSyntaxDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *LDAPSyntaxDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *LDAPSyntaxDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *LDAPSyntaxDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *LDAPSyntaxDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LDAPSyntaxDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LDAPSyntaxDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterLDAPSyntaxDescription(s)
	}
}

func (s *LDAPSyntaxDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitLDAPSyntaxDescription(s)
	}
}

func (p *RFC4512Parser) LDAPSyntaxDescription() (localctx ILDAPSyntaxDescriptionContext) {
	localctx = NewLDAPSyntaxDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, RFC4512ParserRULE_lDAPSyntaxDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1187)
		p.OpenParen()
	}
	p.SetState(1191)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 226, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1188)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1193)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 226, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1194)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1197)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1203)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1200)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1205)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1206)
		p.NumericOIDOrMacro()
	}
	p.SetState(1210)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 230, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1207)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1212)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 230, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1214)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1213)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1217)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 232, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1216)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1243)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
		p.SetState(1220)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1219)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1222)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1224)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1226)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1225)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1228)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1230)
			p.DefinitionDescription()
		}
		p.SetState(1234)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 235, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1231)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1236)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 235, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1238)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 236, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1237)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1241)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 237, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1240)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1246)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1245)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1251)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 240, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1248)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1253)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 240, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1255)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 241, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1254)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1258)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1257)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1263)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1260)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1265)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1267)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1266)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1269)
		p.CloseParen()
	}
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1270)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITContentRuleDescriptionsContext is an interface to support dynamic dispatch.
type IDITContentRuleDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDITContentRuleLabel() []IDITContentRuleLabelContext
	DITContentRuleLabel(i int) IDITContentRuleLabelContext
	AllDITContentRuleDescription() []IDITContentRuleDescriptionContext
	DITContentRuleDescription(i int) IDITContentRuleDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsDITContentRuleDescriptionsContext differentiates from other interfaces.
	IsDITContentRuleDescriptionsContext()
}

type DITContentRuleDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITContentRuleDescriptionsContext() *DITContentRuleDescriptionsContext {
	var p = new(DITContentRuleDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescriptions
	return p
}

func InitEmptyDITContentRuleDescriptionsContext(p *DITContentRuleDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescriptions
}

func (*DITContentRuleDescriptionsContext) IsDITContentRuleDescriptionsContext() {}

func NewDITContentRuleDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITContentRuleDescriptionsContext {
	var p = new(DITContentRuleDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescriptions

	return p
}

func (s *DITContentRuleDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *DITContentRuleDescriptionsContext) AllDITContentRuleLabel() []IDITContentRuleLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITContentRuleLabelContext); ok {
			len++
		}
	}

	tst := make([]IDITContentRuleLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITContentRuleLabelContext); ok {
			tst[i] = t.(IDITContentRuleLabelContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionsContext) DITContentRuleLabel(i int) IDITContentRuleLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITContentRuleLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITContentRuleLabelContext)
}

func (s *DITContentRuleDescriptionsContext) AllDITContentRuleDescription() []IDITContentRuleDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITContentRuleDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDITContentRuleDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITContentRuleDescriptionContext); ok {
			tst[i] = t.(IDITContentRuleDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionsContext) DITContentRuleDescription(i int) IDITContentRuleDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITContentRuleDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITContentRuleDescriptionContext)
}

func (s *DITContentRuleDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITContentRuleDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITContentRuleDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *DITContentRuleDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *DITContentRuleDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITContentRuleDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITContentRuleDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITContentRuleDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITContentRuleDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITContentRuleDescriptions(s)
	}
}

func (s *DITContentRuleDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITContentRuleDescriptions(s)
	}
}

func (p *RFC4512Parser) DITContentRuleDescriptions() (localctx IDITContentRuleDescriptionsContext) {
	localctx = NewDITContentRuleDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, RFC4512ParserRULE_dITContentRuleDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1283)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1273)
				p.DITContentRuleLabel()
			}
			{
				p.SetState(1274)
				p.DITContentRuleDescription()
			}
			p.SetState(1278)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(1275)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(1280)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1281)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1285)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 247, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITContentRuleLabelContext is an interface to support dynamic dispatch.
type IDITContentRuleLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DCLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsDITContentRuleLabelContext differentiates from other interfaces.
	IsDITContentRuleLabelContext()
}

type DITContentRuleLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITContentRuleLabelContext() *DITContentRuleLabelContext {
	var p = new(DITContentRuleLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleLabel
	return p
}

func InitEmptyDITContentRuleLabelContext(p *DITContentRuleLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleLabel
}

func (*DITContentRuleLabelContext) IsDITContentRuleLabelContext() {}

func NewDITContentRuleLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITContentRuleLabelContext {
	var p = new(DITContentRuleLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleLabel

	return p
}

func (s *DITContentRuleLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *DITContentRuleLabelContext) DCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDCLabel, 0)
}

func (s *DITContentRuleLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *DITContentRuleLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITContentRuleLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITContentRuleLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITContentRuleLabel(s)
	}
}

func (s *DITContentRuleLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITContentRuleLabel(s)
	}
}

func (p *RFC4512Parser) DITContentRuleLabel() (localctx IDITContentRuleLabelContext) {
	localctx = NewDITContentRuleLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, RFC4512ParserRULE_dITContentRuleLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1287)
		p.Match(RFC4512ParserDCLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1288)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITContentRuleDescriptionContext is an interface to support dynamic dispatch.
type IDITContentRuleDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionName() IDefinitionNameContext
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionObsolete() IDefinitionObsoleteContext
	DCRAux() IDCRAuxContext
	DefinitionMust() IDefinitionMustContext
	DefinitionMay() IDefinitionMayContext
	DCRNot() IDCRNotContext
	DefinitionExtensions() IDefinitionExtensionsContext

	// IsDITContentRuleDescriptionContext differentiates from other interfaces.
	IsDITContentRuleDescriptionContext()
}

type DITContentRuleDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITContentRuleDescriptionContext() *DITContentRuleDescriptionContext {
	var p = new(DITContentRuleDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescription
	return p
}

func InitEmptyDITContentRuleDescriptionContext(p *DITContentRuleDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescription
}

func (*DITContentRuleDescriptionContext) IsDITContentRuleDescriptionContext() {}

func NewDITContentRuleDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITContentRuleDescriptionContext {
	var p = new(DITContentRuleDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescription

	return p
}

func (s *DITContentRuleDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DITContentRuleDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *DITContentRuleDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *DITContentRuleDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *DITContentRuleDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITContentRuleDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITContentRuleDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DITContentRuleDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DITContentRuleDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITContentRuleDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITContentRuleDescriptionContext) DefinitionName() IDefinitionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionNameContext)
}

func (s *DITContentRuleDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *DITContentRuleDescriptionContext) DefinitionObsolete() IDefinitionObsoleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionObsoleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionObsoleteContext)
}

func (s *DITContentRuleDescriptionContext) DCRAux() IDCRAuxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDCRAuxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDCRAuxContext)
}

func (s *DITContentRuleDescriptionContext) DefinitionMust() IDefinitionMustContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionMustContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionMustContext)
}

func (s *DITContentRuleDescriptionContext) DefinitionMay() IDefinitionMayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionMayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionMayContext)
}

func (s *DITContentRuleDescriptionContext) DCRNot() IDCRNotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDCRNotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDCRNotContext)
}

func (s *DITContentRuleDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *DITContentRuleDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITContentRuleDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITContentRuleDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITContentRuleDescription(s)
	}
}

func (s *DITContentRuleDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITContentRuleDescription(s)
	}
}

func (p *RFC4512Parser) DITContentRuleDescription() (localctx IDITContentRuleDescriptionContext) {
	localctx = NewDITContentRuleDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, RFC4512ParserRULE_dITContentRuleDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1290)
		p.OpenParen()
	}
	p.SetState(1294)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 248, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1291)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1296)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 248, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1298)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1297)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1301)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1300)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1303)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1308)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1309)
		p.NumericOIDOrMacro()
	}
	p.SetState(1313)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 252, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1310)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1315)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 252, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1317)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 253, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1316)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1320)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1319)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1346)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 260, p.GetParserRuleContext()) == 1 {
		p.SetState(1323)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1322)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1325)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1327)
			p.Match(RFC4512ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1329)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1328)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1331)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1333)
			p.DefinitionName()
		}
		p.SetState(1337)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 257, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1334)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1339)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 257, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1341)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 258, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1340)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1344)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 259, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1343)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1372)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 266, p.GetParserRuleContext()) == 1 {
		p.SetState(1349)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1348)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1351)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1353)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1355)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1354)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1357)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1359)
			p.DefinitionDescription()
		}
		p.SetState(1363)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 263, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1360)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1365)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 263, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1367)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1366)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1370)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1369)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1392)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 271, p.GetParserRuleContext()) == 1 {
		p.SetState(1375)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1374)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1377)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1379)
			p.DefinitionObsolete()
		}
		p.SetState(1383)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 268, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1380)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1385)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 268, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1387)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 269, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1386)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1390)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 270, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1389)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1418)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 277, p.GetParserRuleContext()) == 1 {
		p.SetState(1395)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1394)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1397)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1399)
			p.Match(RFC4512ParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1401)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1400)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1403)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1405)
			p.DCRAux()
		}
		p.SetState(1409)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 274, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1406)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1411)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 274, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1413)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 275, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1412)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1416)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 276, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1415)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1444)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 283, p.GetParserRuleContext()) == 1 {
		p.SetState(1421)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1420)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1423)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1425)
			p.Match(RFC4512ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1427)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1426)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1429)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1431)
			p.DefinitionMust()
		}
		p.SetState(1435)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 280, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1432)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1437)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 280, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1439)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 281, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1438)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1442)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 282, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1441)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1470)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 289, p.GetParserRuleContext()) == 1 {
		p.SetState(1447)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1446)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1449)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1451)
			p.Match(RFC4512ParserT__4)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1453)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1452)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1455)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1457)
			p.DefinitionMay()
		}
		p.SetState(1461)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 286, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1458)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1463)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 286, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1465)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 287, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1464)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1468)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 288, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1467)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1496)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 295, p.GetParserRuleContext()) == 1 {
		p.SetState(1473)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1472)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1475)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1477)
			p.Match(RFC4512ParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1479)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1478)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1481)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1483)
			p.DCRNot()
		}
		p.SetState(1487)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 292, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1484)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1489)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 292, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1491)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 293, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1490)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1494)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 294, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1493)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1499)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 296, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1498)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1504)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 297, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1501)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1506)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 297, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1508)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 298, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1507)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1511)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1510)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1516)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1513)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1518)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1520)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1519)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1522)
		p.CloseParen()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDCRNotContext is an interface to support dynamic dispatch.
type IDCRNotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext

	// IsDCRNotContext differentiates from other interfaces.
	IsDCRNotContext()
}

type DCRNotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDCRNotContext() *DCRNotContext {
	var p = new(DCRNotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dCRNot
	return p
}

func InitEmptyDCRNotContext(p *DCRNotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dCRNot
}

func (*DCRNotContext) IsDCRNotContext() {}

func NewDCRNotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DCRNotContext {
	var p = new(DCRNotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dCRNot

	return p
}

func (s *DCRNotContext) GetParser() antlr.Parser { return s.parser }

func (s *DCRNotContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *DCRNotContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *DCRNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DCRNotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DCRNotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDCRNot(s)
	}
}

func (s *DCRNotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDCRNot(s)
	}
}

func (p *RFC4512Parser) DCRNot() (localctx IDCRNotContext) {
	localctx = NewDCRNotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, RFC4512ParserRULE_dCRNot)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1526)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(1524)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(1525)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDCRAuxContext is an interface to support dynamic dispatch.
type IDCRAuxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext

	// IsDCRAuxContext differentiates from other interfaces.
	IsDCRAuxContext()
}

type DCRAuxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDCRAuxContext() *DCRAuxContext {
	var p = new(DCRAuxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dCRAux
	return p
}

func InitEmptyDCRAuxContext(p *DCRAuxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dCRAux
}

func (*DCRAuxContext) IsDCRAuxContext() {}

func NewDCRAuxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DCRAuxContext {
	var p = new(DCRAuxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dCRAux

	return p
}

func (s *DCRAuxContext) GetParser() antlr.Parser { return s.parser }

func (s *DCRAuxContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *DCRAuxContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *DCRAuxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DCRAuxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DCRAuxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDCRAux(s)
	}
}

func (s *DCRAuxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDCRAux(s)
	}
}

func (p *RFC4512Parser) DCRAux() (localctx IDCRAuxContext) {
	localctx = NewDCRAuxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, RFC4512ParserRULE_dCRAux)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(1528)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(1529)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITStructureRuleDescriptionsContext is an interface to support dynamic dispatch.
type IDITStructureRuleDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDITStructureRuleLabel() []IDITStructureRuleLabelContext
	DITStructureRuleLabel(i int) IDITStructureRuleLabelContext
	AllDITStructureRuleDescription() []IDITStructureRuleDescriptionContext
	DITStructureRuleDescription(i int) IDITStructureRuleDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsDITStructureRuleDescriptionsContext differentiates from other interfaces.
	IsDITStructureRuleDescriptionsContext()
}

type DITStructureRuleDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITStructureRuleDescriptionsContext() *DITStructureRuleDescriptionsContext {
	var p = new(DITStructureRuleDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescriptions
	return p
}

func InitEmptyDITStructureRuleDescriptionsContext(p *DITStructureRuleDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescriptions
}

func (*DITStructureRuleDescriptionsContext) IsDITStructureRuleDescriptionsContext() {}

func NewDITStructureRuleDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITStructureRuleDescriptionsContext {
	var p = new(DITStructureRuleDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescriptions

	return p
}

func (s *DITStructureRuleDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *DITStructureRuleDescriptionsContext) AllDITStructureRuleLabel() []IDITStructureRuleLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITStructureRuleLabelContext); ok {
			len++
		}
	}

	tst := make([]IDITStructureRuleLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITStructureRuleLabelContext); ok {
			tst[i] = t.(IDITStructureRuleLabelContext)
			i++
		}
	}

	return tst
}

func (s *DITStructureRuleDescriptionsContext) DITStructureRuleLabel(i int) IDITStructureRuleLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITStructureRuleLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITStructureRuleLabelContext)
}

func (s *DITStructureRuleDescriptionsContext) AllDITStructureRuleDescription() []IDITStructureRuleDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITStructureRuleDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDITStructureRuleDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITStructureRuleDescriptionContext); ok {
			tst[i] = t.(IDITStructureRuleDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *DITStructureRuleDescriptionsContext) DITStructureRuleDescription(i int) IDITStructureRuleDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITStructureRuleDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITStructureRuleDescriptionContext)
}

func (s *DITStructureRuleDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITStructureRuleDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITStructureRuleDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *DITStructureRuleDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *DITStructureRuleDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITStructureRuleDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITStructureRuleDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITStructureRuleDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITStructureRuleDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITStructureRuleDescriptions(s)
	}
}

func (s *DITStructureRuleDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITStructureRuleDescriptions(s)
	}
}

func (p *RFC4512Parser) DITStructureRuleDescriptions() (localctx IDITStructureRuleDescriptionsContext) {
	localctx = NewDITStructureRuleDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, RFC4512ParserRULE_dITStructureRuleDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1542)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1532)
				p.DITStructureRuleLabel()
			}
			{
				p.SetState(1533)
				p.DITStructureRuleDescription()
			}
			p.SetState(1537)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(1534)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(1539)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1540)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1544)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 305, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITStructureRuleLabelContext is an interface to support dynamic dispatch.
type IDITStructureRuleLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DSLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsDITStructureRuleLabelContext differentiates from other interfaces.
	IsDITStructureRuleLabelContext()
}

type DITStructureRuleLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITStructureRuleLabelContext() *DITStructureRuleLabelContext {
	var p = new(DITStructureRuleLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleLabel
	return p
}

func InitEmptyDITStructureRuleLabelContext(p *DITStructureRuleLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleLabel
}

func (*DITStructureRuleLabelContext) IsDITStructureRuleLabelContext() {}

func NewDITStructureRuleLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITStructureRuleLabelContext {
	var p = new(DITStructureRuleLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleLabel

	return p
}

func (s *DITStructureRuleLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *DITStructureRuleLabelContext) DSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDSLabel, 0)
}

func (s *DITStructureRuleLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *DITStructureRuleLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITStructureRuleLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITStructureRuleLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITStructureRuleLabel(s)
	}
}

func (s *DITStructureRuleLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITStructureRuleLabel(s)
	}
}

func (p *RFC4512Parser) DITStructureRuleLabel() (localctx IDITStructureRuleLabelContext) {
	localctx = NewDITStructureRuleLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, RFC4512ParserRULE_dITStructureRuleLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1546)
		p.Match(RFC4512ParserDSLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1547)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITStructureRuleDescriptionContext is an interface to support dynamic dispatch.
type IDITStructureRuleDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	StructureRule() IStructureRuleContext
	DSRForm() IDSRFormContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionName() IDefinitionNameContext
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionObsolete() IDefinitionObsoleteContext
	DSRSuperRules() IDSRSuperRulesContext
	DefinitionExtensions() IDefinitionExtensionsContext

	// IsDITStructureRuleDescriptionContext differentiates from other interfaces.
	IsDITStructureRuleDescriptionContext()
}

type DITStructureRuleDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITStructureRuleDescriptionContext() *DITStructureRuleDescriptionContext {
	var p = new(DITStructureRuleDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescription
	return p
}

func InitEmptyDITStructureRuleDescriptionContext(p *DITStructureRuleDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescription
}

func (*DITStructureRuleDescriptionContext) IsDITStructureRuleDescriptionContext() {}

func NewDITStructureRuleDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITStructureRuleDescriptionContext {
	var p = new(DITStructureRuleDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescription

	return p
}

func (s *DITStructureRuleDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DITStructureRuleDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *DITStructureRuleDescriptionContext) StructureRule() IStructureRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRuleContext)
}

func (s *DITStructureRuleDescriptionContext) DSRForm() IDSRFormContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDSRFormContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDSRFormContext)
}

func (s *DITStructureRuleDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *DITStructureRuleDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITStructureRuleDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITStructureRuleDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DITStructureRuleDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DITStructureRuleDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITStructureRuleDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITStructureRuleDescriptionContext) DefinitionName() IDefinitionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionNameContext)
}

func (s *DITStructureRuleDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *DITStructureRuleDescriptionContext) DefinitionObsolete() IDefinitionObsoleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionObsoleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionObsoleteContext)
}

func (s *DITStructureRuleDescriptionContext) DSRSuperRules() IDSRSuperRulesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDSRSuperRulesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDSRSuperRulesContext)
}

func (s *DITStructureRuleDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *DITStructureRuleDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITStructureRuleDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITStructureRuleDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITStructureRuleDescription(s)
	}
}

func (s *DITStructureRuleDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITStructureRuleDescription(s)
	}
}

func (p *RFC4512Parser) DITStructureRuleDescription() (localctx IDITStructureRuleDescriptionContext) {
	localctx = NewDITStructureRuleDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, RFC4512ParserRULE_dITStructureRuleDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1549)
		p.OpenParen()
	}
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 306, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1550)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1555)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 306, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1557)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1556)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1560)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1559)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1565)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1562)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1567)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1568)
		p.StructureRule()
	}
	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 310, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1569)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1574)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 310, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1576)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1575)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1578)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1605)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 318, p.GetParserRuleContext()) == 1 {
		p.SetState(1582)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1581)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1584)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1586)
			p.Match(RFC4512ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1588)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1587)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1590)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1592)
			p.DefinitionName()
		}
		p.SetState(1596)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 315, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1593)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1598)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 315, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1600)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1599)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1603)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(1602)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1631)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 324, p.GetParserRuleContext()) == 1 {
		p.SetState(1608)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1607)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1610)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1612)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1614)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1613)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1616)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1618)
			p.DefinitionDescription()
		}
		p.SetState(1622)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 321, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1619)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1624)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 321, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1626)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1625)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1629)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(1628)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1651)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 329, p.GetParserRuleContext()) == 1 {
		p.SetState(1634)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1633)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1636)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1638)
			p.DefinitionObsolete()
		}
		p.SetState(1642)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 326, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1639)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1644)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 326, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1646)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1645)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1649)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(1648)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1654)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(1653)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1656)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1658)
		p.Match(RFC4512ParserT__24)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1660)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(1659)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1662)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1664)
		p.DSRForm()
	}
	p.SetState(1668)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 332, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1665)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1670)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 332, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1672)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 333, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1671)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1675)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 334, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1674)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1701)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 340, p.GetParserRuleContext()) == 1 {
		p.SetState(1678)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1677)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1680)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1682)
			p.Match(RFC4512ParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1684)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1683)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1686)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1688)
			p.DSRSuperRules()
		}
		p.SetState(1692)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 337, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1689)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1694)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 337, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1696)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 338, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1695)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1699)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 339, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1698)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1704)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 341, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1703)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1709)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 342, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1706)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1711)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 342, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1713)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 343, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1712)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1716)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1715)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1721)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1718)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1723)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1725)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1724)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1727)
		p.CloseParen()
	}
	p.SetState(1729)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1728)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructureRulesContext is an interface to support dynamic dispatch.
type IStructureRulesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	AllStructureRule() []IStructureRuleContext
	StructureRule(i int) IStructureRuleContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode

	// IsStructureRulesContext differentiates from other interfaces.
	IsStructureRulesContext()
}

type StructureRulesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructureRulesContext() *StructureRulesContext {
	var p = new(StructureRulesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRules
	return p
}

func InitEmptyStructureRulesContext(p *StructureRulesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRules
}

func (*StructureRulesContext) IsStructureRulesContext() {}

func NewStructureRulesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructureRulesContext {
	var p = new(StructureRulesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_structureRules

	return p
}

func (s *StructureRulesContext) GetParser() antlr.Parser { return s.parser }

func (s *StructureRulesContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *StructureRulesContext) AllStructureRule() []IStructureRuleContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStructureRuleContext); ok {
			len++
		}
	}

	tst := make([]IStructureRuleContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStructureRuleContext); ok {
			tst[i] = t.(IStructureRuleContext)
			i++
		}
	}

	return tst
}

func (s *StructureRulesContext) StructureRule(i int) IStructureRuleContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRuleContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRuleContext)
}

func (s *StructureRulesContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *StructureRulesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *StructureRulesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *StructureRulesContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *StructureRulesContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *StructureRulesContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *StructureRulesContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *StructureRulesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructureRulesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructureRulesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterStructureRules(s)
	}
}

func (s *StructureRulesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitStructureRules(s)
	}
}

func (p *RFC4512Parser) StructureRules() (localctx IStructureRulesContext) {
	localctx = NewStructureRulesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, RFC4512ParserRULE_structureRules)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1731)
		p.OpenParen()
	}
	p.SetState(1735)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 348, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1732)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1737)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 348, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1739)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 349, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1738)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1742)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1741)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1747)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1744)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1749)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1751)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1750)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1753)
		p.StructureRule()
	}
	p.SetState(1757)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 353, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1754)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1759)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 353, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1761)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 354, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1760)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1764)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 355, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1763)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1774)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 357, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1767)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == RFC4512ParserSP {
				{
					p.SetState(1766)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(1769)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1771)
				p.StructureRule()
			}

		}
		p.SetState(1776)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 357, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1780)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 358, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1777)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1782)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 358, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1784)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1783)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1787)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1786)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1792)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1789)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1794)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1795)
		p.CloseParen()
	}
	p.SetState(1799)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 362, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1796)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1801)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 362, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1803)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 363, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1802)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDSRSuperRulesContext is an interface to support dynamic dispatch.
type IDSRSuperRulesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StructureRule() IStructureRuleContext
	StructureRules() IStructureRulesContext

	// IsDSRSuperRulesContext differentiates from other interfaces.
	IsDSRSuperRulesContext()
}

type DSRSuperRulesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDSRSuperRulesContext() *DSRSuperRulesContext {
	var p = new(DSRSuperRulesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSRSuperRules
	return p
}

func InitEmptyDSRSuperRulesContext(p *DSRSuperRulesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSRSuperRules
}

func (*DSRSuperRulesContext) IsDSRSuperRulesContext() {}

func NewDSRSuperRulesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DSRSuperRulesContext {
	var p = new(DSRSuperRulesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dSRSuperRules

	return p
}

func (s *DSRSuperRulesContext) GetParser() antlr.Parser { return s.parser }

func (s *DSRSuperRulesContext) StructureRule() IStructureRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRuleContext)
}

func (s *DSRSuperRulesContext) StructureRules() IStructureRulesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRulesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRulesContext)
}

func (s *DSRSuperRulesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DSRSuperRulesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DSRSuperRulesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDSRSuperRules(s)
	}
}

func (s *DSRSuperRulesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDSRSuperRules(s)
	}
}

func (p *RFC4512Parser) DSRSuperRules() (localctx IDSRSuperRulesContext) {
	localctx = NewDSRSuperRulesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, RFC4512ParserRULE_dSRSuperRules)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1807)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserDigit:
		{
			p.SetState(1805)
			p.StructureRule()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(1806)
			p.StructureRules()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructureRuleContext is an interface to support dynamic dispatch.
type IStructureRuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsStructureRuleContext differentiates from other interfaces.
	IsStructureRuleContext()
}

type StructureRuleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructureRuleContext() *StructureRuleContext {
	var p = new(StructureRuleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRule
	return p
}

func InitEmptyStructureRuleContext(p *StructureRuleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRule
}

func (*StructureRuleContext) IsStructureRuleContext() {}

func NewStructureRuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructureRuleContext {
	var p = new(StructureRuleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_structureRule

	return p
}

func (s *StructureRuleContext) GetParser() antlr.Parser { return s.parser }

func (s *StructureRuleContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *StructureRuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructureRuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructureRuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterStructureRule(s)
	}
}

func (s *StructureRuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitStructureRule(s)
	}
}

func (p *RFC4512Parser) StructureRule() (localctx IStructureRuleContext) {
	localctx = NewStructureRuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, RFC4512ParserRULE_structureRule)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1809)
		p.Number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDSRFormContext is an interface to support dynamic dispatch.
type IDSRFormContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext

	// IsDSRFormContext differentiates from other interfaces.
	IsDSRFormContext()
}

type DSRFormContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDSRFormContext() *DSRFormContext {
	var p = new(DSRFormContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSRForm
	return p
}

func InitEmptyDSRFormContext(p *DSRFormContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSRForm
}

func (*DSRFormContext) IsDSRFormContext() {}

func NewDSRFormContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DSRFormContext {
	var p = new(DSRFormContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dSRForm

	return p
}

func (s *DSRFormContext) GetParser() antlr.Parser { return s.parser }

func (s *DSRFormContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *DSRFormContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DSRFormContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DSRFormContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDSRForm(s)
	}
}

func (s *DSRFormContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDSRForm(s)
	}
}

func (p *RFC4512Parser) DSRForm() (localctx IDSRFormContext) {
	localctx = NewDSRFormContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, RFC4512ParserRULE_dSRForm)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1811)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameFormDescriptionsContext is an interface to support dynamic dispatch.
type INameFormDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNameFormLabel() []INameFormLabelContext
	NameFormLabel(i int) INameFormLabelContext
	AllNameFormDescription() []INameFormDescriptionContext
	NameFormDescription(i int) INameFormDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsNameFormDescriptionsContext differentiates from other interfaces.
	IsNameFormDescriptionsContext()
}

type NameFormDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameFormDescriptionsContext() *NameFormDescriptionsContext {
	var p = new(NameFormDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescriptions
	return p
}

func InitEmptyNameFormDescriptionsContext(p *NameFormDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescriptions
}

func (*NameFormDescriptionsContext) IsNameFormDescriptionsContext() {}

func NewNameFormDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameFormDescriptionsContext {
	var p = new(NameFormDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_nameFormDescriptions

	return p
}

func (s *NameFormDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *NameFormDescriptionsContext) AllNameFormLabel() []INameFormLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameFormLabelContext); ok {
			len++
		}
	}

	tst := make([]INameFormLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameFormLabelContext); ok {
			tst[i] = t.(INameFormLabelContext)
			i++
		}
	}

	return tst
}

func (s *NameFormDescriptionsContext) NameFormLabel(i int) INameFormLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameFormLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameFormLabelContext)
}

func (s *NameFormDescriptionsContext) AllNameFormDescription() []INameFormDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameFormDescriptionContext); ok {
			len++
		}
	}

	tst := make([]INameFormDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameFormDescriptionContext); ok {
			tst[i] = t.(INameFormDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *NameFormDescriptionsContext) NameFormDescription(i int) INameFormDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameFormDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameFormDescriptionContext)
}

func (s *NameFormDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *NameFormDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *NameFormDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *NameFormDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *NameFormDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *NameFormDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *NameFormDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameFormDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameFormDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNameFormDescriptions(s)
	}
}

func (s *NameFormDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNameFormDescriptions(s)
	}
}

func (p *RFC4512Parser) NameFormDescriptions() (localctx INameFormDescriptionsContext) {
	localctx = NewNameFormDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, RFC4512ParserRULE_nameFormDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1823)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1813)
				p.NameFormLabel()
			}
			{
				p.SetState(1814)
				p.NameFormDescription()
			}
			p.SetState(1818)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(1815)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(1820)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1821)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1825)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 366, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameFormLabelContext is an interface to support dynamic dispatch.
type INameFormLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NFLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsNameFormLabelContext differentiates from other interfaces.
	IsNameFormLabelContext()
}

type NameFormLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameFormLabelContext() *NameFormLabelContext {
	var p = new(NameFormLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormLabel
	return p
}

func InitEmptyNameFormLabelContext(p *NameFormLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormLabel
}

func (*NameFormLabelContext) IsNameFormLabelContext() {}

func NewNameFormLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameFormLabelContext {
	var p = new(NameFormLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_nameFormLabel

	return p
}

func (s *NameFormLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *NameFormLabelContext) NFLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNFLabel, 0)
}

func (s *NameFormLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *NameFormLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameFormLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameFormLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNameFormLabel(s)
	}
}

func (s *NameFormLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNameFormLabel(s)
	}
}

func (p *RFC4512Parser) NameFormLabel() (localctx INameFormLabelContext) {
	localctx = NewNameFormLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, RFC4512ParserRULE_nameFormLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1827)
		p.Match(RFC4512ParserNFLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1828)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameFormDescriptionContext is an interface to support dynamic dispatch.
type INameFormDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	NFStructuralOC() INFStructuralOCContext
	DefinitionMust() IDefinitionMustContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	DefinitionName() IDefinitionNameContext
	DefinitionDescription() IDefinitionDescriptionContext
	DefinitionObsolete() IDefinitionObsoleteContext
	DefinitionMay() IDefinitionMayContext
	DefinitionExtensions() IDefinitionExtensionsContext

	// IsNameFormDescriptionContext differentiates from other interfaces.
	IsNameFormDescriptionContext()
}

type NameFormDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameFormDescriptionContext() *NameFormDescriptionContext {
	var p = new(NameFormDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescription
	return p
}

func InitEmptyNameFormDescriptionContext(p *NameFormDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescription
}

func (*NameFormDescriptionContext) IsNameFormDescriptionContext() {}

func NewNameFormDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameFormDescriptionContext {
	var p = new(NameFormDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_nameFormDescription

	return p
}

func (s *NameFormDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *NameFormDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *NameFormDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *NameFormDescriptionContext) NFStructuralOC() INFStructuralOCContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INFStructuralOCContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INFStructuralOCContext)
}

func (s *NameFormDescriptionContext) DefinitionMust() IDefinitionMustContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionMustContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionMustContext)
}

func (s *NameFormDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *NameFormDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *NameFormDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *NameFormDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *NameFormDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *NameFormDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *NameFormDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *NameFormDescriptionContext) DefinitionName() IDefinitionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionNameContext)
}

func (s *NameFormDescriptionContext) DefinitionDescription() IDefinitionDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionDescriptionContext)
}

func (s *NameFormDescriptionContext) DefinitionObsolete() IDefinitionObsoleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionObsoleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionObsoleteContext)
}

func (s *NameFormDescriptionContext) DefinitionMay() IDefinitionMayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionMayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionMayContext)
}

func (s *NameFormDescriptionContext) DefinitionExtensions() IDefinitionExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionsContext)
}

func (s *NameFormDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameFormDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameFormDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNameFormDescription(s)
	}
}

func (s *NameFormDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNameFormDescription(s)
	}
}

func (p *RFC4512Parser) NameFormDescription() (localctx INameFormDescriptionContext) {
	localctx = NewNameFormDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, RFC4512ParserRULE_nameFormDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1830)
		p.OpenParen()
	}
	p.SetState(1834)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 367, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1831)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1836)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 367, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1838)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1837)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1841)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1840)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1846)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1843)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1848)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1849)
		p.NumericOIDOrMacro()
	}
	p.SetState(1853)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 371, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1850)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1855)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 371, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1857)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1856)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1860)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1859)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1886)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 379, p.GetParserRuleContext()) == 1 {
		p.SetState(1863)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1862)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1865)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1867)
			p.Match(RFC4512ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1869)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1868)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1871)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1873)
			p.DefinitionName()
		}
		p.SetState(1877)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 376, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1874)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1879)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 376, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1881)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1880)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1884)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(1883)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1912)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 385, p.GetParserRuleContext()) == 1 {
		p.SetState(1889)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1888)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1891)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1893)
			p.Match(RFC4512ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1895)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1894)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1897)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1899)
			p.DefinitionDescription()
		}
		p.SetState(1903)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 382, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1900)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1905)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 382, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1907)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1906)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1910)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(1909)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1932)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 390, p.GetParserRuleContext()) == 1 {
		p.SetState(1915)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1914)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1917)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1919)
			p.DefinitionObsolete()
		}
		p.SetState(1923)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 387, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1920)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1925)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 387, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1927)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1926)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1930)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(1929)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1935)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(1934)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1937)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1939)
		p.Match(RFC4512ParserT__25)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1941)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(1940)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1943)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1945)
		p.NFStructuralOC()
	}
	p.SetState(1949)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 393, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1946)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1951)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 393, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1953)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1952)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1956)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1955)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1959)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(1958)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1961)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1963)
		p.Match(RFC4512ParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1965)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(1964)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1967)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1969)
		p.DefinitionMust()
	}
	p.SetState(1973)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 398, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1970)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1975)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 398, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1977)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 399, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1976)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1980)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 400, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1979)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2006)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 406, p.GetParserRuleContext()) == 1 {
		p.SetState(1983)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1982)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1985)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1987)
			p.Match(RFC4512ParserT__4)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1989)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(1988)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1991)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1993)
			p.DefinitionMay()
		}
		p.SetState(1997)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 403, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1994)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1999)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 403, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2001)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 404, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2000)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2004)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 405, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2003)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2009)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 407, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2008)
			p.DefinitionExtensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2014)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 408, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2011)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2016)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 408, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2018)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 409, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2017)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2021)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(2020)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(2026)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(2023)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2028)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2030)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(2029)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2032)
		p.CloseParen()
	}
	p.SetState(2034)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(2033)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INFStructuralOCContext is an interface to support dynamic dispatch.
type INFStructuralOCContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext

	// IsNFStructuralOCContext differentiates from other interfaces.
	IsNFStructuralOCContext()
}

type NFStructuralOCContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNFStructuralOCContext() *NFStructuralOCContext {
	var p = new(NFStructuralOCContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nFStructuralOC
	return p
}

func InitEmptyNFStructuralOCContext(p *NFStructuralOCContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nFStructuralOC
}

func (*NFStructuralOCContext) IsNFStructuralOCContext() {}

func NewNFStructuralOCContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NFStructuralOCContext {
	var p = new(NFStructuralOCContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_nFStructuralOC

	return p
}

func (s *NFStructuralOCContext) GetParser() antlr.Parser { return s.parser }

func (s *NFStructuralOCContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *NFStructuralOCContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NFStructuralOCContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NFStructuralOCContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNFStructuralOC(s)
	}
}

func (s *NFStructuralOCContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNFStructuralOC(s)
	}
}

func (p *RFC4512Parser) NFStructuralOC() (localctx INFStructuralOCContext) {
	localctx = NewNFStructuralOCContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, RFC4512ParserRULE_nFStructuralOC)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2036)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionObsoleteContext is an interface to support dynamic dispatch.
type IDefinitionObsoleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDefinitionObsoleteContext differentiates from other interfaces.
	IsDefinitionObsoleteContext()
}

type DefinitionObsoleteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionObsoleteContext() *DefinitionObsoleteContext {
	var p = new(DefinitionObsoleteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionObsolete
	return p
}

func InitEmptyDefinitionObsoleteContext(p *DefinitionObsoleteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionObsolete
}

func (*DefinitionObsoleteContext) IsDefinitionObsoleteContext() {}

func NewDefinitionObsoleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionObsoleteContext {
	var p = new(DefinitionObsoleteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionObsolete

	return p
}

func (s *DefinitionObsoleteContext) GetParser() antlr.Parser { return s.parser }
func (s *DefinitionObsoleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionObsoleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionObsoleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionObsolete(s)
	}
}

func (s *DefinitionObsoleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionObsolete(s)
	}
}

func (p *RFC4512Parser) DefinitionObsolete() (localctx IDefinitionObsoleteContext) {
	localctx = NewDefinitionObsoleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, RFC4512ParserRULE_definitionObsolete)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2038)
		p.Match(RFC4512ParserT__26)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionSyntaxContext is an interface to support dynamic dispatch.
type IDefinitionSyntaxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumericOID() INumericOIDContext

	// IsDefinitionSyntaxContext differentiates from other interfaces.
	IsDefinitionSyntaxContext()
}

type DefinitionSyntaxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionSyntaxContext() *DefinitionSyntaxContext {
	var p = new(DefinitionSyntaxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionSyntax
	return p
}

func InitEmptyDefinitionSyntaxContext(p *DefinitionSyntaxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionSyntax
}

func (*DefinitionSyntaxContext) IsDefinitionSyntaxContext() {}

func NewDefinitionSyntaxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionSyntaxContext {
	var p = new(DefinitionSyntaxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionSyntax

	return p
}

func (s *DefinitionSyntaxContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionSyntaxContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *DefinitionSyntaxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionSyntaxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionSyntaxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionSyntax(s)
	}
}

func (s *DefinitionSyntaxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionSyntax(s)
	}
}

func (p *RFC4512Parser) DefinitionSyntax() (localctx IDefinitionSyntaxContext) {
	localctx = NewDefinitionSyntaxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, RFC4512ParserRULE_definitionSyntax)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2040)
		p.NumericOID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionMustContext is an interface to support dynamic dispatch.
type IDefinitionMustContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext

	// IsDefinitionMustContext differentiates from other interfaces.
	IsDefinitionMustContext()
}

type DefinitionMustContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionMustContext() *DefinitionMustContext {
	var p = new(DefinitionMustContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionMust
	return p
}

func InitEmptyDefinitionMustContext(p *DefinitionMustContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionMust
}

func (*DefinitionMustContext) IsDefinitionMustContext() {}

func NewDefinitionMustContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionMustContext {
	var p = new(DefinitionMustContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionMust

	return p
}

func (s *DefinitionMustContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionMustContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *DefinitionMustContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *DefinitionMustContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionMustContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionMustContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionMust(s)
	}
}

func (s *DefinitionMustContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionMust(s)
	}
}

func (p *RFC4512Parser) DefinitionMust() (localctx IDefinitionMustContext) {
	localctx = NewDefinitionMustContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, RFC4512ParserRULE_definitionMust)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(2044)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(2042)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(2043)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionMayContext is an interface to support dynamic dispatch.
type IDefinitionMayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext

	// IsDefinitionMayContext differentiates from other interfaces.
	IsDefinitionMayContext()
}

type DefinitionMayContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionMayContext() *DefinitionMayContext {
	var p = new(DefinitionMayContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionMay
	return p
}

func InitEmptyDefinitionMayContext(p *DefinitionMayContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionMay
}

func (*DefinitionMayContext) IsDefinitionMayContext() {}

func NewDefinitionMayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionMayContext {
	var p = new(DefinitionMayContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionMay

	return p
}

func (s *DefinitionMayContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionMayContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *DefinitionMayContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *DefinitionMayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionMayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionMayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionMay(s)
	}
}

func (s *DefinitionMayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionMay(s)
	}
}

func (p *RFC4512Parser) DefinitionMay() (localctx IDefinitionMayContext) {
	localctx = NewDefinitionMayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, RFC4512ParserRULE_definitionMay)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(2048)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(2046)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(2047)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionDescriptionContext is an interface to support dynamic dispatch.
type IDefinitionDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QuotedString() antlr.TerminalNode
	QuotedDescriptor() antlr.TerminalNode

	// IsDefinitionDescriptionContext differentiates from other interfaces.
	IsDefinitionDescriptionContext()
}

type DefinitionDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionDescriptionContext() *DefinitionDescriptionContext {
	var p = new(DefinitionDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionDescription
	return p
}

func InitEmptyDefinitionDescriptionContext(p *DefinitionDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionDescription
}

func (*DefinitionDescriptionContext) IsDefinitionDescriptionContext() {}

func NewDefinitionDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionDescriptionContext {
	var p = new(DefinitionDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionDescription

	return p
}

func (s *DefinitionDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionDescriptionContext) QuotedString() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserQuotedString, 0)
}

func (s *DefinitionDescriptionContext) QuotedDescriptor() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserQuotedDescriptor, 0)
}

func (s *DefinitionDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionDescription(s)
	}
}

func (s *DefinitionDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionDescription(s)
	}
}

func (p *RFC4512Parser) DefinitionDescription() (localctx IDefinitionDescriptionContext) {
	localctx = NewDefinitionDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, RFC4512ParserRULE_definitionDescription)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2050)
		_la = p.GetTokenStream().LA(1)

		if !(_la == RFC4512ParserQuotedDescriptor || _la == RFC4512ParserQuotedString) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionNameContext is an interface to support dynamic dispatch.
type IDefinitionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllQuotedDescriptor() []antlr.TerminalNode
	QuotedDescriptor(i int) antlr.TerminalNode
	OpenParen() IOpenParenContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode

	// IsDefinitionNameContext differentiates from other interfaces.
	IsDefinitionNameContext()
}

type DefinitionNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionNameContext() *DefinitionNameContext {
	var p = new(DefinitionNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionName
	return p
}

func InitEmptyDefinitionNameContext(p *DefinitionNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionName
}

func (*DefinitionNameContext) IsDefinitionNameContext() {}

func NewDefinitionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionNameContext {
	var p = new(DefinitionNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionName

	return p
}

func (s *DefinitionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionNameContext) AllQuotedDescriptor() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserQuotedDescriptor)
}

func (s *DefinitionNameContext) QuotedDescriptor(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserQuotedDescriptor, i)
}

func (s *DefinitionNameContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *DefinitionNameContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *DefinitionNameContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DefinitionNameContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DefinitionNameContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DefinitionNameContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DefinitionNameContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DefinitionNameContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DefinitionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionName(s)
	}
}

func (s *DefinitionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionName(s)
	}
}

func (p *RFC4512Parser) DefinitionName() (localctx IDefinitionNameContext) {
	localctx = NewDefinitionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, RFC4512ParserRULE_definitionName)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2127)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserQuotedDescriptor:
		{
			p.SetState(2052)
			p.Match(RFC4512ParserQuotedDescriptor)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(2053)
			p.OpenParen()
		}
		p.SetState(2057)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 416, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2054)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2059)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 416, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2061)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 417, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2060)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2064)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(2063)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2069)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(2066)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2071)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2073)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(2072)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(2075)
			p.Match(RFC4512ParserQuotedDescriptor)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2079)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 421, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2076)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2081)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 421, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2083)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 422, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2082)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2086)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 423, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2085)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2096)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 425, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(2089)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == RFC4512ParserSP {
					{
						p.SetState(2088)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

					p.SetState(2091)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2093)
					p.Match(RFC4512ParserQuotedDescriptor)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2098)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 425, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2102)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 426, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2099)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2104)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 426, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2106)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(2105)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2109)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(2108)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2114)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(2111)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2116)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2117)
			p.CloseParen()
		}
		p.SetState(2121)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 430, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2118)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2123)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 430, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2125)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 431, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2124)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionExtensionsContext is an interface to support dynamic dispatch.
type IDefinitionExtensionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDefinitionExtension() []IDefinitionExtensionContext
	DefinitionExtension(i int) IDefinitionExtensionContext

	// IsDefinitionExtensionsContext differentiates from other interfaces.
	IsDefinitionExtensionsContext()
}

type DefinitionExtensionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionExtensionsContext() *DefinitionExtensionsContext {
	var p = new(DefinitionExtensionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionExtensions
	return p
}

func InitEmptyDefinitionExtensionsContext(p *DefinitionExtensionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionExtensions
}

func (*DefinitionExtensionsContext) IsDefinitionExtensionsContext() {}

func NewDefinitionExtensionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionExtensionsContext {
	var p = new(DefinitionExtensionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionExtensions

	return p
}

func (s *DefinitionExtensionsContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionExtensionsContext) AllDefinitionExtension() []IDefinitionExtensionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDefinitionExtensionContext); ok {
			len++
		}
	}

	tst := make([]IDefinitionExtensionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDefinitionExtensionContext); ok {
			tst[i] = t.(IDefinitionExtensionContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionExtensionsContext) DefinitionExtension(i int) IDefinitionExtensionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionExtensionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionExtensionContext)
}

func (s *DefinitionExtensionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionExtensionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionExtensionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionExtensions(s)
	}
}

func (s *DefinitionExtensionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionExtensions(s)
	}
}

func (p *RFC4512Parser) DefinitionExtensions() (localctx IDefinitionExtensionsContext) {
	localctx = NewDefinitionExtensionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, RFC4512ParserRULE_definitionExtensions)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2130)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2129)
				p.DefinitionExtension()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(2132)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 433, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionExtensionContext is an interface to support dynamic dispatch.
type IDefinitionExtensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExtensionName() antlr.TerminalNode
	AllExtensionValue() []IExtensionValueContext
	ExtensionValue(i int) IExtensionValueContext
	OpenParen() IOpenParenContext
	CloseParen() ICloseParenContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode

	// IsDefinitionExtensionContext differentiates from other interfaces.
	IsDefinitionExtensionContext()
}

type DefinitionExtensionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionExtensionContext() *DefinitionExtensionContext {
	var p = new(DefinitionExtensionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionExtension
	return p
}

func InitEmptyDefinitionExtensionContext(p *DefinitionExtensionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionExtension
}

func (*DefinitionExtensionContext) IsDefinitionExtensionContext() {}

func NewDefinitionExtensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionExtensionContext {
	var p = new(DefinitionExtensionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionExtension

	return p
}

func (s *DefinitionExtensionContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionExtensionContext) ExtensionName() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserExtensionName, 0)
}

func (s *DefinitionExtensionContext) AllExtensionValue() []IExtensionValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExtensionValueContext); ok {
			len++
		}
	}

	tst := make([]IExtensionValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExtensionValueContext); ok {
			tst[i] = t.(IExtensionValueContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionExtensionContext) ExtensionValue(i int) IExtensionValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionValueContext)
}

func (s *DefinitionExtensionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *DefinitionExtensionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *DefinitionExtensionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DefinitionExtensionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DefinitionExtensionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DefinitionExtensionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DefinitionExtensionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DefinitionExtensionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DefinitionExtensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionExtensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionExtensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionExtension(s)
	}
}

func (s *DefinitionExtensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionExtension(s)
	}
}

func (p *RFC4512Parser) DefinitionExtension() (localctx IDefinitionExtensionContext) {
	localctx = NewDefinitionExtensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, RFC4512ParserRULE_definitionExtension)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2135)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(2134)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2137)
		p.Match(RFC4512ParserExtensionName)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2213)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserQuotedDescriptor, RFC4512ParserQuotedString:
		{
			p.SetState(2138)
			p.ExtensionValue()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(2139)
			p.OpenParen()
		}
		p.SetState(2143)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 435, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2140)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2145)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 435, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2147)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 436, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2146)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2150)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(2149)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2155)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(2152)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2157)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2159)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(2158)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(2161)
			p.ExtensionValue()
		}
		p.SetState(2165)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 440, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2162)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2167)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 440, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2169)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 441, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2168)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2172)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 442, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2171)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2182)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 444, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(2175)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == RFC4512ParserSP {
					{
						p.SetState(2174)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

					p.SetState(2177)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2179)
					p.ExtensionValue()
				}

			}
			p.SetState(2184)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 444, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2188)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 445, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2185)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2190)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 445, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2192)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(2191)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2195)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(2194)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2200)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(2197)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2202)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2203)
			p.CloseParen()
		}
		p.SetState(2207)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 449, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2204)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2209)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 449, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(2211)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 450, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2210)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionLabelDelimContext is an interface to support dynamic dispatch.
type IDefinitionLabelDelimContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsDefinitionLabelDelimContext differentiates from other interfaces.
	IsDefinitionLabelDelimContext()
}

type DefinitionLabelDelimContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionLabelDelimContext() *DefinitionLabelDelimContext {
	var p = new(DefinitionLabelDelimContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionLabelDelim
	return p
}

func InitEmptyDefinitionLabelDelimContext(p *DefinitionLabelDelimContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionLabelDelim
}

func (*DefinitionLabelDelimContext) IsDefinitionLabelDelimContext() {}

func NewDefinitionLabelDelimContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionLabelDelimContext {
	var p = new(DefinitionLabelDelimContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionLabelDelim

	return p
}

func (s *DefinitionLabelDelimContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionLabelDelimContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DefinitionLabelDelimContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DefinitionLabelDelimContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionLabelDelimContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionLabelDelimContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionLabelDelim(s)
	}
}

func (s *DefinitionLabelDelimContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionLabelDelim(s)
	}
}

func (p *RFC4512Parser) DefinitionLabelDelim() (localctx IDefinitionLabelDelimContext) {
	localctx = NewDefinitionLabelDelimContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, RFC4512ParserRULE_definitionLabelDelim)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2248)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 458, p.GetParserRuleContext()) {
	case 1:
		p.SetState(2241)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 456, p.GetParserRuleContext()) {
		case 1:
			p.SetState(2218)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(2215)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(2220)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2221)
				p.Match(RFC4512ParserT__27)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(2225)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(2222)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(2227)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			p.SetState(2231)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(2228)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(2233)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2234)
				p.Match(RFC4512ParserT__28)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(2238)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(2235)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(2240)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 2:
		p.SetState(2244)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(2243)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2246)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOIDsContext is an interface to support dynamic dispatch.
type IOIDsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	AllOID() []IOIDContext
	OID(i int) IOIDContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllODelim() []antlr.TerminalNode
	ODelim(i int) antlr.TerminalNode

	// IsOIDsContext differentiates from other interfaces.
	IsOIDsContext()
}

type OIDsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOIDsContext() *OIDsContext {
	var p = new(OIDsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oIDs
	return p
}

func InitEmptyOIDsContext(p *OIDsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oIDs
}

func (*OIDsContext) IsOIDsContext() {}

func NewOIDsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OIDsContext {
	var p = new(OIDsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_oIDs

	return p
}

func (s *OIDsContext) GetParser() antlr.Parser { return s.parser }

func (s *OIDsContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *OIDsContext) AllOID() []IOIDContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOIDContext); ok {
			len++
		}
	}

	tst := make([]IOIDContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOIDContext); ok {
			tst[i] = t.(IOIDContext)
			i++
		}
	}

	return tst
}

func (s *OIDsContext) OID(i int) IOIDContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *OIDsContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *OIDsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *OIDsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *OIDsContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *OIDsContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *OIDsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *OIDsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *OIDsContext) AllODelim() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserODelim)
}

func (s *OIDsContext) ODelim(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserODelim, i)
}

func (s *OIDsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OIDsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OIDsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOIDs(s)
	}
}

func (s *OIDsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOIDs(s)
	}
}

func (p *RFC4512Parser) OIDs() (localctx IOIDsContext) {
	localctx = NewOIDsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, RFC4512ParserRULE_oIDs)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2250)
		p.OpenParen()
	}
	p.SetState(2254)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 459, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2251)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2256)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 459, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2258)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(2257)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(2261)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(2260)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(2266)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(2263)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2268)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2269)
		p.OID()
	}
	p.SetState(2273)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 463, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2270)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2275)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 463, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2277)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 464, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2276)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2280)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 465, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2279)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2292)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserODelim {
		{
			p.SetState(2282)
			p.Match(RFC4512ParserODelim)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2286)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(2283)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2288)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2289)
			p.OID()
		}

		p.SetState(2294)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2298)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 468, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2295)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2300)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 468, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2302)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 469, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2301)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2305)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(2304)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(2310)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(2307)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2312)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2314)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(2313)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2316)
		p.CloseParen()
	}
	p.SetState(2320)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 473, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2317)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2322)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 473, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2324)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 474, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2323)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeDescriptionContext is an interface to support dynamic dispatch.
type IAttributeDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AttrOptions() IAttrOptionsContext

	// IsAttributeDescriptionContext differentiates from other interfaces.
	IsAttributeDescriptionContext()
}

type AttributeDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeDescriptionContext() *AttributeDescriptionContext {
	var p = new(AttributeDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeDescription
	return p
}

func InitEmptyAttributeDescriptionContext(p *AttributeDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeDescription
}

func (*AttributeDescriptionContext) IsAttributeDescriptionContext() {}

func NewAttributeDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeDescriptionContext {
	var p = new(AttributeDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeDescription

	return p
}

func (s *AttributeDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeDescriptionContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *AttributeDescriptionContext) AttrOptions() IAttrOptionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttrOptionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttrOptionsContext)
}

func (s *AttributeDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeDescription(s)
	}
}

func (s *AttributeDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeDescription(s)
	}
}

func (p *RFC4512Parser) AttributeDescription() (localctx IAttributeDescriptionContext) {
	localctx = NewAttributeDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, RFC4512ParserRULE_attributeDescription)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2326)
		p.OID()
	}
	p.SetState(2328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserT__29 {
		{
			p.SetState(2327)
			p.AttrOptions()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOIDContext is an interface to support dynamic dispatch.
type IOIDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Descriptor() IDescriptorContext
	NumericOID() INumericOIDContext

	// IsOIDContext differentiates from other interfaces.
	IsOIDContext()
}

type OIDContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOIDContext() *OIDContext {
	var p = new(OIDContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oID
	return p
}

func InitEmptyOIDContext(p *OIDContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oID
}

func (*OIDContext) IsOIDContext() {}

func NewOIDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OIDContext {
	var p = new(OIDContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_oID

	return p
}

func (s *OIDContext) GetParser() antlr.Parser { return s.parser }

func (s *OIDContext) Descriptor() IDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptorContext)
}

func (s *OIDContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *OIDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OIDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OIDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOID(s)
	}
}

func (s *OIDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOID(s)
	}
}

func (p *RFC4512Parser) OID() (localctx IOIDContext) {
	localctx = NewOIDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, RFC4512ParserRULE_oID)
	p.SetState(2332)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2330)
			p.Descriptor()
		}

	case RFC4512ParserNumOID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2331)
			p.NumericOID()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpenParenContext is an interface to support dynamic dispatch.
type IOpenParenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParenthesis() antlr.TerminalNode

	// IsOpenParenContext differentiates from other interfaces.
	IsOpenParenContext()
}

type OpenParenContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpenParenContext() *OpenParenContext {
	var p = new(OpenParenContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_openParen
	return p
}

func InitEmptyOpenParenContext(p *OpenParenContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_openParen
}

func (*OpenParenContext) IsOpenParenContext() {}

func NewOpenParenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpenParenContext {
	var p = new(OpenParenContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_openParen

	return p
}

func (s *OpenParenContext) GetParser() antlr.Parser { return s.parser }

func (s *OpenParenContext) OpenParenthesis() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserOpenParenthesis, 0)
}

func (s *OpenParenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpenParenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpenParenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOpenParen(s)
	}
}

func (s *OpenParenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOpenParen(s)
	}
}

func (p *RFC4512Parser) OpenParen() (localctx IOpenParenContext) {
	localctx = NewOpenParenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, RFC4512ParserRULE_openParen)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2334)
		p.Match(RFC4512ParserOpenParenthesis)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICloseParenContext is an interface to support dynamic dispatch.
type ICloseParenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CloseParenthesis() antlr.TerminalNode

	// IsCloseParenContext differentiates from other interfaces.
	IsCloseParenContext()
}

type CloseParenContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloseParenContext() *CloseParenContext {
	var p = new(CloseParenContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_closeParen
	return p
}

func InitEmptyCloseParenContext(p *CloseParenContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_closeParen
}

func (*CloseParenContext) IsCloseParenContext() {}

func NewCloseParenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CloseParenContext {
	var p = new(CloseParenContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_closeParen

	return p
}

func (s *CloseParenContext) GetParser() antlr.Parser { return s.parser }

func (s *CloseParenContext) CloseParenthesis() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserCloseParenthesis, 0)
}

func (s *CloseParenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloseParenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CloseParenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterCloseParen(s)
	}
}

func (s *CloseParenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitCloseParen(s)
	}
}

func (p *RFC4512Parser) CloseParen() (localctx ICloseParenContext) {
	localctx = NewCloseParenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, RFC4512ParserRULE_closeParen)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2336)
		p.Match(RFC4512ParserCloseParenthesis)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumericOIDOrMacroContext is an interface to support dynamic dispatch.
type INumericOIDOrMacroContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Macro() IMacroContext
	NumericOID() INumericOIDContext

	// IsNumericOIDOrMacroContext differentiates from other interfaces.
	IsNumericOIDOrMacroContext()
}

type NumericOIDOrMacroContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericOIDOrMacroContext() *NumericOIDOrMacroContext {
	var p = new(NumericOIDOrMacroContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOIDOrMacro
	return p
}

func InitEmptyNumericOIDOrMacroContext(p *NumericOIDOrMacroContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOIDOrMacro
}

func (*NumericOIDOrMacroContext) IsNumericOIDOrMacroContext() {}

func NewNumericOIDOrMacroContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericOIDOrMacroContext {
	var p = new(NumericOIDOrMacroContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_numericOIDOrMacro

	return p
}

func (s *NumericOIDOrMacroContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericOIDOrMacroContext) Macro() IMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMacroContext)
}

func (s *NumericOIDOrMacroContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *NumericOIDOrMacroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericOIDOrMacroContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericOIDOrMacroContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNumericOIDOrMacro(s)
	}
}

func (s *NumericOIDOrMacroContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNumericOIDOrMacro(s)
	}
}

func (p *RFC4512Parser) NumericOIDOrMacro() (localctx INumericOIDOrMacroContext) {
	localctx = NewNumericOIDOrMacroContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, RFC4512ParserRULE_numericOIDOrMacro)
	p.SetState(2340)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2338)
			p.Macro()
		}

	case RFC4512ParserNumOID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2339)
			p.NumericOID()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMacroContext is an interface to support dynamic dispatch.
type IMacroContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Descriptor() IDescriptorContext
	MacroSuffix() IMacroSuffixContext

	// IsMacroContext differentiates from other interfaces.
	IsMacroContext()
}

type MacroContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMacroContext() *MacroContext {
	var p = new(MacroContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macro
	return p
}

func InitEmptyMacroContext(p *MacroContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macro
}

func (*MacroContext) IsMacroContext() {}

func NewMacroContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MacroContext {
	var p = new(MacroContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_macro

	return p
}

func (s *MacroContext) GetParser() antlr.Parser { return s.parser }

func (s *MacroContext) Descriptor() IDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptorContext)
}

func (s *MacroContext) MacroSuffix() IMacroSuffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMacroSuffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMacroSuffixContext)
}

func (s *MacroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MacroContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MacroContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMacro(s)
	}
}

func (s *MacroContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMacro(s)
	}
}

func (p *RFC4512Parser) Macro() (localctx IMacroContext) {
	localctx = NewMacroContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, RFC4512ParserRULE_macro)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2342)
		p.Descriptor()
	}
	{
		p.SetState(2343)
		p.MacroSuffix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumericOIDContext is an interface to support dynamic dispatch.
type INumericOIDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumOID() antlr.TerminalNode

	// IsNumericOIDContext differentiates from other interfaces.
	IsNumericOIDContext()
}

type NumericOIDContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericOIDContext() *NumericOIDContext {
	var p = new(NumericOIDContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOID
	return p
}

func InitEmptyNumericOIDContext(p *NumericOIDContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOID
}

func (*NumericOIDContext) IsNumericOIDContext() {}

func NewNumericOIDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericOIDContext {
	var p = new(NumericOIDContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_numericOID

	return p
}

func (s *NumericOIDContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericOIDContext) NumOID() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNumOID, 0)
}

func (s *NumericOIDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericOIDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericOIDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNumericOID(s)
	}
}

func (s *NumericOIDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNumericOID(s)
	}
}

func (p *RFC4512Parser) NumericOID() (localctx INumericOIDContext) {
	localctx = NewNumericOIDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, RFC4512ParserRULE_numericOID)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2345)
		p.Match(RFC4512ParserNumOID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMacroSuffixContext is an interface to support dynamic dispatch.
type IMacroSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MacroSuffix() antlr.TerminalNode

	// IsMacroSuffixContext differentiates from other interfaces.
	IsMacroSuffixContext()
}

type MacroSuffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMacroSuffixContext() *MacroSuffixContext {
	var p = new(MacroSuffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macroSuffix
	return p
}

func InitEmptyMacroSuffixContext(p *MacroSuffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macroSuffix
}

func (*MacroSuffixContext) IsMacroSuffixContext() {}

func NewMacroSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MacroSuffixContext {
	var p = new(MacroSuffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_macroSuffix

	return p
}

func (s *MacroSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *MacroSuffixContext) MacroSuffix() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMacroSuffix, 0)
}

func (s *MacroSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MacroSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MacroSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMacroSuffix(s)
	}
}

func (s *MacroSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMacroSuffix(s)
	}
}

func (p *RFC4512Parser) MacroSuffix() (localctx IMacroSuffixContext) {
	localctx = NewMacroSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, RFC4512ParserRULE_macroSuffix)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2347)
		p.Match(RFC4512ParserMacroSuffix)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Digit() antlr.TerminalNode

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_number
	return p
}

func InitEmptyNumberContext(p *NumberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_number
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) Digit() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDigit, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNumber(s)
	}
}

func (p *RFC4512Parser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, RFC4512ParserRULE_number)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2349)
		p.Match(RFC4512ParserDigit)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttrOptionsContext is an interface to support dynamic dispatch.
type IAttrOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDescriptor() []IDescriptorContext
	Descriptor(i int) IDescriptorContext

	// IsAttrOptionsContext differentiates from other interfaces.
	IsAttrOptionsContext()
}

type AttrOptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttrOptionsContext() *AttrOptionsContext {
	var p = new(AttrOptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attrOptions
	return p
}

func InitEmptyAttrOptionsContext(p *AttrOptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attrOptions
}

func (*AttrOptionsContext) IsAttrOptionsContext() {}

func NewAttrOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttrOptionsContext {
	var p = new(AttrOptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attrOptions

	return p
}

func (s *AttrOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AttrOptionsContext) AllDescriptor() []IDescriptorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptorContext); ok {
			len++
		}
	}

	tst := make([]IDescriptorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptorContext); ok {
			tst[i] = t.(IDescriptorContext)
			i++
		}
	}

	return tst
}

func (s *AttrOptionsContext) Descriptor(i int) IDescriptorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptorContext)
}

func (s *AttrOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttrOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttrOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttrOptions(s)
	}
}

func (s *AttrOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttrOptions(s)
	}
}

func (p *RFC4512Parser) AttrOptions() (localctx IAttrOptionsContext) {
	localctx = NewAttrOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, RFC4512ParserRULE_attrOptions)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2353)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserT__29 {
		{
			p.SetState(2351)
			p.Match(RFC4512ParserT__29)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2352)
			p.Descriptor()
		}

		p.SetState(2355)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptorContext is an interface to support dynamic dispatch.
type IDescriptorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Descr() antlr.TerminalNode
	NFLabel() antlr.TerminalNode
	LSLabel() antlr.TerminalNode
	MRLabel() antlr.TerminalNode
	MULabel() antlr.TerminalNode
	ATLabel() antlr.TerminalNode
	OCLabel() antlr.TerminalNode
	DCLabel() antlr.TerminalNode
	DSLabel() antlr.TerminalNode

	// IsDescriptorContext differentiates from other interfaces.
	IsDescriptorContext()
}

type DescriptorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptorContext() *DescriptorContext {
	var p = new(DescriptorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_descriptor
	return p
}

func InitEmptyDescriptorContext(p *DescriptorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_descriptor
}

func (*DescriptorContext) IsDescriptorContext() {}

func NewDescriptorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescriptorContext {
	var p = new(DescriptorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_descriptor

	return p
}

func (s *DescriptorContext) GetParser() antlr.Parser { return s.parser }

func (s *DescriptorContext) Descr() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDescr, 0)
}

func (s *DescriptorContext) NFLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNFLabel, 0)
}

func (s *DescriptorContext) LSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLSLabel, 0)
}

func (s *DescriptorContext) MRLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMRLabel, 0)
}

func (s *DescriptorContext) MULabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMULabel, 0)
}

func (s *DescriptorContext) ATLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserATLabel, 0)
}

func (s *DescriptorContext) OCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserOCLabel, 0)
}

func (s *DescriptorContext) DCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDCLabel, 0)
}

func (s *DescriptorContext) DSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDSLabel, 0)
}

func (s *DescriptorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescriptorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescriptorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDescriptor(s)
	}
}

func (s *DescriptorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDescriptor(s)
	}
}

func (p *RFC4512Parser) Descriptor() (localctx IDescriptorContext) {
	localctx = NewDescriptorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, RFC4512ParserRULE_descriptor)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2357)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1123700883587072) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtensionValueContext is an interface to support dynamic dispatch.
type IExtensionValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QuotedString() antlr.TerminalNode
	QuotedDescriptor() antlr.TerminalNode

	// IsExtensionValueContext differentiates from other interfaces.
	IsExtensionValueContext()
}

type ExtensionValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtensionValueContext() *ExtensionValueContext {
	var p = new(ExtensionValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extensionValue
	return p
}

func InitEmptyExtensionValueContext(p *ExtensionValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extensionValue
}

func (*ExtensionValueContext) IsExtensionValueContext() {}

func NewExtensionValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtensionValueContext {
	var p = new(ExtensionValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_extensionValue

	return p
}

func (s *ExtensionValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtensionValueContext) QuotedString() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserQuotedString, 0)
}

func (s *ExtensionValueContext) QuotedDescriptor() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserQuotedDescriptor, 0)
}

func (s *ExtensionValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtensionValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtensionValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterExtensionValue(s)
	}
}

func (s *ExtensionValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitExtensionValue(s)
	}
}

func (p *RFC4512Parser) ExtensionValue() (localctx IExtensionValueContext) {
	localctx = NewExtensionValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, RFC4512ParserRULE_extensionValue)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2359)
		_la = p.GetTokenStream().LA(1)

		if !(_la == RFC4512ParserQuotedDescriptor || _la == RFC4512ParserQuotedString) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}
