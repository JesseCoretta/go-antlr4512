// Code generated from RFC4512.g4 by ANTLR 4.13.1. DO NOT EDIT.

package antlr4512 // RFC4512
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type RFC4512Parser struct {
	*antlr.BaseParser
}

var RFC4512ParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func rfc4512ParserInit() {
	staticData := &RFC4512ParserStaticData
	staticData.LiteralNames = []string{
		"", "'objectidentifier'", "':'", "'='", "'ABSTRACT'", "'STRUCTURAL'",
		"'AUXILIARY'", "'APPLIES'", "'MUST'", "'AUX'", "'MAY'", "'NOT'", "'FORM'",
		"'ORDERING'", "'EQUALITY'", "'OC'", "'SUP'", "'SUBSTR'", "'ING'", "'S'",
		"'NAME'", "'USAGE'", "'DESC'", "'SYNTAX'", "'SINGLE-VALUE'", "'NO-USER-MODIFICATION'",
		"'COLLECTIVE'", "'OBSOLETE'", "';'", "'userApplication'", "'directoryOperation'",
		"'distributedOperation'", "'dSAOperation'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "OpenParenthesis",
		"CloseParenthesis", "ODelim", "MacroSuffix", "NumOID", "XString", "DistinguishedName",
		"QDescr", "QString", "MUB", "Digit", "NFLabel", "OCLabel", "ATLabel",
		"LSLabel", "MRLabel", "MULabel", "DSLabel", "DCLabel", "Descr", "SP",
		"NEWLINE", "LineComment",
	}
	staticData.RuleNames = []string{
		"fileparse", "definitions", "objectClassDescriptions", "attributeTypeDescriptions",
		"matchingRuleDescriptions", "matchingRuleUseDescriptions", "lDAPSyntaxDescriptions",
		"dITStructureRuleDescriptions", "nameFormDescriptions", "dITContentRuleDescriptions",
		"objectIdentifier", "objectClassLabel", "matchingRuleLabel", "matchingRuleUseLabel",
		"lDAPSyntaxLabel", "dITContentRuleLabel", "dITStructureRuleLabel", "attributeTypeLabel",
		"nameFormLabel", "definitionLabelDelim", "kind", "abstractKind", "structuralKind",
		"auxiliaryKind", "applies", "must", "aux", "may", "not", "form", "ordering",
		"equality", "structuralClass", "superType", "superClasses", "superRules",
		"substr", "name", "usage", "description", "syntax", "singleValue", "immutability",
		"collective", "obsolescence", "minUpperBounds", "structureRule", "usages",
		"quotedDescriptor", "quotedString", "schemaDN", "objectIdentifierOIDOrName",
		"attributeDescription", "openParen", "closeParen", "numericOIDOrMacro",
		"macro", "numericOID", "macroSuffix", "number", "attrOptions", "userApplication",
		"directoryOperation", "distributedOperation", "dSAOperation", "structureRules",
		"oID", "oIDs", "extensionValue", "extensions", "extension", "names",
		"descriptor", "objectClassDescription", "attributeTypeDescription",
		"matchingRuleDescription", "matchingRuleUseDescription", "lDAPSyntaxDescription",
		"dITContentRuleDescription", "dITStructureRuleDescription", "nameFormDescription",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 55, 1646, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7,
		73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78,
		2, 79, 7, 79, 2, 80, 7, 80, 1, 0, 3, 0, 164, 8, 0, 1, 0, 3, 0, 167, 8,
		0, 1, 0, 3, 0, 170, 8, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 185, 8, 1, 11, 1, 12, 1, 186, 1,
		2, 1, 2, 1, 2, 5, 2, 192, 8, 2, 10, 2, 12, 2, 195, 9, 2, 1, 2, 1, 2, 4,
		2, 199, 8, 2, 11, 2, 12, 2, 200, 1, 3, 1, 3, 1, 3, 5, 3, 206, 8, 3, 10,
		3, 12, 3, 209, 9, 3, 1, 3, 1, 3, 4, 3, 213, 8, 3, 11, 3, 12, 3, 214, 1,
		4, 1, 4, 1, 4, 5, 4, 220, 8, 4, 10, 4, 12, 4, 223, 9, 4, 1, 4, 1, 4, 4,
		4, 227, 8, 4, 11, 4, 12, 4, 228, 1, 5, 1, 5, 1, 5, 5, 5, 234, 8, 5, 10,
		5, 12, 5, 237, 9, 5, 1, 5, 1, 5, 4, 5, 241, 8, 5, 11, 5, 12, 5, 242, 1,
		6, 1, 6, 1, 6, 5, 6, 248, 8, 6, 10, 6, 12, 6, 251, 9, 6, 1, 6, 1, 6, 4,
		6, 255, 8, 6, 11, 6, 12, 6, 256, 1, 7, 1, 7, 1, 7, 5, 7, 262, 8, 7, 10,
		7, 12, 7, 265, 9, 7, 1, 7, 1, 7, 4, 7, 269, 8, 7, 11, 7, 12, 7, 270, 1,
		8, 1, 8, 1, 8, 5, 8, 276, 8, 8, 10, 8, 12, 8, 279, 9, 8, 1, 8, 1, 8, 4,
		8, 283, 8, 8, 11, 8, 12, 8, 284, 1, 9, 1, 9, 1, 9, 5, 9, 290, 8, 9, 10,
		9, 12, 9, 293, 9, 9, 1, 9, 1, 9, 4, 9, 297, 8, 9, 11, 9, 12, 9, 298, 1,
		10, 1, 10, 4, 10, 303, 8, 10, 11, 10, 12, 10, 304, 1, 10, 1, 10, 5, 10,
		309, 8, 10, 10, 10, 12, 10, 312, 9, 10, 1, 10, 1, 10, 4, 10, 316, 8, 10,
		11, 10, 12, 10, 317, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1,
		13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16,
		1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 19, 5, 19, 345, 8, 19, 10,
		19, 12, 19, 348, 9, 19, 1, 19, 1, 19, 5, 19, 352, 8, 19, 10, 19, 12, 19,
		355, 9, 19, 1, 19, 5, 19, 358, 8, 19, 10, 19, 12, 19, 361, 9, 19, 1, 19,
		1, 19, 5, 19, 365, 8, 19, 10, 19, 12, 19, 368, 9, 19, 3, 19, 370, 8, 19,
		1, 19, 4, 19, 373, 8, 19, 11, 19, 12, 19, 374, 3, 19, 377, 8, 19, 1, 20,
		1, 20, 1, 20, 3, 20, 382, 8, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1,
		23, 1, 24, 4, 24, 391, 8, 24, 11, 24, 12, 24, 392, 1, 24, 1, 24, 4, 24,
		397, 8, 24, 11, 24, 12, 24, 398, 1, 24, 1, 24, 3, 24, 403, 8, 24, 1, 25,
		4, 25, 406, 8, 25, 11, 25, 12, 25, 407, 1, 25, 1, 25, 4, 25, 412, 8, 25,
		11, 25, 12, 25, 413, 1, 25, 1, 25, 3, 25, 418, 8, 25, 1, 26, 4, 26, 421,
		8, 26, 11, 26, 12, 26, 422, 1, 26, 1, 26, 4, 26, 427, 8, 26, 11, 26, 12,
		26, 428, 1, 26, 1, 26, 3, 26, 433, 8, 26, 1, 27, 4, 27, 436, 8, 27, 11,
		27, 12, 27, 437, 1, 27, 1, 27, 4, 27, 442, 8, 27, 11, 27, 12, 27, 443,
		1, 27, 1, 27, 3, 27, 448, 8, 27, 1, 28, 4, 28, 451, 8, 28, 11, 28, 12,
		28, 452, 1, 28, 1, 28, 4, 28, 457, 8, 28, 11, 28, 12, 28, 458, 1, 28, 1,
		28, 3, 28, 463, 8, 28, 1, 29, 4, 29, 466, 8, 29, 11, 29, 12, 29, 467, 1,
		29, 1, 29, 4, 29, 472, 8, 29, 11, 29, 12, 29, 473, 1, 29, 1, 29, 1, 30,
		4, 30, 479, 8, 30, 11, 30, 12, 30, 480, 1, 30, 1, 30, 4, 30, 485, 8, 30,
		11, 30, 12, 30, 486, 1, 30, 1, 30, 1, 31, 4, 31, 492, 8, 31, 11, 31, 12,
		31, 493, 1, 31, 1, 31, 4, 31, 498, 8, 31, 11, 31, 12, 31, 499, 1, 31, 1,
		31, 1, 32, 4, 32, 505, 8, 32, 11, 32, 12, 32, 506, 1, 32, 1, 32, 4, 32,
		511, 8, 32, 11, 32, 12, 32, 512, 1, 32, 1, 32, 1, 33, 4, 33, 518, 8, 33,
		11, 33, 12, 33, 519, 1, 33, 1, 33, 4, 33, 524, 8, 33, 11, 33, 12, 33, 525,
		1, 33, 1, 33, 1, 34, 4, 34, 531, 8, 34, 11, 34, 12, 34, 532, 1, 34, 1,
		34, 4, 34, 537, 8, 34, 11, 34, 12, 34, 538, 1, 34, 1, 34, 3, 34, 543, 8,
		34, 1, 35, 4, 35, 546, 8, 35, 11, 35, 12, 35, 547, 1, 35, 1, 35, 4, 35,
		552, 8, 35, 11, 35, 12, 35, 553, 1, 35, 1, 35, 3, 35, 558, 8, 35, 1, 36,
		4, 36, 561, 8, 36, 11, 36, 12, 36, 562, 1, 36, 1, 36, 1, 36, 3, 36, 568,
		8, 36, 3, 36, 570, 8, 36, 1, 36, 4, 36, 573, 8, 36, 11, 36, 12, 36, 574,
		1, 36, 1, 36, 1, 37, 4, 37, 580, 8, 37, 11, 37, 12, 37, 581, 1, 37, 1,
		37, 4, 37, 586, 8, 37, 11, 37, 12, 37, 587, 1, 37, 1, 37, 1, 38, 4, 38,
		593, 8, 38, 11, 38, 12, 38, 594, 1, 38, 1, 38, 4, 38, 599, 8, 38, 11, 38,
		12, 38, 600, 1, 38, 1, 38, 1, 39, 4, 39, 606, 8, 39, 11, 39, 12, 39, 607,
		1, 39, 1, 39, 4, 39, 612, 8, 39, 11, 39, 12, 39, 613, 1, 39, 1, 39, 3,
		39, 618, 8, 39, 1, 40, 4, 40, 621, 8, 40, 11, 40, 12, 40, 622, 1, 40, 1,
		40, 4, 40, 627, 8, 40, 11, 40, 12, 40, 628, 1, 40, 1, 40, 3, 40, 633, 8,
		40, 1, 41, 4, 41, 636, 8, 41, 11, 41, 12, 41, 637, 1, 41, 1, 41, 1, 42,
		4, 42, 643, 8, 42, 11, 42, 12, 42, 644, 1, 42, 1, 42, 1, 43, 4, 43, 650,
		8, 43, 11, 43, 12, 43, 651, 1, 43, 1, 43, 1, 44, 4, 44, 657, 8, 44, 11,
		44, 12, 44, 658, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47,
		1, 47, 1, 47, 3, 47, 671, 8, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1,
		50, 1, 51, 1, 51, 4, 51, 681, 8, 51, 11, 51, 12, 51, 682, 1, 51, 1, 51,
		1, 52, 1, 52, 3, 52, 689, 8, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 55, 1,
		55, 3, 55, 697, 8, 55, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 58, 1, 58,
		1, 59, 1, 59, 1, 60, 1, 60, 4, 60, 710, 8, 60, 11, 60, 12, 60, 711, 1,
		61, 1, 61, 1, 62, 1, 62, 1, 63, 1, 63, 1, 64, 1, 64, 1, 65, 1, 65, 5, 65,
		724, 8, 65, 10, 65, 12, 65, 727, 9, 65, 1, 65, 3, 65, 730, 8, 65, 1, 65,
		3, 65, 733, 8, 65, 1, 65, 5, 65, 736, 8, 65, 10, 65, 12, 65, 739, 9, 65,
		1, 65, 3, 65, 742, 8, 65, 1, 65, 1, 65, 5, 65, 746, 8, 65, 10, 65, 12,
		65, 749, 9, 65, 1, 65, 3, 65, 752, 8, 65, 1, 65, 3, 65, 755, 8, 65, 1,
		65, 4, 65, 758, 8, 65, 11, 65, 12, 65, 759, 1, 65, 5, 65, 763, 8, 65, 10,
		65, 12, 65, 766, 9, 65, 1, 65, 5, 65, 769, 8, 65, 10, 65, 12, 65, 772,
		9, 65, 1, 65, 3, 65, 775, 8, 65, 1, 65, 3, 65, 778, 8, 65, 1, 65, 5, 65,
		781, 8, 65, 10, 65, 12, 65, 784, 9, 65, 1, 65, 1, 65, 5, 65, 788, 8, 65,
		10, 65, 12, 65, 791, 9, 65, 1, 65, 3, 65, 794, 8, 65, 1, 66, 1, 66, 3,
		66, 798, 8, 66, 1, 67, 1, 67, 5, 67, 802, 8, 67, 10, 67, 12, 67, 805, 9,
		67, 1, 67, 3, 67, 808, 8, 67, 1, 67, 3, 67, 811, 8, 67, 1, 67, 5, 67, 814,
		8, 67, 10, 67, 12, 67, 817, 9, 67, 1, 67, 1, 67, 5, 67, 821, 8, 67, 10,
		67, 12, 67, 824, 9, 67, 1, 67, 3, 67, 827, 8, 67, 1, 67, 3, 67, 830, 8,
		67, 1, 67, 1, 67, 5, 67, 834, 8, 67, 10, 67, 12, 67, 837, 9, 67, 1, 67,
		5, 67, 840, 8, 67, 10, 67, 12, 67, 843, 9, 67, 1, 67, 5, 67, 846, 8, 67,
		10, 67, 12, 67, 849, 9, 67, 1, 67, 3, 67, 852, 8, 67, 1, 67, 3, 67, 855,
		8, 67, 1, 67, 5, 67, 858, 8, 67, 10, 67, 12, 67, 861, 9, 67, 1, 67, 3,
		67, 864, 8, 67, 1, 67, 1, 67, 5, 67, 868, 8, 67, 10, 67, 12, 67, 871, 9,
		67, 1, 67, 3, 67, 874, 8, 67, 1, 68, 1, 68, 3, 68, 878, 8, 68, 1, 69, 4,
		69, 881, 8, 69, 11, 69, 12, 69, 882, 1, 70, 3, 70, 886, 8, 70, 1, 70, 1,
		70, 1, 70, 1, 70, 5, 70, 892, 8, 70, 10, 70, 12, 70, 895, 9, 70, 1, 70,
		3, 70, 898, 8, 70, 1, 70, 3, 70, 901, 8, 70, 1, 70, 5, 70, 904, 8, 70,
		10, 70, 12, 70, 907, 9, 70, 1, 70, 3, 70, 910, 8, 70, 1, 70, 1, 70, 5,
		70, 914, 8, 70, 10, 70, 12, 70, 917, 9, 70, 1, 70, 3, 70, 920, 8, 70, 1,
		70, 3, 70, 923, 8, 70, 1, 70, 4, 70, 926, 8, 70, 11, 70, 12, 70, 927, 1,
		70, 5, 70, 931, 8, 70, 10, 70, 12, 70, 934, 9, 70, 1, 70, 5, 70, 937, 8,
		70, 10, 70, 12, 70, 940, 9, 70, 1, 70, 3, 70, 943, 8, 70, 1, 70, 3, 70,
		946, 8, 70, 1, 70, 5, 70, 949, 8, 70, 10, 70, 12, 70, 952, 9, 70, 1, 70,
		1, 70, 5, 70, 956, 8, 70, 10, 70, 12, 70, 959, 9, 70, 1, 70, 3, 70, 962,
		8, 70, 3, 70, 964, 8, 70, 1, 71, 1, 71, 1, 71, 5, 71, 969, 8, 71, 10, 71,
		12, 71, 972, 9, 71, 1, 71, 3, 71, 975, 8, 71, 1, 71, 3, 71, 978, 8, 71,
		1, 71, 5, 71, 981, 8, 71, 10, 71, 12, 71, 984, 9, 71, 1, 71, 3, 71, 987,
		8, 71, 1, 71, 1, 71, 5, 71, 991, 8, 71, 10, 71, 12, 71, 994, 9, 71, 1,
		71, 3, 71, 997, 8, 71, 1, 71, 3, 71, 1000, 8, 71, 1, 71, 4, 71, 1003, 8,
		71, 11, 71, 12, 71, 1004, 1, 71, 5, 71, 1008, 8, 71, 10, 71, 12, 71, 1011,
		9, 71, 1, 71, 5, 71, 1014, 8, 71, 10, 71, 12, 71, 1017, 9, 71, 1, 71, 3,
		71, 1020, 8, 71, 1, 71, 3, 71, 1023, 8, 71, 1, 71, 5, 71, 1026, 8, 71,
		10, 71, 12, 71, 1029, 9, 71, 1, 71, 1, 71, 5, 71, 1033, 8, 71, 10, 71,
		12, 71, 1036, 9, 71, 1, 71, 3, 71, 1039, 8, 71, 3, 71, 1041, 8, 71, 1,
		72, 1, 72, 1, 73, 1, 73, 5, 73, 1047, 8, 73, 10, 73, 12, 73, 1050, 9, 73,
		1, 73, 3, 73, 1053, 8, 73, 1, 73, 3, 73, 1056, 8, 73, 1, 73, 5, 73, 1059,
		8, 73, 10, 73, 12, 73, 1062, 9, 73, 1, 73, 1, 73, 5, 73, 1066, 8, 73, 10,
		73, 12, 73, 1069, 9, 73, 1, 73, 3, 73, 1072, 8, 73, 1, 73, 3, 73, 1075,
		8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1084, 8,
		73, 1, 73, 5, 73, 1087, 8, 73, 10, 73, 12, 73, 1090, 9, 73, 1, 73, 3, 73,
		1093, 8, 73, 1, 73, 3, 73, 1096, 8, 73, 5, 73, 1098, 8, 73, 10, 73, 12,
		73, 1101, 9, 73, 1, 73, 3, 73, 1104, 8, 73, 1, 73, 1, 73, 3, 73, 1108,
		8, 73, 1, 74, 1, 74, 5, 74, 1112, 8, 74, 10, 74, 12, 74, 1115, 9, 74, 1,
		74, 3, 74, 1118, 8, 74, 1, 74, 3, 74, 1121, 8, 74, 1, 74, 5, 74, 1124,
		8, 74, 10, 74, 12, 74, 1127, 9, 74, 1, 74, 1, 74, 5, 74, 1131, 8, 74, 10,
		74, 12, 74, 1134, 9, 74, 1, 74, 3, 74, 1137, 8, 74, 1, 74, 3, 74, 1140,
		8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3,
		74, 1151, 8, 74, 1, 74, 1, 74, 3, 74, 1155, 8, 74, 1, 74, 1, 74, 3, 74,
		1159, 8, 74, 1, 74, 5, 74, 1162, 8, 74, 10, 74, 12, 74, 1165, 9, 74, 1,
		74, 3, 74, 1168, 8, 74, 1, 74, 3, 74, 1171, 8, 74, 5, 74, 1173, 8, 74,
		10, 74, 12, 74, 1176, 9, 74, 1, 74, 3, 74, 1179, 8, 74, 1, 74, 1, 74, 3,
		74, 1183, 8, 74, 1, 75, 1, 75, 5, 75, 1187, 8, 75, 10, 75, 12, 75, 1190,
		9, 75, 1, 75, 3, 75, 1193, 8, 75, 1, 75, 3, 75, 1196, 8, 75, 1, 75, 5,
		75, 1199, 8, 75, 10, 75, 12, 75, 1202, 9, 75, 1, 75, 1, 75, 5, 75, 1206,
		8, 75, 10, 75, 12, 75, 1209, 9, 75, 1, 75, 3, 75, 1212, 8, 75, 1, 75, 3,
		75, 1215, 8, 75, 1, 75, 1, 75, 1, 75, 3, 75, 1220, 8, 75, 1, 75, 5, 75,
		1223, 8, 75, 10, 75, 12, 75, 1226, 9, 75, 1, 75, 3, 75, 1229, 8, 75, 1,
		75, 3, 75, 1232, 8, 75, 5, 75, 1234, 8, 75, 10, 75, 12, 75, 1237, 9, 75,
		1, 75, 1, 75, 5, 75, 1241, 8, 75, 10, 75, 12, 75, 1244, 9, 75, 1, 75, 3,
		75, 1247, 8, 75, 1, 75, 3, 75, 1250, 8, 75, 1, 75, 3, 75, 1253, 8, 75,
		1, 75, 1, 75, 3, 75, 1257, 8, 75, 1, 76, 1, 76, 5, 76, 1261, 8, 76, 10,
		76, 12, 76, 1264, 9, 76, 1, 76, 3, 76, 1267, 8, 76, 1, 76, 3, 76, 1270,
		8, 76, 1, 76, 5, 76, 1273, 8, 76, 10, 76, 12, 76, 1276, 9, 76, 1, 76, 1,
		76, 5, 76, 1280, 8, 76, 10, 76, 12, 76, 1283, 9, 76, 1, 76, 3, 76, 1286,
		8, 76, 1, 76, 3, 76, 1289, 8, 76, 1, 76, 1, 76, 1, 76, 3, 76, 1294, 8,
		76, 1, 76, 5, 76, 1297, 8, 76, 10, 76, 12, 76, 1300, 9, 76, 1, 76, 3, 76,
		1303, 8, 76, 1, 76, 3, 76, 1306, 8, 76, 5, 76, 1308, 8, 76, 10, 76, 12,
		76, 1311, 9, 76, 1, 76, 1, 76, 5, 76, 1315, 8, 76, 10, 76, 12, 76, 1318,
		9, 76, 1, 76, 3, 76, 1321, 8, 76, 1, 76, 3, 76, 1324, 8, 76, 1, 76, 3,
		76, 1327, 8, 76, 1, 76, 1, 76, 3, 76, 1331, 8, 76, 1, 77, 1, 77, 5, 77,
		1335, 8, 77, 10, 77, 12, 77, 1338, 9, 77, 1, 77, 3, 77, 1341, 8, 77, 1,
		77, 3, 77, 1344, 8, 77, 1, 77, 5, 77, 1347, 8, 77, 10, 77, 12, 77, 1350,
		9, 77, 1, 77, 1, 77, 5, 77, 1354, 8, 77, 10, 77, 12, 77, 1357, 9, 77, 1,
		77, 3, 77, 1360, 8, 77, 1, 77, 3, 77, 1363, 8, 77, 1, 77, 3, 77, 1366,
		8, 77, 1, 77, 5, 77, 1369, 8, 77, 10, 77, 12, 77, 1372, 9, 77, 1, 77, 3,
		77, 1375, 8, 77, 1, 77, 3, 77, 1378, 8, 77, 1, 77, 3, 77, 1381, 8, 77,
		1, 77, 3, 77, 1384, 8, 77, 1, 77, 1, 77, 3, 77, 1388, 8, 77, 1, 78, 1,
		78, 5, 78, 1392, 8, 78, 10, 78, 12, 78, 1395, 9, 78, 1, 78, 3, 78, 1398,
		8, 78, 1, 78, 3, 78, 1401, 8, 78, 1, 78, 5, 78, 1404, 8, 78, 10, 78, 12,
		78, 1407, 9, 78, 1, 78, 1, 78, 5, 78, 1411, 8, 78, 10, 78, 12, 78, 1414,
		9, 78, 1, 78, 3, 78, 1417, 8, 78, 1, 78, 3, 78, 1420, 8, 78, 1, 78, 1,
		78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 3, 78, 1429, 8, 78, 1, 78, 5, 78,
		1432, 8, 78, 10, 78, 12, 78, 1435, 9, 78, 1, 78, 3, 78, 1438, 8, 78, 1,
		78, 3, 78, 1441, 8, 78, 5, 78, 1443, 8, 78, 10, 78, 12, 78, 1446, 9, 78,
		1, 78, 3, 78, 1449, 8, 78, 1, 78, 1, 78, 3, 78, 1453, 8, 78, 1, 79, 1,
		79, 5, 79, 1457, 8, 79, 10, 79, 12, 79, 1460, 9, 79, 1, 79, 3, 79, 1463,
		8, 79, 1, 79, 3, 79, 1466, 8, 79, 1, 79, 5, 79, 1469, 8, 79, 10, 79, 12,
		79, 1472, 9, 79, 1, 79, 1, 79, 5, 79, 1476, 8, 79, 10, 79, 12, 79, 1479,
		9, 79, 1, 79, 3, 79, 1482, 8, 79, 1, 79, 3, 79, 1485, 8, 79, 1, 79, 1,
		79, 1, 79, 3, 79, 1490, 8, 79, 1, 79, 5, 79, 1493, 8, 79, 10, 79, 12, 79,
		1496, 9, 79, 1, 79, 3, 79, 1499, 8, 79, 1, 79, 3, 79, 1502, 8, 79, 5, 79,
		1504, 8, 79, 10, 79, 12, 79, 1507, 9, 79, 1, 79, 1, 79, 5, 79, 1511, 8,
		79, 10, 79, 12, 79, 1514, 9, 79, 1, 79, 3, 79, 1517, 8, 79, 1, 79, 3, 79,
		1520, 8, 79, 1, 79, 1, 79, 5, 79, 1524, 8, 79, 10, 79, 12, 79, 1527, 9,
		79, 1, 79, 3, 79, 1530, 8, 79, 1, 79, 3, 79, 1533, 8, 79, 3, 79, 1535,
		8, 79, 1, 79, 3, 79, 1538, 8, 79, 1, 79, 1, 79, 3, 79, 1542, 8, 79, 1,
		80, 1, 80, 5, 80, 1546, 8, 80, 10, 80, 12, 80, 1549, 9, 80, 1, 80, 3, 80,
		1552, 8, 80, 1, 80, 3, 80, 1555, 8, 80, 1, 80, 5, 80, 1558, 8, 80, 10,
		80, 12, 80, 1561, 9, 80, 1, 80, 1, 80, 5, 80, 1565, 8, 80, 10, 80, 12,
		80, 1568, 9, 80, 1, 80, 3, 80, 1571, 8, 80, 1, 80, 3, 80, 1574, 8, 80,
		1, 80, 1, 80, 1, 80, 3, 80, 1579, 8, 80, 1, 80, 5, 80, 1582, 8, 80, 10,
		80, 12, 80, 1585, 9, 80, 1, 80, 3, 80, 1588, 8, 80, 1, 80, 3, 80, 1591,
		8, 80, 5, 80, 1593, 8, 80, 10, 80, 12, 80, 1596, 9, 80, 1, 80, 1, 80, 5,
		80, 1600, 8, 80, 10, 80, 12, 80, 1603, 9, 80, 1, 80, 3, 80, 1606, 8, 80,
		1, 80, 3, 80, 1609, 8, 80, 1, 80, 1, 80, 5, 80, 1613, 8, 80, 10, 80, 12,
		80, 1616, 9, 80, 1, 80, 3, 80, 1619, 8, 80, 1, 80, 3, 80, 1622, 8, 80,
		1, 80, 1, 80, 5, 80, 1626, 8, 80, 10, 80, 12, 80, 1629, 9, 80, 1, 80, 3,
		80, 1632, 8, 80, 1, 80, 3, 80, 1635, 8, 80, 3, 80, 1637, 8, 80, 1, 80,
		3, 80, 1640, 8, 80, 1, 80, 1, 80, 3, 80, 1644, 8, 80, 1, 80, 0, 0, 81,
		0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,
		38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,
		74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106,
		108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136,
		138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 0, 2, 1, 1,
		54, 54, 1, 0, 44, 52, 1891, 0, 163, 1, 0, 0, 0, 2, 184, 1, 0, 0, 0, 4,
		198, 1, 0, 0, 0, 6, 212, 1, 0, 0, 0, 8, 226, 1, 0, 0, 0, 10, 240, 1, 0,
		0, 0, 12, 254, 1, 0, 0, 0, 14, 268, 1, 0, 0, 0, 16, 282, 1, 0, 0, 0, 18,
		296, 1, 0, 0, 0, 20, 315, 1, 0, 0, 0, 22, 319, 1, 0, 0, 0, 24, 322, 1,
		0, 0, 0, 26, 325, 1, 0, 0, 0, 28, 328, 1, 0, 0, 0, 30, 331, 1, 0, 0, 0,
		32, 334, 1, 0, 0, 0, 34, 337, 1, 0, 0, 0, 36, 340, 1, 0, 0, 0, 38, 376,
		1, 0, 0, 0, 40, 381, 1, 0, 0, 0, 42, 383, 1, 0, 0, 0, 44, 385, 1, 0, 0,
		0, 46, 387, 1, 0, 0, 0, 48, 390, 1, 0, 0, 0, 50, 405, 1, 0, 0, 0, 52, 420,
		1, 0, 0, 0, 54, 435, 1, 0, 0, 0, 56, 450, 1, 0, 0, 0, 58, 465, 1, 0, 0,
		0, 60, 478, 1, 0, 0, 0, 62, 491, 1, 0, 0, 0, 64, 504, 1, 0, 0, 0, 66, 517,
		1, 0, 0, 0, 68, 530, 1, 0, 0, 0, 70, 545, 1, 0, 0, 0, 72, 560, 1, 0, 0,
		0, 74, 579, 1, 0, 0, 0, 76, 592, 1, 0, 0, 0, 78, 605, 1, 0, 0, 0, 80, 620,
		1, 0, 0, 0, 82, 635, 1, 0, 0, 0, 84, 642, 1, 0, 0, 0, 86, 649, 1, 0, 0,
		0, 88, 656, 1, 0, 0, 0, 90, 662, 1, 0, 0, 0, 92, 664, 1, 0, 0, 0, 94, 670,
		1, 0, 0, 0, 96, 672, 1, 0, 0, 0, 98, 674, 1, 0, 0, 0, 100, 676, 1, 0, 0,
		0, 102, 678, 1, 0, 0, 0, 104, 686, 1, 0, 0, 0, 106, 690, 1, 0, 0, 0, 108,
		692, 1, 0, 0, 0, 110, 696, 1, 0, 0, 0, 112, 698, 1, 0, 0, 0, 114, 701,
		1, 0, 0, 0, 116, 703, 1, 0, 0, 0, 118, 705, 1, 0, 0, 0, 120, 709, 1, 0,
		0, 0, 122, 713, 1, 0, 0, 0, 124, 715, 1, 0, 0, 0, 126, 717, 1, 0, 0, 0,
		128, 719, 1, 0, 0, 0, 130, 721, 1, 0, 0, 0, 132, 797, 1, 0, 0, 0, 134,
		799, 1, 0, 0, 0, 136, 877, 1, 0, 0, 0, 138, 880, 1, 0, 0, 0, 140, 885,
		1, 0, 0, 0, 142, 1040, 1, 0, 0, 0, 144, 1042, 1, 0, 0, 0, 146, 1044, 1,
		0, 0, 0, 148, 1109, 1, 0, 0, 0, 150, 1184, 1, 0, 0, 0, 152, 1258, 1, 0,
		0, 0, 154, 1332, 1, 0, 0, 0, 156, 1389, 1, 0, 0, 0, 158, 1454, 1, 0, 0,
		0, 160, 1543, 1, 0, 0, 0, 162, 164, 5, 54, 0, 0, 163, 162, 1, 0, 0, 0,
		163, 164, 1, 0, 0, 0, 164, 166, 1, 0, 0, 0, 165, 167, 5, 55, 0, 0, 166,
		165, 1, 0, 0, 0, 166, 167, 1, 0, 0, 0, 167, 169, 1, 0, 0, 0, 168, 170,
		3, 100, 50, 0, 169, 168, 1, 0, 0, 0, 169, 170, 1, 0, 0, 0, 170, 171, 1,
		0, 0, 0, 171, 172, 3, 2, 1, 0, 172, 173, 5, 0, 0, 1, 173, 1, 1, 0, 0, 0,
		174, 185, 5, 55, 0, 0, 175, 185, 3, 20, 10, 0, 176, 185, 3, 12, 6, 0, 177,
		185, 3, 8, 4, 0, 178, 185, 3, 6, 3, 0, 179, 185, 3, 10, 5, 0, 180, 185,
		3, 4, 2, 0, 181, 185, 3, 18, 9, 0, 182, 185, 3, 16, 8, 0, 183, 185, 3,
		14, 7, 0, 184, 174, 1, 0, 0, 0, 184, 175, 1, 0, 0, 0, 184, 176, 1, 0, 0,
		0, 184, 177, 1, 0, 0, 0, 184, 178, 1, 0, 0, 0, 184, 179, 1, 0, 0, 0, 184,
		180, 1, 0, 0, 0, 184, 181, 1, 0, 0, 0, 184, 182, 1, 0, 0, 0, 184, 183,
		1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 184, 1, 0, 0, 0, 186, 187, 1, 0,
		0, 0, 187, 3, 1, 0, 0, 0, 188, 189, 3, 22, 11, 0, 189, 193, 3, 146, 73,
		0, 190, 192, 5, 53, 0, 0, 191, 190, 1, 0, 0, 0, 192, 195, 1, 0, 0, 0, 193,
		191, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 196, 1, 0, 0, 0, 195, 193,
		1, 0, 0, 0, 196, 197, 7, 0, 0, 0, 197, 199, 1, 0, 0, 0, 198, 188, 1, 0,
		0, 0, 199, 200, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0,
		201, 5, 1, 0, 0, 0, 202, 203, 3, 34, 17, 0, 203, 207, 3, 148, 74, 0, 204,
		206, 5, 53, 0, 0, 205, 204, 1, 0, 0, 0, 206, 209, 1, 0, 0, 0, 207, 205,
		1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 210, 1, 0, 0, 0, 209, 207, 1, 0,
		0, 0, 210, 211, 7, 0, 0, 0, 211, 213, 1, 0, 0, 0, 212, 202, 1, 0, 0, 0,
		213, 214, 1, 0, 0, 0, 214, 212, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215,
		7, 1, 0, 0, 0, 216, 217, 3, 24, 12, 0, 217, 221, 3, 150, 75, 0, 218, 220,
		5, 53, 0, 0, 219, 218, 1, 0, 0, 0, 220, 223, 1, 0, 0, 0, 221, 219, 1, 0,
		0, 0, 221, 222, 1, 0, 0, 0, 222, 224, 1, 0, 0, 0, 223, 221, 1, 0, 0, 0,
		224, 225, 7, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 216, 1, 0, 0, 0, 227,
		228, 1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229, 9, 1,
		0, 0, 0, 230, 231, 3, 26, 13, 0, 231, 235, 3, 152, 76, 0, 232, 234, 5,
		53, 0, 0, 233, 232, 1, 0, 0, 0, 234, 237, 1, 0, 0, 0, 235, 233, 1, 0, 0,
		0, 235, 236, 1, 0, 0, 0, 236, 238, 1, 0, 0, 0, 237, 235, 1, 0, 0, 0, 238,
		239, 7, 0, 0, 0, 239, 241, 1, 0, 0, 0, 240, 230, 1, 0, 0, 0, 241, 242,
		1, 0, 0, 0, 242, 240, 1, 0, 0, 0, 242, 243, 1, 0, 0, 0, 243, 11, 1, 0,
		0, 0, 244, 245, 3, 28, 14, 0, 245, 249, 3, 154, 77, 0, 246, 248, 5, 53,
		0, 0, 247, 246, 1, 0, 0, 0, 248, 251, 1, 0, 0, 0, 249, 247, 1, 0, 0, 0,
		249, 250, 1, 0, 0, 0, 250, 252, 1, 0, 0, 0, 251, 249, 1, 0, 0, 0, 252,
		253, 7, 0, 0, 0, 253, 255, 1, 0, 0, 0, 254, 244, 1, 0, 0, 0, 255, 256,
		1, 0, 0, 0, 256, 254, 1, 0, 0, 0, 256, 257, 1, 0, 0, 0, 257, 13, 1, 0,
		0, 0, 258, 259, 3, 32, 16, 0, 259, 263, 3, 158, 79, 0, 260, 262, 5, 53,
		0, 0, 261, 260, 1, 0, 0, 0, 262, 265, 1, 0, 0, 0, 263, 261, 1, 0, 0, 0,
		263, 264, 1, 0, 0, 0, 264, 266, 1, 0, 0, 0, 265, 263, 1, 0, 0, 0, 266,
		267, 7, 0, 0, 0, 267, 269, 1, 0, 0, 0, 268, 258, 1, 0, 0, 0, 269, 270,
		1, 0, 0, 0, 270, 268, 1, 0, 0, 0, 270, 271, 1, 0, 0, 0, 271, 15, 1, 0,
		0, 0, 272, 273, 3, 36, 18, 0, 273, 277, 3, 160, 80, 0, 274, 276, 5, 53,
		0, 0, 275, 274, 1, 0, 0, 0, 276, 279, 1, 0, 0, 0, 277, 275, 1, 0, 0, 0,
		277, 278, 1, 0, 0, 0, 278, 280, 1, 0, 0, 0, 279, 277, 1, 0, 0, 0, 280,
		281, 7, 0, 0, 0, 281, 283, 1, 0, 0, 0, 282, 272, 1, 0, 0, 0, 283, 284,
		1, 0, 0, 0, 284, 282, 1, 0, 0, 0, 284, 285, 1, 0, 0, 0, 285, 17, 1, 0,
		0, 0, 286, 287, 3, 30, 15, 0, 287, 291, 3, 156, 78, 0, 288, 290, 5, 53,
		0, 0, 289, 288, 1, 0, 0, 0, 290, 293, 1, 0, 0, 0, 291, 289, 1, 0, 0, 0,
		291, 292, 1, 0, 0, 0, 292, 294, 1, 0, 0, 0, 293, 291, 1, 0, 0, 0, 294,
		295, 7, 0, 0, 0, 295, 297, 1, 0, 0, 0, 296, 286, 1, 0, 0, 0, 297, 298,
		1, 0, 0, 0, 298, 296, 1, 0, 0, 0, 298, 299, 1, 0, 0, 0, 299, 19, 1, 0,
		0, 0, 300, 302, 5, 1, 0, 0, 301, 303, 5, 53, 0, 0, 302, 301, 1, 0, 0, 0,
		303, 304, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305,
		306, 1, 0, 0, 0, 306, 310, 3, 102, 51, 0, 307, 309, 5, 53, 0, 0, 308, 307,
		1, 0, 0, 0, 309, 312, 1, 0, 0, 0, 310, 308, 1, 0, 0, 0, 310, 311, 1, 0,
		0, 0, 311, 313, 1, 0, 0, 0, 312, 310, 1, 0, 0, 0, 313, 314, 7, 0, 0, 0,
		314, 316, 1, 0, 0, 0, 315, 300, 1, 0, 0, 0, 316, 317, 1, 0, 0, 0, 317,
		315, 1, 0, 0, 0, 317, 318, 1, 0, 0, 0, 318, 21, 1, 0, 0, 0, 319, 320, 5,
		45, 0, 0, 320, 321, 3, 38, 19, 0, 321, 23, 1, 0, 0, 0, 322, 323, 5, 48,
		0, 0, 323, 324, 3, 38, 19, 0, 324, 25, 1, 0, 0, 0, 325, 326, 5, 49, 0,
		0, 326, 327, 3, 38, 19, 0, 327, 27, 1, 0, 0, 0, 328, 329, 5, 47, 0, 0,
		329, 330, 3, 38, 19, 0, 330, 29, 1, 0, 0, 0, 331, 332, 5, 51, 0, 0, 332,
		333, 3, 38, 19, 0, 333, 31, 1, 0, 0, 0, 334, 335, 5, 50, 0, 0, 335, 336,
		3, 38, 19, 0, 336, 33, 1, 0, 0, 0, 337, 338, 5, 46, 0, 0, 338, 339, 3,
		38, 19, 0, 339, 35, 1, 0, 0, 0, 340, 341, 5, 44, 0, 0, 341, 342, 3, 38,
		19, 0, 342, 37, 1, 0, 0, 0, 343, 345, 5, 53, 0, 0, 344, 343, 1, 0, 0, 0,
		345, 348, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 346, 347, 1, 0, 0, 0, 347,
		349, 1, 0, 0, 0, 348, 346, 1, 0, 0, 0, 349, 353, 5, 2, 0, 0, 350, 352,
		5, 53, 0, 0, 351, 350, 1, 0, 0, 0, 352, 355, 1, 0, 0, 0, 353, 351, 1, 0,
		0, 0, 353, 354, 1, 0, 0, 0, 354, 370, 1, 0, 0, 0, 355, 353, 1, 0, 0, 0,
		356, 358, 5, 53, 0, 0, 357, 356, 1, 0, 0, 0, 358, 361, 1, 0, 0, 0, 359,
		357, 1, 0, 0, 0, 359, 360, 1, 0, 0, 0, 360, 362, 1, 0, 0, 0, 361, 359,
		1, 0, 0, 0, 362, 366, 5, 3, 0, 0, 363, 365, 5, 53, 0, 0, 364, 363, 1, 0,
		0, 0, 365, 368, 1, 0, 0, 0, 366, 364, 1, 0, 0, 0, 366, 367, 1, 0, 0, 0,
		367, 370, 1, 0, 0, 0, 368, 366, 1, 0, 0, 0, 369, 346, 1, 0, 0, 0, 369,
		359, 1, 0, 0, 0, 370, 377, 1, 0, 0, 0, 371, 373, 5, 53, 0, 0, 372, 371,
		1, 0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 374, 375, 1, 0,
		0, 0, 375, 377, 1, 0, 0, 0, 376, 369, 1, 0, 0, 0, 376, 372, 1, 0, 0, 0,
		377, 39, 1, 0, 0, 0, 378, 382, 3, 44, 22, 0, 379, 382, 3, 46, 23, 0, 380,
		382, 3, 42, 21, 0, 381, 378, 1, 0, 0, 0, 381, 379, 1, 0, 0, 0, 381, 380,
		1, 0, 0, 0, 382, 41, 1, 0, 0, 0, 383, 384, 5, 4, 0, 0, 384, 43, 1, 0, 0,
		0, 385, 386, 5, 5, 0, 0, 386, 45, 1, 0, 0, 0, 387, 388, 5, 6, 0, 0, 388,
		47, 1, 0, 0, 0, 389, 391, 5, 53, 0, 0, 390, 389, 1, 0, 0, 0, 391, 392,
		1, 0, 0, 0, 392, 390, 1, 0, 0, 0, 392, 393, 1, 0, 0, 0, 393, 394, 1, 0,
		0, 0, 394, 396, 5, 7, 0, 0, 395, 397, 5, 53, 0, 0, 396, 395, 1, 0, 0, 0,
		397, 398, 1, 0, 0, 0, 398, 396, 1, 0, 0, 0, 398, 399, 1, 0, 0, 0, 399,
		402, 1, 0, 0, 0, 400, 403, 3, 132, 66, 0, 401, 403, 3, 134, 67, 0, 402,
		400, 1, 0, 0, 0, 402, 401, 1, 0, 0, 0, 403, 49, 1, 0, 0, 0, 404, 406, 5,
		53, 0, 0, 405, 404, 1, 0, 0, 0, 406, 407, 1, 0, 0, 0, 407, 405, 1, 0, 0,
		0, 407, 408, 1, 0, 0, 0, 408, 409, 1, 0, 0, 0, 409, 411, 5, 8, 0, 0, 410,
		412, 5, 53, 0, 0, 411, 410, 1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 413, 411,
		1, 0, 0, 0, 413, 414, 1, 0, 0, 0, 414, 417, 1, 0, 0, 0, 415, 418, 3, 132,
		66, 0, 416, 418, 3, 134, 67, 0, 417, 415, 1, 0, 0, 0, 417, 416, 1, 0, 0,
		0, 418, 51, 1, 0, 0, 0, 419, 421, 5, 53, 0, 0, 420, 419, 1, 0, 0, 0, 421,
		422, 1, 0, 0, 0, 422, 420, 1, 0, 0, 0, 422, 423, 1, 0, 0, 0, 423, 424,
		1, 0, 0, 0, 424, 426, 5, 9, 0, 0, 425, 427, 5, 53, 0, 0, 426, 425, 1, 0,
		0, 0, 427, 428, 1, 0, 0, 0, 428, 426, 1, 0, 0, 0, 428, 429, 1, 0, 0, 0,
		429, 432, 1, 0, 0, 0, 430, 433, 3, 132, 66, 0, 431, 433, 3, 134, 67, 0,
		432, 430, 1, 0, 0, 0, 432, 431, 1, 0, 0, 0, 433, 53, 1, 0, 0, 0, 434, 436,
		5, 53, 0, 0, 435, 434, 1, 0, 0, 0, 436, 437, 1, 0, 0, 0, 437, 435, 1, 0,
		0, 0, 437, 438, 1, 0, 0, 0, 438, 439, 1, 0, 0, 0, 439, 441, 5, 10, 0, 0,
		440, 442, 5, 53, 0, 0, 441, 440, 1, 0, 0, 0, 442, 443, 1, 0, 0, 0, 443,
		441, 1, 0, 0, 0, 443, 444, 1, 0, 0, 0, 444, 447, 1, 0, 0, 0, 445, 448,
		3, 132, 66, 0, 446, 448, 3, 134, 67, 0, 447, 445, 1, 0, 0, 0, 447, 446,
		1, 0, 0, 0, 448, 55, 1, 0, 0, 0, 449, 451, 5, 53, 0, 0, 450, 449, 1, 0,
		0, 0, 451, 452, 1, 0, 0, 0, 452, 450, 1, 0, 0, 0, 452, 453, 1, 0, 0, 0,
		453, 454, 1, 0, 0, 0, 454, 456, 5, 11, 0, 0, 455, 457, 5, 53, 0, 0, 456,
		455, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458, 456, 1, 0, 0, 0, 458, 459,
		1, 0, 0, 0, 459, 462, 1, 0, 0, 0, 460, 463, 3, 132, 66, 0, 461, 463, 3,
		134, 67, 0, 462, 460, 1, 0, 0, 0, 462, 461, 1, 0, 0, 0, 463, 57, 1, 0,
		0, 0, 464, 466, 5, 53, 0, 0, 465, 464, 1, 0, 0, 0, 466, 467, 1, 0, 0, 0,
		467, 465, 1, 0, 0, 0, 467, 468, 1, 0, 0, 0, 468, 469, 1, 0, 0, 0, 469,
		471, 5, 12, 0, 0, 470, 472, 5, 53, 0, 0, 471, 470, 1, 0, 0, 0, 472, 473,
		1, 0, 0, 0, 473, 471, 1, 0, 0, 0, 473, 474, 1, 0, 0, 0, 474, 475, 1, 0,
		0, 0, 475, 476, 3, 132, 66, 0, 476, 59, 1, 0, 0, 0, 477, 479, 5, 53, 0,
		0, 478, 477, 1, 0, 0, 0, 479, 480, 1, 0, 0, 0, 480, 478, 1, 0, 0, 0, 480,
		481, 1, 0, 0, 0, 481, 482, 1, 0, 0, 0, 482, 484, 5, 13, 0, 0, 483, 485,
		5, 53, 0, 0, 484, 483, 1, 0, 0, 0, 485, 486, 1, 0, 0, 0, 486, 484, 1, 0,
		0, 0, 486, 487, 1, 0, 0, 0, 487, 488, 1, 0, 0, 0, 488, 489, 3, 132, 66,
		0, 489, 61, 1, 0, 0, 0, 490, 492, 5, 53, 0, 0, 491, 490, 1, 0, 0, 0, 492,
		493, 1, 0, 0, 0, 493, 491, 1, 0, 0, 0, 493, 494, 1, 0, 0, 0, 494, 495,
		1, 0, 0, 0, 495, 497, 5, 14, 0, 0, 496, 498, 5, 53, 0, 0, 497, 496, 1,
		0, 0, 0, 498, 499, 1, 0, 0, 0, 499, 497, 1, 0, 0, 0, 499, 500, 1, 0, 0,
		0, 500, 501, 1, 0, 0, 0, 501, 502, 3, 132, 66, 0, 502, 63, 1, 0, 0, 0,
		503, 505, 5, 53, 0, 0, 504, 503, 1, 0, 0, 0, 505, 506, 1, 0, 0, 0, 506,
		504, 1, 0, 0, 0, 506, 507, 1, 0, 0, 0, 507, 508, 1, 0, 0, 0, 508, 510,
		5, 15, 0, 0, 509, 511, 5, 53, 0, 0, 510, 509, 1, 0, 0, 0, 511, 512, 1,
		0, 0, 0, 512, 510, 1, 0, 0, 0, 512, 513, 1, 0, 0, 0, 513, 514, 1, 0, 0,
		0, 514, 515, 3, 132, 66, 0, 515, 65, 1, 0, 0, 0, 516, 518, 5, 53, 0, 0,
		517, 516, 1, 0, 0, 0, 518, 519, 1, 0, 0, 0, 519, 517, 1, 0, 0, 0, 519,
		520, 1, 0, 0, 0, 520, 521, 1, 0, 0, 0, 521, 523, 5, 16, 0, 0, 522, 524,
		5, 53, 0, 0, 523, 522, 1, 0, 0, 0, 524, 525, 1, 0, 0, 0, 525, 523, 1, 0,
		0, 0, 525, 526, 1, 0, 0, 0, 526, 527, 1, 0, 0, 0, 527, 528, 3, 132, 66,
		0, 528, 67, 1, 0, 0, 0, 529, 531, 5, 53, 0, 0, 530, 529, 1, 0, 0, 0, 531,
		532, 1, 0, 0, 0, 532, 530, 1, 0, 0, 0, 532, 533, 1, 0, 0, 0, 533, 534,
		1, 0, 0, 0, 534, 536, 5, 16, 0, 0, 535, 537, 5, 53, 0, 0, 536, 535, 1,
		0, 0, 0, 537, 538, 1, 0, 0, 0, 538, 536, 1, 0, 0, 0, 538, 539, 1, 0, 0,
		0, 539, 542, 1, 0, 0, 0, 540, 543, 3, 132, 66, 0, 541, 543, 3, 134, 67,
		0, 542, 540, 1, 0, 0, 0, 542, 541, 1, 0, 0, 0, 543, 69, 1, 0, 0, 0, 544,
		546, 5, 53, 0, 0, 545, 544, 1, 0, 0, 0, 546, 547, 1, 0, 0, 0, 547, 545,
		1, 0, 0, 0, 547, 548, 1, 0, 0, 0, 548, 549, 1, 0, 0, 0, 549, 551, 5, 16,
		0, 0, 550, 552, 5, 53, 0, 0, 551, 550, 1, 0, 0, 0, 552, 553, 1, 0, 0, 0,
		553, 551, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554, 557, 1, 0, 0, 0, 555,
		558, 3, 92, 46, 0, 556, 558, 3, 130, 65, 0, 557, 555, 1, 0, 0, 0, 557,
		556, 1, 0, 0, 0, 558, 71, 1, 0, 0, 0, 559, 561, 5, 53, 0, 0, 560, 559,
		1, 0, 0, 0, 561, 562, 1, 0, 0, 0, 562, 560, 1, 0, 0, 0, 562, 563, 1, 0,
		0, 0, 563, 564, 1, 0, 0, 0, 564, 569, 5, 17, 0, 0, 565, 567, 5, 18, 0,
		0, 566, 568, 5, 19, 0, 0, 567, 566, 1, 0, 0, 0, 567, 568, 1, 0, 0, 0, 568,
		570, 1, 0, 0, 0, 569, 565, 1, 0, 0, 0, 569, 570, 1, 0, 0, 0, 570, 572,
		1, 0, 0, 0, 571, 573, 5, 53, 0, 0, 572, 571, 1, 0, 0, 0, 573, 574, 1, 0,
		0, 0, 574, 572, 1, 0, 0, 0, 574, 575, 1, 0, 0, 0, 575, 576, 1, 0, 0, 0,
		576, 577, 3, 132, 66, 0, 577, 73, 1, 0, 0, 0, 578, 580, 5, 53, 0, 0, 579,
		578, 1, 0, 0, 0, 580, 581, 1, 0, 0, 0, 581, 579, 1, 0, 0, 0, 581, 582,
		1, 0, 0, 0, 582, 583, 1, 0, 0, 0, 583, 585, 5, 20, 0, 0, 584, 586, 5, 53,
		0, 0, 585, 584, 1, 0, 0, 0, 586, 587, 1, 0, 0, 0, 587, 585, 1, 0, 0, 0,
		587, 588, 1, 0, 0, 0, 588, 589, 1, 0, 0, 0, 589, 590, 3, 142, 71, 0, 590,
		75, 1, 0, 0, 0, 591, 593, 5, 53, 0, 0, 592, 591, 1, 0, 0, 0, 593, 594,
		1, 0, 0, 0, 594, 592, 1, 0, 0, 0, 594, 595, 1, 0, 0, 0, 595, 596, 1, 0,
		0, 0, 596, 598, 5, 21, 0, 0, 597, 599, 5, 53, 0, 0, 598, 597, 1, 0, 0,
		0, 599, 600, 1, 0, 0, 0, 600, 598, 1, 0, 0, 0, 600, 601, 1, 0, 0, 0, 601,
		602, 1, 0, 0, 0, 602, 603, 3, 94, 47, 0, 603, 77, 1, 0, 0, 0, 604, 606,
		5, 53, 0, 0, 605, 604, 1, 0, 0, 0, 606, 607, 1, 0, 0, 0, 607, 605, 1, 0,
		0, 0, 607, 608, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 609, 611, 5, 22, 0, 0,
		610, 612, 5, 53, 0, 0, 611, 610, 1, 0, 0, 0, 612, 613, 1, 0, 0, 0, 613,
		611, 1, 0, 0, 0, 613, 614, 1, 0, 0, 0, 614, 617, 1, 0, 0, 0, 615, 618,
		3, 98, 49, 0, 616, 618, 3, 96, 48, 0, 617, 615, 1, 0, 0, 0, 617, 616, 1,
		0, 0, 0, 618, 79, 1, 0, 0, 0, 619, 621, 5, 53, 0, 0, 620, 619, 1, 0, 0,
		0, 621, 622, 1, 0, 0, 0, 622, 620, 1, 0, 0, 0, 622, 623, 1, 0, 0, 0, 623,
		624, 1, 0, 0, 0, 624, 626, 5, 23, 0, 0, 625, 627, 5, 53, 0, 0, 626, 625,
		1, 0, 0, 0, 627, 628, 1, 0, 0, 0, 628, 626, 1, 0, 0, 0, 628, 629, 1, 0,
		0, 0, 629, 632, 1, 0, 0, 0, 630, 633, 3, 114, 57, 0, 631, 633, 3, 96, 48,
		0, 632, 630, 1, 0, 0, 0, 632, 631, 1, 0, 0, 0, 633, 81, 1, 0, 0, 0, 634,
		636, 5, 53, 0, 0, 635, 634, 1, 0, 0, 0, 636, 637, 1, 0, 0, 0, 637, 635,
		1, 0, 0, 0, 637, 638, 1, 0, 0, 0, 638, 639, 1, 0, 0, 0, 639, 640, 5, 24,
		0, 0, 640, 83, 1, 0, 0, 0, 641, 643, 5, 53, 0, 0, 642, 641, 1, 0, 0, 0,
		643, 644, 1, 0, 0, 0, 644, 642, 1, 0, 0, 0, 644, 645, 1, 0, 0, 0, 645,
		646, 1, 0, 0, 0, 646, 647, 5, 25, 0, 0, 647, 85, 1, 0, 0, 0, 648, 650,
		5, 53, 0, 0, 649, 648, 1, 0, 0, 0, 650, 651, 1, 0, 0, 0, 651, 649, 1, 0,
		0, 0, 651, 652, 1, 0, 0, 0, 652, 653, 1, 0, 0, 0, 653, 654, 5, 26, 0, 0,
		654, 87, 1, 0, 0, 0, 655, 657, 5, 53, 0, 0, 656, 655, 1, 0, 0, 0, 657,
		658, 1, 0, 0, 0, 658, 656, 1, 0, 0, 0, 658, 659, 1, 0, 0, 0, 659, 660,
		1, 0, 0, 0, 660, 661, 5, 27, 0, 0, 661, 89, 1, 0, 0, 0, 662, 663, 5, 42,
		0, 0, 663, 91, 1, 0, 0, 0, 664, 665, 3, 118, 59, 0, 665, 93, 1, 0, 0, 0,
		666, 671, 3, 122, 61, 0, 667, 671, 3, 124, 62, 0, 668, 671, 3, 126, 63,
		0, 669, 671, 3, 128, 64, 0, 670, 666, 1, 0, 0, 0, 670, 667, 1, 0, 0, 0,
		670, 668, 1, 0, 0, 0, 670, 669, 1, 0, 0, 0, 671, 95, 1, 0, 0, 0, 672, 673,
		5, 40, 0, 0, 673, 97, 1, 0, 0, 0, 674, 675, 5, 41, 0, 0, 675, 99, 1, 0,
		0, 0, 676, 677, 5, 39, 0, 0, 677, 101, 1, 0, 0, 0, 678, 680, 3, 144, 72,
		0, 679, 681, 5, 53, 0, 0, 680, 679, 1, 0, 0, 0, 681, 682, 1, 0, 0, 0, 682,
		680, 1, 0, 0, 0, 682, 683, 1, 0, 0, 0, 683, 684, 1, 0, 0, 0, 684, 685,
		3, 110, 55, 0, 685, 103, 1, 0, 0, 0, 686, 688, 3, 132, 66, 0, 687, 689,
		3, 120, 60, 0, 688, 687, 1, 0, 0, 0, 688, 689, 1, 0, 0, 0, 689, 105, 1,
		0, 0, 0, 690, 691, 5, 33, 0, 0, 691, 107, 1, 0, 0, 0, 692, 693, 5, 34,
		0, 0, 693, 109, 1, 0, 0, 0, 694, 697, 3, 112, 56, 0, 695, 697, 3, 114,
		57, 0, 696, 694, 1, 0, 0, 0, 696, 695, 1, 0, 0, 0, 697, 111, 1, 0, 0, 0,
		698, 699, 3, 144, 72, 0, 699, 700, 3, 116, 58, 0, 700, 113, 1, 0, 0, 0,
		701, 702, 5, 37, 0, 0, 702, 115, 1, 0, 0, 0, 703, 704, 5, 36, 0, 0, 704,
		117, 1, 0, 0, 0, 705, 706, 5, 43, 0, 0, 706, 119, 1, 0, 0, 0, 707, 708,
		5, 28, 0, 0, 708, 710, 3, 144, 72, 0, 709, 707, 1, 0, 0, 0, 710, 711, 1,
		0, 0, 0, 711, 709, 1, 0, 0, 0, 711, 712, 1, 0, 0, 0, 712, 121, 1, 0, 0,
		0, 713, 714, 5, 29, 0, 0, 714, 123, 1, 0, 0, 0, 715, 716, 5, 30, 0, 0,
		716, 125, 1, 0, 0, 0, 717, 718, 5, 31, 0, 0, 718, 127, 1, 0, 0, 0, 719,
		720, 5, 32, 0, 0, 720, 129, 1, 0, 0, 0, 721, 725, 3, 106, 53, 0, 722, 724,
		5, 53, 0, 0, 723, 722, 1, 0, 0, 0, 724, 727, 1, 0, 0, 0, 725, 723, 1, 0,
		0, 0, 725, 726, 1, 0, 0, 0, 726, 729, 1, 0, 0, 0, 727, 725, 1, 0, 0, 0,
		728, 730, 5, 55, 0, 0, 729, 728, 1, 0, 0, 0, 729, 730, 1, 0, 0, 0, 730,
		732, 1, 0, 0, 0, 731, 733, 5, 54, 0, 0, 732, 731, 1, 0, 0, 0, 732, 733,
		1, 0, 0, 0, 733, 737, 1, 0, 0, 0, 734, 736, 5, 53, 0, 0, 735, 734, 1, 0,
		0, 0, 736, 739, 1, 0, 0, 0, 737, 735, 1, 0, 0, 0, 737, 738, 1, 0, 0, 0,
		738, 741, 1, 0, 0, 0, 739, 737, 1, 0, 0, 0, 740, 742, 5, 55, 0, 0, 741,
		740, 1, 0, 0, 0, 741, 742, 1, 0, 0, 0, 742, 743, 1, 0, 0, 0, 743, 747,
		3, 92, 46, 0, 744, 746, 5, 53, 0, 0, 745, 744, 1, 0, 0, 0, 746, 749, 1,
		0, 0, 0, 747, 745, 1, 0, 0, 0, 747, 748, 1, 0, 0, 0, 748, 751, 1, 0, 0,
		0, 749, 747, 1, 0, 0, 0, 750, 752, 5, 55, 0, 0, 751, 750, 1, 0, 0, 0, 751,
		752, 1, 0, 0, 0, 752, 754, 1, 0, 0, 0, 753, 755, 5, 54, 0, 0, 754, 753,
		1, 0, 0, 0, 754, 755, 1, 0, 0, 0, 755, 764, 1, 0, 0, 0, 756, 758, 5, 53,
		0, 0, 757, 756, 1, 0, 0, 0, 758, 759, 1, 0, 0, 0, 759, 757, 1, 0, 0, 0,
		759, 760, 1, 0, 0, 0, 760, 761, 1, 0, 0, 0, 761, 763, 3, 92, 46, 0, 762,
		757, 1, 0, 0, 0, 763, 766, 1, 0, 0, 0, 764, 762, 1, 0, 0, 0, 764, 765,
		1, 0, 0, 0, 765, 770, 1, 0, 0, 0, 766, 764, 1, 0, 0, 0, 767, 769, 5, 53,
		0, 0, 768, 767, 1, 0, 0, 0, 769, 772, 1, 0, 0, 0, 770, 768, 1, 0, 0, 0,
		770, 771, 1, 0, 0, 0, 771, 774, 1, 0, 0, 0, 772, 770, 1, 0, 0, 0, 773,
		775, 5, 55, 0, 0, 774, 773, 1, 0, 0, 0, 774, 775, 1, 0, 0, 0, 775, 777,
		1, 0, 0, 0, 776, 778, 5, 54, 0, 0, 777, 776, 1, 0, 0, 0, 777, 778, 1, 0,
		0, 0, 778, 782, 1, 0, 0, 0, 779, 781, 5, 53, 0, 0, 780, 779, 1, 0, 0, 0,
		781, 784, 1, 0, 0, 0, 782, 780, 1, 0, 0, 0, 782, 783, 1, 0, 0, 0, 783,
		785, 1, 0, 0, 0, 784, 782, 1, 0, 0, 0, 785, 789, 3, 108, 54, 0, 786, 788,
		5, 53, 0, 0, 787, 786, 1, 0, 0, 0, 788, 791, 1, 0, 0, 0, 789, 787, 1, 0,
		0, 0, 789, 790, 1, 0, 0, 0, 790, 793, 1, 0, 0, 0, 791, 789, 1, 0, 0, 0,
		792, 794, 5, 55, 0, 0, 793, 792, 1, 0, 0, 0, 793, 794, 1, 0, 0, 0, 794,
		131, 1, 0, 0, 0, 795, 798, 3, 144, 72, 0, 796, 798, 3, 114, 57, 0, 797,
		795, 1, 0, 0, 0, 797, 796, 1, 0, 0, 0, 798, 133, 1, 0, 0, 0, 799, 803,
		3, 106, 53, 0, 800, 802, 5, 53, 0, 0, 801, 800, 1, 0, 0, 0, 802, 805, 1,
		0, 0, 0, 803, 801, 1, 0, 0, 0, 803, 804, 1, 0, 0, 0, 804, 807, 1, 0, 0,
		0, 805, 803, 1, 0, 0, 0, 806, 808, 5, 55, 0, 0, 807, 806, 1, 0, 0, 0, 807,
		808, 1, 0, 0, 0, 808, 810, 1, 0, 0, 0, 809, 811, 5, 54, 0, 0, 810, 809,
		1, 0, 0, 0, 810, 811, 1, 0, 0, 0, 811, 815, 1, 0, 0, 0, 812, 814, 5, 53,
		0, 0, 813, 812, 1, 0, 0, 0, 814, 817, 1, 0, 0, 0, 815, 813, 1, 0, 0, 0,
		815, 816, 1, 0, 0, 0, 816, 818, 1, 0, 0, 0, 817, 815, 1, 0, 0, 0, 818,
		822, 3, 132, 66, 0, 819, 821, 5, 53, 0, 0, 820, 819, 1, 0, 0, 0, 821, 824,
		1, 0, 0, 0, 822, 820, 1, 0, 0, 0, 822, 823, 1, 0, 0, 0, 823, 826, 1, 0,
		0, 0, 824, 822, 1, 0, 0, 0, 825, 827, 5, 55, 0, 0, 826, 825, 1, 0, 0, 0,
		826, 827, 1, 0, 0, 0, 827, 829, 1, 0, 0, 0, 828, 830, 5, 54, 0, 0, 829,
		828, 1, 0, 0, 0, 829, 830, 1, 0, 0, 0, 830, 841, 1, 0, 0, 0, 831, 835,
		5, 35, 0, 0, 832, 834, 5, 53, 0, 0, 833, 832, 1, 0, 0, 0, 834, 837, 1,
		0, 0, 0, 835, 833, 1, 0, 0, 0, 835, 836, 1, 0, 0, 0, 836, 838, 1, 0, 0,
		0, 837, 835, 1, 0, 0, 0, 838, 840, 3, 132, 66, 0, 839, 831, 1, 0, 0, 0,
		840, 843, 1, 0, 0, 0, 841, 839, 1, 0, 0, 0, 841, 842, 1, 0, 0, 0, 842,
		847, 1, 0, 0, 0, 843, 841, 1, 0, 0, 0, 844, 846, 5, 53, 0, 0, 845, 844,
		1, 0, 0, 0, 846, 849, 1, 0, 0, 0, 847, 845, 1, 0, 0, 0, 847, 848, 1, 0,
		0, 0, 848, 851, 1, 0, 0, 0, 849, 847, 1, 0, 0, 0, 850, 852, 5, 55, 0, 0,
		851, 850, 1, 0, 0, 0, 851, 852, 1, 0, 0, 0, 852, 854, 1, 0, 0, 0, 853,
		855, 5, 54, 0, 0, 854, 853, 1, 0, 0, 0, 854, 855, 1, 0, 0, 0, 855, 859,
		1, 0, 0, 0, 856, 858, 5, 53, 0, 0, 857, 856, 1, 0, 0, 0, 858, 861, 1, 0,
		0, 0, 859, 857, 1, 0, 0, 0, 859, 860, 1, 0, 0, 0, 860, 863, 1, 0, 0, 0,
		861, 859, 1, 0, 0, 0, 862, 864, 5, 55, 0, 0, 863, 862, 1, 0, 0, 0, 863,
		864, 1, 0, 0, 0, 864, 865, 1, 0, 0, 0, 865, 869, 3, 108, 54, 0, 866, 868,
		5, 53, 0, 0, 867, 866, 1, 0, 0, 0, 868, 871, 1, 0, 0, 0, 869, 867, 1, 0,
		0, 0, 869, 870, 1, 0, 0, 0, 870, 873, 1, 0, 0, 0, 871, 869, 1, 0, 0, 0,
		872, 874, 5, 55, 0, 0, 873, 872, 1, 0, 0, 0, 873, 874, 1, 0, 0, 0, 874,
		135, 1, 0, 0, 0, 875, 878, 3, 98, 49, 0, 876, 878, 3, 96, 48, 0, 877, 875,
		1, 0, 0, 0, 877, 876, 1, 0, 0, 0, 878, 137, 1, 0, 0, 0, 879, 881, 3, 140,
		70, 0, 880, 879, 1, 0, 0, 0, 881, 882, 1, 0, 0, 0, 882, 880, 1, 0, 0, 0,
		882, 883, 1, 0, 0, 0, 883, 139, 1, 0, 0, 0, 884, 886, 5, 54, 0, 0, 885,
		884, 1, 0, 0, 0, 885, 886, 1, 0, 0, 0, 886, 887, 1, 0, 0, 0, 887, 963,
		5, 38, 0, 0, 888, 964, 3, 136, 68, 0, 889, 893, 3, 106, 53, 0, 890, 892,
		5, 53, 0, 0, 891, 890, 1, 0, 0, 0, 892, 895, 1, 0, 0, 0, 893, 891, 1, 0,
		0, 0, 893, 894, 1, 0, 0, 0, 894, 897, 1, 0, 0, 0, 895, 893, 1, 0, 0, 0,
		896, 898, 5, 55, 0, 0, 897, 896, 1, 0, 0, 0, 897, 898, 1, 0, 0, 0, 898,
		900, 1, 0, 0, 0, 899, 901, 5, 54, 0, 0, 900, 899, 1, 0, 0, 0, 900, 901,
		1, 0, 0, 0, 901, 905, 1, 0, 0, 0, 902, 904, 5, 53, 0, 0, 903, 902, 1, 0,
		0, 0, 904, 907, 1, 0, 0, 0, 905, 903, 1, 0, 0, 0, 905, 906, 1, 0, 0, 0,
		906, 909, 1, 0, 0, 0, 907, 905, 1, 0, 0, 0, 908, 910, 5, 55, 0, 0, 909,
		908, 1, 0, 0, 0, 909, 910, 1, 0, 0, 0, 910, 911, 1, 0, 0, 0, 911, 915,
		3, 136, 68, 0, 912, 914, 5, 53, 0, 0, 913, 912, 1, 0, 0, 0, 914, 917, 1,
		0, 0, 0, 915, 913, 1, 0, 0, 0, 915, 916, 1, 0, 0, 0, 916, 919, 1, 0, 0,
		0, 917, 915, 1, 0, 0, 0, 918, 920, 5, 55, 0, 0, 919, 918, 1, 0, 0, 0, 919,
		920, 1, 0, 0, 0, 920, 922, 1, 0, 0, 0, 921, 923, 5, 54, 0, 0, 922, 921,
		1, 0, 0, 0, 922, 923, 1, 0, 0, 0, 923, 932, 1, 0, 0, 0, 924, 926, 5, 53,
		0, 0, 925, 924, 1, 0, 0, 0, 926, 927, 1, 0, 0, 0, 927, 925, 1, 0, 0, 0,
		927, 928, 1, 0, 0, 0, 928, 929, 1, 0, 0, 0, 929, 931, 3, 136, 68, 0, 930,
		925, 1, 0, 0, 0, 931, 934, 1, 0, 0, 0, 932, 930, 1, 0, 0, 0, 932, 933,
		1, 0, 0, 0, 933, 938, 1, 0, 0, 0, 934, 932, 1, 0, 0, 0, 935, 937, 5, 53,
		0, 0, 936, 935, 1, 0, 0, 0, 937, 940, 1, 0, 0, 0, 938, 936, 1, 0, 0, 0,
		938, 939, 1, 0, 0, 0, 939, 942, 1, 0, 0, 0, 940, 938, 1, 0, 0, 0, 941,
		943, 5, 55, 0, 0, 942, 941, 1, 0, 0, 0, 942, 943, 1, 0, 0, 0, 943, 945,
		1, 0, 0, 0, 944, 946, 5, 54, 0, 0, 945, 944, 1, 0, 0, 0, 945, 946, 1, 0,
		0, 0, 946, 950, 1, 0, 0, 0, 947, 949, 5, 53, 0, 0, 948, 947, 1, 0, 0, 0,
		949, 952, 1, 0, 0, 0, 950, 948, 1, 0, 0, 0, 950, 951, 1, 0, 0, 0, 951,
		953, 1, 0, 0, 0, 952, 950, 1, 0, 0, 0, 953, 957, 3, 108, 54, 0, 954, 956,
		5, 53, 0, 0, 955, 954, 1, 0, 0, 0, 956, 959, 1, 0, 0, 0, 957, 955, 1, 0,
		0, 0, 957, 958, 1, 0, 0, 0, 958, 961, 1, 0, 0, 0, 959, 957, 1, 0, 0, 0,
		960, 962, 5, 55, 0, 0, 961, 960, 1, 0, 0, 0, 961, 962, 1, 0, 0, 0, 962,
		964, 1, 0, 0, 0, 963, 888, 1, 0, 0, 0, 963, 889, 1, 0, 0, 0, 964, 141,
		1, 0, 0, 0, 965, 1041, 3, 96, 48, 0, 966, 970, 3, 106, 53, 0, 967, 969,
		5, 53, 0, 0, 968, 967, 1, 0, 0, 0, 969, 972, 1, 0, 0, 0, 970, 968, 1, 0,
		0, 0, 970, 971, 1, 0, 0, 0, 971, 974, 1, 0, 0, 0, 972, 970, 1, 0, 0, 0,
		973, 975, 5, 55, 0, 0, 974, 973, 1, 0, 0, 0, 974, 975, 1, 0, 0, 0, 975,
		977, 1, 0, 0, 0, 976, 978, 5, 54, 0, 0, 977, 976, 1, 0, 0, 0, 977, 978,
		1, 0, 0, 0, 978, 982, 1, 0, 0, 0, 979, 981, 5, 53, 0, 0, 980, 979, 1, 0,
		0, 0, 981, 984, 1, 0, 0, 0, 982, 980, 1, 0, 0, 0, 982, 983, 1, 0, 0, 0,
		983, 986, 1, 0, 0, 0, 984, 982, 1, 0, 0, 0, 985, 987, 5, 55, 0, 0, 986,
		985, 1, 0, 0, 0, 986, 987, 1, 0, 0, 0, 987, 988, 1, 0, 0, 0, 988, 992,
		3, 96, 48, 0, 989, 991, 5, 53, 0, 0, 990, 989, 1, 0, 0, 0, 991, 994, 1,
		0, 0, 0, 992, 990, 1, 0, 0, 0, 992, 993, 1, 0, 0, 0, 993, 996, 1, 0, 0,
		0, 994, 992, 1, 0, 0, 0, 995, 997, 5, 55, 0, 0, 996, 995, 1, 0, 0, 0, 996,
		997, 1, 0, 0, 0, 997, 999, 1, 0, 0, 0, 998, 1000, 5, 54, 0, 0, 999, 998,
		1, 0, 0, 0, 999, 1000, 1, 0, 0, 0, 1000, 1009, 1, 0, 0, 0, 1001, 1003,
		5, 53, 0, 0, 1002, 1001, 1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004, 1002,
		1, 0, 0, 0, 1004, 1005, 1, 0, 0, 0, 1005, 1006, 1, 0, 0, 0, 1006, 1008,
		3, 96, 48, 0, 1007, 1002, 1, 0, 0, 0, 1008, 1011, 1, 0, 0, 0, 1009, 1007,
		1, 0, 0, 0, 1009, 1010, 1, 0, 0, 0, 1010, 1015, 1, 0, 0, 0, 1011, 1009,
		1, 0, 0, 0, 1012, 1014, 5, 53, 0, 0, 1013, 1012, 1, 0, 0, 0, 1014, 1017,
		1, 0, 0, 0, 1015, 1013, 1, 0, 0, 0, 1015, 1016, 1, 0, 0, 0, 1016, 1019,
		1, 0, 0, 0, 1017, 1015, 1, 0, 0, 0, 1018, 1020, 5, 55, 0, 0, 1019, 1018,
		1, 0, 0, 0, 1019, 1020, 1, 0, 0, 0, 1020, 1022, 1, 0, 0, 0, 1021, 1023,
		5, 54, 0, 0, 1022, 1021, 1, 0, 0, 0, 1022, 1023, 1, 0, 0, 0, 1023, 1027,
		1, 0, 0, 0, 1024, 1026, 5, 53, 0, 0, 1025, 1024, 1, 0, 0, 0, 1026, 1029,
		1, 0, 0, 0, 1027, 1025, 1, 0, 0, 0, 1027, 1028, 1, 0, 0, 0, 1028, 1030,
		1, 0, 0, 0, 1029, 1027, 1, 0, 0, 0, 1030, 1034, 3, 108, 54, 0, 1031, 1033,
		5, 53, 0, 0, 1032, 1031, 1, 0, 0, 0, 1033, 1036, 1, 0, 0, 0, 1034, 1032,
		1, 0, 0, 0, 1034, 1035, 1, 0, 0, 0, 1035, 1038, 1, 0, 0, 0, 1036, 1034,
		1, 0, 0, 0, 1037, 1039, 5, 55, 0, 0, 1038, 1037, 1, 0, 0, 0, 1038, 1039,
		1, 0, 0, 0, 1039, 1041, 1, 0, 0, 0, 1040, 965, 1, 0, 0, 0, 1040, 966, 1,
		0, 0, 0, 1041, 143, 1, 0, 0, 0, 1042, 1043, 7, 1, 0, 0, 1043, 145, 1, 0,
		0, 0, 1044, 1048, 3, 106, 53, 0, 1045, 1047, 5, 53, 0, 0, 1046, 1045, 1,
		0, 0, 0, 1047, 1050, 1, 0, 0, 0, 1048, 1046, 1, 0, 0, 0, 1048, 1049, 1,
		0, 0, 0, 1049, 1052, 1, 0, 0, 0, 1050, 1048, 1, 0, 0, 0, 1051, 1053, 5,
		55, 0, 0, 1052, 1051, 1, 0, 0, 0, 1052, 1053, 1, 0, 0, 0, 1053, 1055, 1,
		0, 0, 0, 1054, 1056, 5, 54, 0, 0, 1055, 1054, 1, 0, 0, 0, 1055, 1056, 1,
		0, 0, 0, 1056, 1060, 1, 0, 0, 0, 1057, 1059, 5, 53, 0, 0, 1058, 1057, 1,
		0, 0, 0, 1059, 1062, 1, 0, 0, 0, 1060, 1058, 1, 0, 0, 0, 1060, 1061, 1,
		0, 0, 0, 1061, 1063, 1, 0, 0, 0, 1062, 1060, 1, 0, 0, 0, 1063, 1067, 3,
		110, 55, 0, 1064, 1066, 5, 53, 0, 0, 1065, 1064, 1, 0, 0, 0, 1066, 1069,
		1, 0, 0, 0, 1067, 1065, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1071,
		1, 0, 0, 0, 1069, 1067, 1, 0, 0, 0, 1070, 1072, 5, 55, 0, 0, 1071, 1070,
		1, 0, 0, 0, 1071, 1072, 1, 0, 0, 0, 1072, 1074, 1, 0, 0, 0, 1073, 1075,
		5, 54, 0, 0, 1074, 1073, 1, 0, 0, 0, 1074, 1075, 1, 0, 0, 0, 1075, 1099,
		1, 0, 0, 0, 1076, 1084, 3, 74, 37, 0, 1077, 1084, 3, 78, 39, 0, 1078, 1084,
		3, 88, 44, 0, 1079, 1084, 3, 68, 34, 0, 1080, 1084, 3, 40, 20, 0, 1081,
		1084, 3, 50, 25, 0, 1082, 1084, 3, 54, 27, 0, 1083, 1076, 1, 0, 0, 0, 1083,
		1077, 1, 0, 0, 0, 1083, 1078, 1, 0, 0, 0, 1083, 1079, 1, 0, 0, 0, 1083,
		1080, 1, 0, 0, 0, 1083, 1081, 1, 0, 0, 0, 1083, 1082, 1, 0, 0, 0, 1084,
		1088, 1, 0, 0, 0, 1085, 1087, 5, 53, 0, 0, 1086, 1085, 1, 0, 0, 0, 1087,
		1090, 1, 0, 0, 0, 1088, 1086, 1, 0, 0, 0, 1088, 1089, 1, 0, 0, 0, 1089,
		1092, 1, 0, 0, 0, 1090, 1088, 1, 0, 0, 0, 1091, 1093, 5, 55, 0, 0, 1092,
		1091, 1, 0, 0, 0, 1092, 1093, 1, 0, 0, 0, 1093, 1095, 1, 0, 0, 0, 1094,
		1096, 5, 54, 0, 0, 1095, 1094, 1, 0, 0, 0, 1095, 1096, 1, 0, 0, 0, 1096,
		1098, 1, 0, 0, 0, 1097, 1083, 1, 0, 0, 0, 1098, 1101, 1, 0, 0, 0, 1099,
		1097, 1, 0, 0, 0, 1099, 1100, 1, 0, 0, 0, 1100, 1103, 1, 0, 0, 0, 1101,
		1099, 1, 0, 0, 0, 1102, 1104, 3, 138, 69, 0, 1103, 1102, 1, 0, 0, 0, 1103,
		1104, 1, 0, 0, 0, 1104, 1105, 1, 0, 0, 0, 1105, 1107, 3, 108, 54, 0, 1106,
		1108, 5, 55, 0, 0, 1107, 1106, 1, 0, 0, 0, 1107, 1108, 1, 0, 0, 0, 1108,
		147, 1, 0, 0, 0, 1109, 1113, 3, 106, 53, 0, 1110, 1112, 5, 53, 0, 0, 1111,
		1110, 1, 0, 0, 0, 1112, 1115, 1, 0, 0, 0, 1113, 1111, 1, 0, 0, 0, 1113,
		1114, 1, 0, 0, 0, 1114, 1117, 1, 0, 0, 0, 1115, 1113, 1, 0, 0, 0, 1116,
		1118, 5, 55, 0, 0, 1117, 1116, 1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118,
		1120, 1, 0, 0, 0, 1119, 1121, 5, 54, 0, 0, 1120, 1119, 1, 0, 0, 0, 1120,
		1121, 1, 0, 0, 0, 1121, 1125, 1, 0, 0, 0, 1122, 1124, 5, 53, 0, 0, 1123,
		1122, 1, 0, 0, 0, 1124, 1127, 1, 0, 0, 0, 1125, 1123, 1, 0, 0, 0, 1125,
		1126, 1, 0, 0, 0, 1126, 1128, 1, 0, 0, 0, 1127, 1125, 1, 0, 0, 0, 1128,
		1132, 3, 110, 55, 0, 1129, 1131, 5, 53, 0, 0, 1130, 1129, 1, 0, 0, 0, 1131,
		1134, 1, 0, 0, 0, 1132, 1130, 1, 0, 0, 0, 1132, 1133, 1, 0, 0, 0, 1133,
		1136, 1, 0, 0, 0, 1134, 1132, 1, 0, 0, 0, 1135, 1137, 5, 55, 0, 0, 1136,
		1135, 1, 0, 0, 0, 1136, 1137, 1, 0, 0, 0, 1137, 1139, 1, 0, 0, 0, 1138,
		1140, 5, 54, 0, 0, 1139, 1138, 1, 0, 0, 0, 1139, 1140, 1, 0, 0, 0, 1140,
		1174, 1, 0, 0, 0, 1141, 1159, 3, 74, 37, 0, 1142, 1159, 3, 78, 39, 0, 1143,
		1159, 3, 88, 44, 0, 1144, 1159, 3, 66, 33, 0, 1145, 1159, 3, 62, 31, 0,
		1146, 1159, 3, 60, 30, 0, 1147, 1159, 3, 72, 36, 0, 1148, 1150, 3, 80,
		40, 0, 1149, 1151, 3, 90, 45, 0, 1150, 1149, 1, 0, 0, 0, 1150, 1151, 1,
		0, 0, 0, 1151, 1159, 1, 0, 0, 0, 1152, 1155, 3, 82, 41, 0, 1153, 1155,
		3, 86, 43, 0, 1154, 1152, 1, 0, 0, 0, 1154, 1153, 1, 0, 0, 0, 1155, 1159,
		1, 0, 0, 0, 1156, 1159, 3, 84, 42, 0, 1157, 1159, 3, 76, 38, 0, 1158, 1141,
		1, 0, 0, 0, 1158, 1142, 1, 0, 0, 0, 1158, 1143, 1, 0, 0, 0, 1158, 1144,
		1, 0, 0, 0, 1158, 1145, 1, 0, 0, 0, 1158, 1146, 1, 0, 0, 0, 1158, 1147,
		1, 0, 0, 0, 1158, 1148, 1, 0, 0, 0, 1158, 1154, 1, 0, 0, 0, 1158, 1156,
		1, 0, 0, 0, 1158, 1157, 1, 0, 0, 0, 1159, 1163, 1, 0, 0, 0, 1160, 1162,
		5, 53, 0, 0, 1161, 1160, 1, 0, 0, 0, 1162, 1165, 1, 0, 0, 0, 1163, 1161,
		1, 0, 0, 0, 1163, 1164, 1, 0, 0, 0, 1164, 1167, 1, 0, 0, 0, 1165, 1163,
		1, 0, 0, 0, 1166, 1168, 5, 55, 0, 0, 1167, 1166, 1, 0, 0, 0, 1167, 1168,
		1, 0, 0, 0, 1168, 1170, 1, 0, 0, 0, 1169, 1171, 5, 54, 0, 0, 1170, 1169,
		1, 0, 0, 0, 1170, 1171, 1, 0, 0, 0, 1171, 1173, 1, 0, 0, 0, 1172, 1158,
		1, 0, 0, 0, 1173, 1176, 1, 0, 0, 0, 1174, 1172, 1, 0, 0, 0, 1174, 1175,
		1, 0, 0, 0, 1175, 1178, 1, 0, 0, 0, 1176, 1174, 1, 0, 0, 0, 1177, 1179,
		3, 138, 69, 0, 1178, 1177, 1, 0, 0, 0, 1178, 1179, 1, 0, 0, 0, 1179, 1180,
		1, 0, 0, 0, 1180, 1182, 3, 108, 54, 0, 1181, 1183, 5, 55, 0, 0, 1182, 1181,
		1, 0, 0, 0, 1182, 1183, 1, 0, 0, 0, 1183, 149, 1, 0, 0, 0, 1184, 1188,
		3, 106, 53, 0, 1185, 1187, 5, 53, 0, 0, 1186, 1185, 1, 0, 0, 0, 1187, 1190,
		1, 0, 0, 0, 1188, 1186, 1, 0, 0, 0, 1188, 1189, 1, 0, 0, 0, 1189, 1192,
		1, 0, 0, 0, 1190, 1188, 1, 0, 0, 0, 1191, 1193, 5, 55, 0, 0, 1192, 1191,
		1, 0, 0, 0, 1192, 1193, 1, 0, 0, 0, 1193, 1195, 1, 0, 0, 0, 1194, 1196,
		5, 54, 0, 0, 1195, 1194, 1, 0, 0, 0, 1195, 1196, 1, 0, 0, 0, 1196, 1200,
		1, 0, 0, 0, 1197, 1199, 5, 53, 0, 0, 1198, 1197, 1, 0, 0, 0, 1199, 1202,
		1, 0, 0, 0, 1200, 1198, 1, 0, 0, 0, 1200, 1201, 1, 0, 0, 0, 1201, 1203,
		1, 0, 0, 0, 1202, 1200, 1, 0, 0, 0, 1203, 1207, 3, 114, 57, 0, 1204, 1206,
		5, 53, 0, 0, 1205, 1204, 1, 0, 0, 0, 1206, 1209, 1, 0, 0, 0, 1207, 1205,
		1, 0, 0, 0, 1207, 1208, 1, 0, 0, 0, 1208, 1211, 1, 0, 0, 0, 1209, 1207,
		1, 0, 0, 0, 1210, 1212, 5, 55, 0, 0, 1211, 1210, 1, 0, 0, 0, 1211, 1212,
		1, 0, 0, 0, 1212, 1214, 1, 0, 0, 0, 1213, 1215, 5, 54, 0, 0, 1214, 1213,
		1, 0, 0, 0, 1214, 1215, 1, 0, 0, 0, 1215, 1235, 1, 0, 0, 0, 1216, 1220,
		3, 74, 37, 0, 1217, 1220, 3, 78, 39, 0, 1218, 1220, 3, 88, 44, 0, 1219,
		1216, 1, 0, 0, 0, 1219, 1217, 1, 0, 0, 0, 1219, 1218, 1, 0, 0, 0, 1220,
		1224, 1, 0, 0, 0, 1221, 1223, 5, 53, 0, 0, 1222, 1221, 1, 0, 0, 0, 1223,
		1226, 1, 0, 0, 0, 1224, 1222, 1, 0, 0, 0, 1224, 1225, 1, 0, 0, 0, 1225,
		1228, 1, 0, 0, 0, 1226, 1224, 1, 0, 0, 0, 1227, 1229, 5, 55, 0, 0, 1228,
		1227, 1, 0, 0, 0, 1228, 1229, 1, 0, 0, 0, 1229, 1231, 1, 0, 0, 0, 1230,
		1232, 5, 54, 0, 0, 1231, 1230, 1, 0, 0, 0, 1231, 1232, 1, 0, 0, 0, 1232,
		1234, 1, 0, 0, 0, 1233, 1219, 1, 0, 0, 0, 1234, 1237, 1, 0, 0, 0, 1235,
		1233, 1, 0, 0, 0, 1235, 1236, 1, 0, 0, 0, 1236, 1238, 1, 0, 0, 0, 1237,
		1235, 1, 0, 0, 0, 1238, 1242, 3, 80, 40, 0, 1239, 1241, 5, 53, 0, 0, 1240,
		1239, 1, 0, 0, 0, 1241, 1244, 1, 0, 0, 0, 1242, 1240, 1, 0, 0, 0, 1242,
		1243, 1, 0, 0, 0, 1243, 1246, 1, 0, 0, 0, 1244, 1242, 1, 0, 0, 0, 1245,
		1247, 5, 55, 0, 0, 1246, 1245, 1, 0, 0, 0, 1246, 1247, 1, 0, 0, 0, 1247,
		1249, 1, 0, 0, 0, 1248, 1250, 5, 54, 0, 0, 1249, 1248, 1, 0, 0, 0, 1249,
		1250, 1, 0, 0, 0, 1250, 1252, 1, 0, 0, 0, 1251, 1253, 3, 138, 69, 0, 1252,
		1251, 1, 0, 0, 0, 1252, 1253, 1, 0, 0, 0, 1253, 1254, 1, 0, 0, 0, 1254,
		1256, 3, 108, 54, 0, 1255, 1257, 5, 55, 0, 0, 1256, 1255, 1, 0, 0, 0, 1256,
		1257, 1, 0, 0, 0, 1257, 151, 1, 0, 0, 0, 1258, 1262, 3, 106, 53, 0, 1259,
		1261, 5, 53, 0, 0, 1260, 1259, 1, 0, 0, 0, 1261, 1264, 1, 0, 0, 0, 1262,
		1260, 1, 0, 0, 0, 1262, 1263, 1, 0, 0, 0, 1263, 1266, 1, 0, 0, 0, 1264,
		1262, 1, 0, 0, 0, 1265, 1267, 5, 55, 0, 0, 1266, 1265, 1, 0, 0, 0, 1266,
		1267, 1, 0, 0, 0, 1267, 1269, 1, 0, 0, 0, 1268, 1270, 5, 54, 0, 0, 1269,
		1268, 1, 0, 0, 0, 1269, 1270, 1, 0, 0, 0, 1270, 1274, 1, 0, 0, 0, 1271,
		1273, 5, 53, 0, 0, 1272, 1271, 1, 0, 0, 0, 1273, 1276, 1, 0, 0, 0, 1274,
		1272, 1, 0, 0, 0, 1274, 1275, 1, 0, 0, 0, 1275, 1277, 1, 0, 0, 0, 1276,
		1274, 1, 0, 0, 0, 1277, 1281, 3, 114, 57, 0, 1278, 1280, 5, 53, 0, 0, 1279,
		1278, 1, 0, 0, 0, 1280, 1283, 1, 0, 0, 0, 1281, 1279, 1, 0, 0, 0, 1281,
		1282, 1, 0, 0, 0, 1282, 1285, 1, 0, 0, 0, 1283, 1281, 1, 0, 0, 0, 1284,
		1286, 5, 55, 0, 0, 1285, 1284, 1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286,
		1288, 1, 0, 0, 0, 1287, 1289, 5, 54, 0, 0, 1288, 1287, 1, 0, 0, 0, 1288,
		1289, 1, 0, 0, 0, 1289, 1309, 1, 0, 0, 0, 1290, 1294, 3, 74, 37, 0, 1291,
		1294, 3, 78, 39, 0, 1292, 1294, 3, 88, 44, 0, 1293, 1290, 1, 0, 0, 0, 1293,
		1291, 1, 0, 0, 0, 1293, 1292, 1, 0, 0, 0, 1294, 1298, 1, 0, 0, 0, 1295,
		1297, 5, 53, 0, 0, 1296, 1295, 1, 0, 0, 0, 1297, 1300, 1, 0, 0, 0, 1298,
		1296, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1302, 1, 0, 0, 0, 1300,
		1298, 1, 0, 0, 0, 1301, 1303, 5, 55, 0, 0, 1302, 1301, 1, 0, 0, 0, 1302,
		1303, 1, 0, 0, 0, 1303, 1305, 1, 0, 0, 0, 1304, 1306, 5, 54, 0, 0, 1305,
		1304, 1, 0, 0, 0, 1305, 1306, 1, 0, 0, 0, 1306, 1308, 1, 0, 0, 0, 1307,
		1293, 1, 0, 0, 0, 1308, 1311, 1, 0, 0, 0, 1309, 1307, 1, 0, 0, 0, 1309,
		1310, 1, 0, 0, 0, 1310, 1312, 1, 0, 0, 0, 1311, 1309, 1, 0, 0, 0, 1312,
		1316, 3, 48, 24, 0, 1313, 1315, 5, 53, 0, 0, 1314, 1313, 1, 0, 0, 0, 1315,
		1318, 1, 0, 0, 0, 1316, 1314, 1, 0, 0, 0, 1316, 1317, 1, 0, 0, 0, 1317,
		1320, 1, 0, 0, 0, 1318, 1316, 1, 0, 0, 0, 1319, 1321, 5, 55, 0, 0, 1320,
		1319, 1, 0, 0, 0, 1320, 1321, 1, 0, 0, 0, 1321, 1323, 1, 0, 0, 0, 1322,
		1324, 5, 54, 0, 0, 1323, 1322, 1, 0, 0, 0, 1323, 1324, 1, 0, 0, 0, 1324,
		1326, 1, 0, 0, 0, 1325, 1327, 3, 138, 69, 0, 1326, 1325, 1, 0, 0, 0, 1326,
		1327, 1, 0, 0, 0, 1327, 1328, 1, 0, 0, 0, 1328, 1330, 3, 108, 54, 0, 1329,
		1331, 5, 55, 0, 0, 1330, 1329, 1, 0, 0, 0, 1330, 1331, 1, 0, 0, 0, 1331,
		153, 1, 0, 0, 0, 1332, 1336, 3, 106, 53, 0, 1333, 1335, 5, 53, 0, 0, 1334,
		1333, 1, 0, 0, 0, 1335, 1338, 1, 0, 0, 0, 1336, 1334, 1, 0, 0, 0, 1336,
		1337, 1, 0, 0, 0, 1337, 1340, 1, 0, 0, 0, 1338, 1336, 1, 0, 0, 0, 1339,
		1341, 5, 55, 0, 0, 1340, 1339, 1, 0, 0, 0, 1340, 1341, 1, 0, 0, 0, 1341,
		1343, 1, 0, 0, 0, 1342, 1344, 5, 54, 0, 0, 1343, 1342, 1, 0, 0, 0, 1343,
		1344, 1, 0, 0, 0, 1344, 1348, 1, 0, 0, 0, 1345, 1347, 5, 53, 0, 0, 1346,
		1345, 1, 0, 0, 0, 1347, 1350, 1, 0, 0, 0, 1348, 1346, 1, 0, 0, 0, 1348,
		1349, 1, 0, 0, 0, 1349, 1351, 1, 0, 0, 0, 1350, 1348, 1, 0, 0, 0, 1351,
		1355, 3, 114, 57, 0, 1352, 1354, 5, 53, 0, 0, 1353, 1352, 1, 0, 0, 0, 1354,
		1357, 1, 0, 0, 0, 1355, 1353, 1, 0, 0, 0, 1355, 1356, 1, 0, 0, 0, 1356,
		1359, 1, 0, 0, 0, 1357, 1355, 1, 0, 0, 0, 1358, 1360, 5, 55, 0, 0, 1359,
		1358, 1, 0, 0, 0, 1359, 1360, 1, 0, 0, 0, 1360, 1362, 1, 0, 0, 0, 1361,
		1363, 5, 54, 0, 0, 1362, 1361, 1, 0, 0, 0, 1362, 1363, 1, 0, 0, 0, 1363,
		1365, 1, 0, 0, 0, 1364, 1366, 3, 78, 39, 0, 1365, 1364, 1, 0, 0, 0, 1365,
		1366, 1, 0, 0, 0, 1366, 1370, 1, 0, 0, 0, 1367, 1369, 5, 53, 0, 0, 1368,
		1367, 1, 0, 0, 0, 1369, 1372, 1, 0, 0, 0, 1370, 1368, 1, 0, 0, 0, 1370,
		1371, 1, 0, 0, 0, 1371, 1374, 1, 0, 0, 0, 1372, 1370, 1, 0, 0, 0, 1373,
		1375, 5, 55, 0, 0, 1374, 1373, 1, 0, 0, 0, 1374, 1375, 1, 0, 0, 0, 1375,
		1377, 1, 0, 0, 0, 1376, 1378, 5, 54, 0, 0, 1377, 1376, 1, 0, 0, 0, 1377,
		1378, 1, 0, 0, 0, 1378, 1380, 1, 0, 0, 0, 1379, 1381, 3, 138, 69, 0, 1380,
		1379, 1, 0, 0, 0, 1380, 1381, 1, 0, 0, 0, 1381, 1383, 1, 0, 0, 0, 1382,
		1384, 5, 54, 0, 0, 1383, 1382, 1, 0, 0, 0, 1383, 1384, 1, 0, 0, 0, 1384,
		1385, 1, 0, 0, 0, 1385, 1387, 3, 108, 54, 0, 1386, 1388, 5, 55, 0, 0, 1387,
		1386, 1, 0, 0, 0, 1387, 1388, 1, 0, 0, 0, 1388, 155, 1, 0, 0, 0, 1389,
		1393, 3, 106, 53, 0, 1390, 1392, 5, 53, 0, 0, 1391, 1390, 1, 0, 0, 0, 1392,
		1395, 1, 0, 0, 0, 1393, 1391, 1, 0, 0, 0, 1393, 1394, 1, 0, 0, 0, 1394,
		1397, 1, 0, 0, 0, 1395, 1393, 1, 0, 0, 0, 1396, 1398, 5, 55, 0, 0, 1397,
		1396, 1, 0, 0, 0, 1397, 1398, 1, 0, 0, 0, 1398, 1400, 1, 0, 0, 0, 1399,
		1401, 5, 54, 0, 0, 1400, 1399, 1, 0, 0, 0, 1400, 1401, 1, 0, 0, 0, 1401,
		1405, 1, 0, 0, 0, 1402, 1404, 5, 53, 0, 0, 1403, 1402, 1, 0, 0, 0, 1404,
		1407, 1, 0, 0, 0, 1405, 1403, 1, 0, 0, 0, 1405, 1406, 1, 0, 0, 0, 1406,
		1408, 1, 0, 0, 0, 1407, 1405, 1, 0, 0, 0, 1408, 1412, 3, 110, 55, 0, 1409,
		1411, 5, 53, 0, 0, 1410, 1409, 1, 0, 0, 0, 1411, 1414, 1, 0, 0, 0, 1412,
		1410, 1, 0, 0, 0, 1412, 1413, 1, 0, 0, 0, 1413, 1416, 1, 0, 0, 0, 1414,
		1412, 1, 0, 0, 0, 1415, 1417, 5, 55, 0, 0, 1416, 1415, 1, 0, 0, 0, 1416,
		1417, 1, 0, 0, 0, 1417, 1419, 1, 0, 0, 0, 1418, 1420, 5, 54, 0, 0, 1419,
		1418, 1, 0, 0, 0, 1419, 1420, 1, 0, 0, 0, 1420, 1444, 1, 0, 0, 0, 1421,
		1429, 3, 74, 37, 0, 1422, 1429, 3, 78, 39, 0, 1423, 1429, 3, 88, 44, 0,
		1424, 1429, 3, 52, 26, 0, 1425, 1429, 3, 50, 25, 0, 1426, 1429, 3, 54,
		27, 0, 1427, 1429, 3, 56, 28, 0, 1428, 1421, 1, 0, 0, 0, 1428, 1422, 1,
		0, 0, 0, 1428, 1423, 1, 0, 0, 0, 1428, 1424, 1, 0, 0, 0, 1428, 1425, 1,
		0, 0, 0, 1428, 1426, 1, 0, 0, 0, 1428, 1427, 1, 0, 0, 0, 1429, 1433, 1,
		0, 0, 0, 1430, 1432, 5, 53, 0, 0, 1431, 1430, 1, 0, 0, 0, 1432, 1435, 1,
		0, 0, 0, 1433, 1431, 1, 0, 0, 0, 1433, 1434, 1, 0, 0, 0, 1434, 1437, 1,
		0, 0, 0, 1435, 1433, 1, 0, 0, 0, 1436, 1438, 5, 55, 0, 0, 1437, 1436, 1,
		0, 0, 0, 1437, 1438, 1, 0, 0, 0, 1438, 1440, 1, 0, 0, 0, 1439, 1441, 5,
		54, 0, 0, 1440, 1439, 1, 0, 0, 0, 1440, 1441, 1, 0, 0, 0, 1441, 1443, 1,
		0, 0, 0, 1442, 1428, 1, 0, 0, 0, 1443, 1446, 1, 0, 0, 0, 1444, 1442, 1,
		0, 0, 0, 1444, 1445, 1, 0, 0, 0, 1445, 1448, 1, 0, 0, 0, 1446, 1444, 1,
		0, 0, 0, 1447, 1449, 3, 138, 69, 0, 1448, 1447, 1, 0, 0, 0, 1448, 1449,
		1, 0, 0, 0, 1449, 1450, 1, 0, 0, 0, 1450, 1452, 3, 108, 54, 0, 1451, 1453,
		5, 55, 0, 0, 1452, 1451, 1, 0, 0, 0, 1452, 1453, 1, 0, 0, 0, 1453, 157,
		1, 0, 0, 0, 1454, 1458, 3, 106, 53, 0, 1455, 1457, 5, 53, 0, 0, 1456, 1455,
		1, 0, 0, 0, 1457, 1460, 1, 0, 0, 0, 1458, 1456, 1, 0, 0, 0, 1458, 1459,
		1, 0, 0, 0, 1459, 1462, 1, 0, 0, 0, 1460, 1458, 1, 0, 0, 0, 1461, 1463,
		5, 55, 0, 0, 1462, 1461, 1, 0, 0, 0, 1462, 1463, 1, 0, 0, 0, 1463, 1465,
		1, 0, 0, 0, 1464, 1466, 5, 54, 0, 0, 1465, 1464, 1, 0, 0, 0, 1465, 1466,
		1, 0, 0, 0, 1466, 1470, 1, 0, 0, 0, 1467, 1469, 5, 53, 0, 0, 1468, 1467,
		1, 0, 0, 0, 1469, 1472, 1, 0, 0, 0, 1470, 1468, 1, 0, 0, 0, 1470, 1471,
		1, 0, 0, 0, 1471, 1473, 1, 0, 0, 0, 1472, 1470, 1, 0, 0, 0, 1473, 1477,
		3, 92, 46, 0, 1474, 1476, 5, 53, 0, 0, 1475, 1474, 1, 0, 0, 0, 1476, 1479,
		1, 0, 0, 0, 1477, 1475, 1, 0, 0, 0, 1477, 1478, 1, 0, 0, 0, 1478, 1481,
		1, 0, 0, 0, 1479, 1477, 1, 0, 0, 0, 1480, 1482, 5, 55, 0, 0, 1481, 1480,
		1, 0, 0, 0, 1481, 1482, 1, 0, 0, 0, 1482, 1484, 1, 0, 0, 0, 1483, 1485,
		5, 54, 0, 0, 1484, 1483, 1, 0, 0, 0, 1484, 1485, 1, 0, 0, 0, 1485, 1505,
		1, 0, 0, 0, 1486, 1490, 3, 74, 37, 0, 1487, 1490, 3, 78, 39, 0, 1488, 1490,
		3, 88, 44, 0, 1489, 1486, 1, 0, 0, 0, 1489, 1487, 1, 0, 0, 0, 1489, 1488,
		1, 0, 0, 0, 1490, 1494, 1, 0, 0, 0, 1491, 1493, 5, 53, 0, 0, 1492, 1491,
		1, 0, 0, 0, 1493, 1496, 1, 0, 0, 0, 1494, 1492, 1, 0, 0, 0, 1494, 1495,
		1, 0, 0, 0, 1495, 1498, 1, 0, 0, 0, 1496, 1494, 1, 0, 0, 0, 1497, 1499,
		5, 55, 0, 0, 1498, 1497, 1, 0, 0, 0, 1498, 1499, 1, 0, 0, 0, 1499, 1501,
		1, 0, 0, 0, 1500, 1502, 5, 54, 0, 0, 1501, 1500, 1, 0, 0, 0, 1501, 1502,
		1, 0, 0, 0, 1502, 1504, 1, 0, 0, 0, 1503, 1489, 1, 0, 0, 0, 1504, 1507,
		1, 0, 0, 0, 1505, 1503, 1, 0, 0, 0, 1505, 1506, 1, 0, 0, 0, 1506, 1508,
		1, 0, 0, 0, 1507, 1505, 1, 0, 0, 0, 1508, 1512, 3, 58, 29, 0, 1509, 1511,
		5, 53, 0, 0, 1510, 1509, 1, 0, 0, 0, 1511, 1514, 1, 0, 0, 0, 1512, 1510,
		1, 0, 0, 0, 1512, 1513, 1, 0, 0, 0, 1513, 1516, 1, 0, 0, 0, 1514, 1512,
		1, 0, 0, 0, 1515, 1517, 5, 55, 0, 0, 1516, 1515, 1, 0, 0, 0, 1516, 1517,
		1, 0, 0, 0, 1517, 1519, 1, 0, 0, 0, 1518, 1520, 5, 54, 0, 0, 1519, 1518,
		1, 0, 0, 0, 1519, 1520, 1, 0, 0, 0, 1520, 1534, 1, 0, 0, 0, 1521, 1525,
		3, 70, 35, 0, 1522, 1524, 5, 53, 0, 0, 1523, 1522, 1, 0, 0, 0, 1524, 1527,
		1, 0, 0, 0, 1525, 1523, 1, 0, 0, 0, 1525, 1526, 1, 0, 0, 0, 1526, 1529,
		1, 0, 0, 0, 1527, 1525, 1, 0, 0, 0, 1528, 1530, 5, 55, 0, 0, 1529, 1528,
		1, 0, 0, 0, 1529, 1530, 1, 0, 0, 0, 1530, 1532, 1, 0, 0, 0, 1531, 1533,
		5, 54, 0, 0, 1532, 1531, 1, 0, 0, 0, 1532, 1533, 1, 0, 0, 0, 1533, 1535,
		1, 0, 0, 0, 1534, 1521, 1, 0, 0, 0, 1534, 1535, 1, 0, 0, 0, 1535, 1537,
		1, 0, 0, 0, 1536, 1538, 3, 138, 69, 0, 1537, 1536, 1, 0, 0, 0, 1537, 1538,
		1, 0, 0, 0, 1538, 1539, 1, 0, 0, 0, 1539, 1541, 3, 108, 54, 0, 1540, 1542,
		5, 55, 0, 0, 1541, 1540, 1, 0, 0, 0, 1541, 1542, 1, 0, 0, 0, 1542, 159,
		1, 0, 0, 0, 1543, 1547, 3, 106, 53, 0, 1544, 1546, 5, 53, 0, 0, 1545, 1544,
		1, 0, 0, 0, 1546, 1549, 1, 0, 0, 0, 1547, 1545, 1, 0, 0, 0, 1547, 1548,
		1, 0, 0, 0, 1548, 1551, 1, 0, 0, 0, 1549, 1547, 1, 0, 0, 0, 1550, 1552,
		5, 55, 0, 0, 1551, 1550, 1, 0, 0, 0, 1551, 1552, 1, 0, 0, 0, 1552, 1554,
		1, 0, 0, 0, 1553, 1555, 5, 54, 0, 0, 1554, 1553, 1, 0, 0, 0, 1554, 1555,
		1, 0, 0, 0, 1555, 1559, 1, 0, 0, 0, 1556, 1558, 5, 53, 0, 0, 1557, 1556,
		1, 0, 0, 0, 1558, 1561, 1, 0, 0, 0, 1559, 1557, 1, 0, 0, 0, 1559, 1560,
		1, 0, 0, 0, 1560, 1562, 1, 0, 0, 0, 1561, 1559, 1, 0, 0, 0, 1562, 1566,
		3, 110, 55, 0, 1563, 1565, 5, 53, 0, 0, 1564, 1563, 1, 0, 0, 0, 1565, 1568,
		1, 0, 0, 0, 1566, 1564, 1, 0, 0, 0, 1566, 1567, 1, 0, 0, 0, 1567, 1570,
		1, 0, 0, 0, 1568, 1566, 1, 0, 0, 0, 1569, 1571, 5, 55, 0, 0, 1570, 1569,
		1, 0, 0, 0, 1570, 1571, 1, 0, 0, 0, 1571, 1573, 1, 0, 0, 0, 1572, 1574,
		5, 54, 0, 0, 1573, 1572, 1, 0, 0, 0, 1573, 1574, 1, 0, 0, 0, 1574, 1594,
		1, 0, 0, 0, 1575, 1579, 3, 74, 37, 0, 1576, 1579, 3, 78, 39, 0, 1577, 1579,
		3, 88, 44, 0, 1578, 1575, 1, 0, 0, 0, 1578, 1576, 1, 0, 0, 0, 1578, 1577,
		1, 0, 0, 0, 1579, 1583, 1, 0, 0, 0, 1580, 1582, 5, 53, 0, 0, 1581, 1580,
		1, 0, 0, 0, 1582, 1585, 1, 0, 0, 0, 1583, 1581, 1, 0, 0, 0, 1583, 1584,
		1, 0, 0, 0, 1584, 1587, 1, 0, 0, 0, 1585, 1583, 1, 0, 0, 0, 1586, 1588,
		5, 55, 0, 0, 1587, 1586, 1, 0, 0, 0, 1587, 1588, 1, 0, 0, 0, 1588, 1590,
		1, 0, 0, 0, 1589, 1591, 5, 54, 0, 0, 1590, 1589, 1, 0, 0, 0, 1590, 1591,
		1, 0, 0, 0, 1591, 1593, 1, 0, 0, 0, 1592, 1578, 1, 0, 0, 0, 1593, 1596,
		1, 0, 0, 0, 1594, 1592, 1, 0, 0, 0, 1594, 1595, 1, 0, 0, 0, 1595, 1597,
		1, 0, 0, 0, 1596, 1594, 1, 0, 0, 0, 1597, 1601, 3, 64, 32, 0, 1598, 1600,
		5, 53, 0, 0, 1599, 1598, 1, 0, 0, 0, 1600, 1603, 1, 0, 0, 0, 1601, 1599,
		1, 0, 0, 0, 1601, 1602, 1, 0, 0, 0, 1602, 1605, 1, 0, 0, 0, 1603, 1601,
		1, 0, 0, 0, 1604, 1606, 5, 55, 0, 0, 1605, 1604, 1, 0, 0, 0, 1605, 1606,
		1, 0, 0, 0, 1606, 1608, 1, 0, 0, 0, 1607, 1609, 5, 54, 0, 0, 1608, 1607,
		1, 0, 0, 0, 1608, 1609, 1, 0, 0, 0, 1609, 1610, 1, 0, 0, 0, 1610, 1614,
		3, 50, 25, 0, 1611, 1613, 5, 53, 0, 0, 1612, 1611, 1, 0, 0, 0, 1613, 1616,
		1, 0, 0, 0, 1614, 1612, 1, 0, 0, 0, 1614, 1615, 1, 0, 0, 0, 1615, 1618,
		1, 0, 0, 0, 1616, 1614, 1, 0, 0, 0, 1617, 1619, 5, 55, 0, 0, 1618, 1617,
		1, 0, 0, 0, 1618, 1619, 1, 0, 0, 0, 1619, 1621, 1, 0, 0, 0, 1620, 1622,
		5, 54, 0, 0, 1621, 1620, 1, 0, 0, 0, 1621, 1622, 1, 0, 0, 0, 1622, 1636,
		1, 0, 0, 0, 1623, 1627, 3, 54, 27, 0, 1624, 1626, 5, 53, 0, 0, 1625, 1624,
		1, 0, 0, 0, 1626, 1629, 1, 0, 0, 0, 1627, 1625, 1, 0, 0, 0, 1627, 1628,
		1, 0, 0, 0, 1628, 1631, 1, 0, 0, 0, 1629, 1627, 1, 0, 0, 0, 1630, 1632,
		5, 55, 0, 0, 1631, 1630, 1, 0, 0, 0, 1631, 1632, 1, 0, 0, 0, 1632, 1634,
		1, 0, 0, 0, 1633, 1635, 5, 54, 0, 0, 1634, 1633, 1, 0, 0, 0, 1634, 1635,
		1, 0, 0, 0, 1635, 1637, 1, 0, 0, 0, 1636, 1623, 1, 0, 0, 0, 1636, 1637,
		1, 0, 0, 0, 1637, 1639, 1, 0, 0, 0, 1638, 1640, 3, 138, 69, 0, 1639, 1638,
		1, 0, 0, 0, 1639, 1640, 1, 0, 0, 0, 1640, 1641, 1, 0, 0, 0, 1641, 1643,
		3, 108, 54, 0, 1642, 1644, 5, 55, 0, 0, 1643, 1642, 1, 0, 0, 0, 1643, 1644,
		1, 0, 0, 0, 1644, 161, 1, 0, 0, 0, 293, 163, 166, 169, 184, 186, 193, 200,
		207, 214, 221, 228, 235, 242, 249, 256, 263, 270, 277, 284, 291, 298, 304,
		310, 317, 346, 353, 359, 366, 369, 374, 376, 381, 392, 398, 402, 407, 413,
		417, 422, 428, 432, 437, 443, 447, 452, 458, 462, 467, 473, 480, 486, 493,
		499, 506, 512, 519, 525, 532, 538, 542, 547, 553, 557, 562, 567, 569, 574,
		581, 587, 594, 600, 607, 613, 617, 622, 628, 632, 637, 644, 651, 658, 670,
		682, 688, 696, 711, 725, 729, 732, 737, 741, 747, 751, 754, 759, 764, 770,
		774, 777, 782, 789, 793, 797, 803, 807, 810, 815, 822, 826, 829, 835, 841,
		847, 851, 854, 859, 863, 869, 873, 877, 882, 885, 893, 897, 900, 905, 909,
		915, 919, 922, 927, 932, 938, 942, 945, 950, 957, 961, 963, 970, 974, 977,
		982, 986, 992, 996, 999, 1004, 1009, 1015, 1019, 1022, 1027, 1034, 1038,
		1040, 1048, 1052, 1055, 1060, 1067, 1071, 1074, 1083, 1088, 1092, 1095,
		1099, 1103, 1107, 1113, 1117, 1120, 1125, 1132, 1136, 1139, 1150, 1154,
		1158, 1163, 1167, 1170, 1174, 1178, 1182, 1188, 1192, 1195, 1200, 1207,
		1211, 1214, 1219, 1224, 1228, 1231, 1235, 1242, 1246, 1249, 1252, 1256,
		1262, 1266, 1269, 1274, 1281, 1285, 1288, 1293, 1298, 1302, 1305, 1309,
		1316, 1320, 1323, 1326, 1330, 1336, 1340, 1343, 1348, 1355, 1359, 1362,
		1365, 1370, 1374, 1377, 1380, 1383, 1387, 1393, 1397, 1400, 1405, 1412,
		1416, 1419, 1428, 1433, 1437, 1440, 1444, 1448, 1452, 1458, 1462, 1465,
		1470, 1477, 1481, 1484, 1489, 1494, 1498, 1501, 1505, 1512, 1516, 1519,
		1525, 1529, 1532, 1534, 1537, 1541, 1547, 1551, 1554, 1559, 1566, 1570,
		1573, 1578, 1583, 1587, 1590, 1594, 1601, 1605, 1608, 1614, 1618, 1621,
		1627, 1631, 1634, 1636, 1639, 1643,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// RFC4512ParserInit initializes any static state used to implement RFC4512Parser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewRFC4512Parser(). You can call this function if you wish to initialize the static state ahead
// of time.
func RFC4512ParserInit() {
	staticData := &RFC4512ParserStaticData
	staticData.once.Do(rfc4512ParserInit)
}

// NewRFC4512Parser produces a new parser instance for the optional input antlr.TokenStream.
func NewRFC4512Parser(input antlr.TokenStream) *RFC4512Parser {
	RFC4512ParserInit()
	this := new(RFC4512Parser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &RFC4512ParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "RFC4512.g4"

	return this
}

// RFC4512Parser tokens.
const (
	RFC4512ParserEOF               = antlr.TokenEOF
	RFC4512ParserT__0              = 1
	RFC4512ParserT__1              = 2
	RFC4512ParserT__2              = 3
	RFC4512ParserT__3              = 4
	RFC4512ParserT__4              = 5
	RFC4512ParserT__5              = 6
	RFC4512ParserT__6              = 7
	RFC4512ParserT__7              = 8
	RFC4512ParserT__8              = 9
	RFC4512ParserT__9              = 10
	RFC4512ParserT__10             = 11
	RFC4512ParserT__11             = 12
	RFC4512ParserT__12             = 13
	RFC4512ParserT__13             = 14
	RFC4512ParserT__14             = 15
	RFC4512ParserT__15             = 16
	RFC4512ParserT__16             = 17
	RFC4512ParserT__17             = 18
	RFC4512ParserT__18             = 19
	RFC4512ParserT__19             = 20
	RFC4512ParserT__20             = 21
	RFC4512ParserT__21             = 22
	RFC4512ParserT__22             = 23
	RFC4512ParserT__23             = 24
	RFC4512ParserT__24             = 25
	RFC4512ParserT__25             = 26
	RFC4512ParserT__26             = 27
	RFC4512ParserT__27             = 28
	RFC4512ParserT__28             = 29
	RFC4512ParserT__29             = 30
	RFC4512ParserT__30             = 31
	RFC4512ParserT__31             = 32
	RFC4512ParserOpenParenthesis   = 33
	RFC4512ParserCloseParenthesis  = 34
	RFC4512ParserODelim            = 35
	RFC4512ParserMacroSuffix       = 36
	RFC4512ParserNumOID            = 37
	RFC4512ParserXString           = 38
	RFC4512ParserDistinguishedName = 39
	RFC4512ParserQDescr            = 40
	RFC4512ParserQString           = 41
	RFC4512ParserMUB               = 42
	RFC4512ParserDigit             = 43
	RFC4512ParserNFLabel           = 44
	RFC4512ParserOCLabel           = 45
	RFC4512ParserATLabel           = 46
	RFC4512ParserLSLabel           = 47
	RFC4512ParserMRLabel           = 48
	RFC4512ParserMULabel           = 49
	RFC4512ParserDSLabel           = 50
	RFC4512ParserDCLabel           = 51
	RFC4512ParserDescr             = 52
	RFC4512ParserSP                = 53
	RFC4512ParserNEWLINE           = 54
	RFC4512ParserLineComment       = 55
)

// RFC4512Parser rules.
const (
	RFC4512ParserRULE_fileparse                    = 0
	RFC4512ParserRULE_definitions                  = 1
	RFC4512ParserRULE_objectClassDescriptions      = 2
	RFC4512ParserRULE_attributeTypeDescriptions    = 3
	RFC4512ParserRULE_matchingRuleDescriptions     = 4
	RFC4512ParserRULE_matchingRuleUseDescriptions  = 5
	RFC4512ParserRULE_lDAPSyntaxDescriptions       = 6
	RFC4512ParserRULE_dITStructureRuleDescriptions = 7
	RFC4512ParserRULE_nameFormDescriptions         = 8
	RFC4512ParserRULE_dITContentRuleDescriptions   = 9
	RFC4512ParserRULE_objectIdentifier             = 10
	RFC4512ParserRULE_objectClassLabel             = 11
	RFC4512ParserRULE_matchingRuleLabel            = 12
	RFC4512ParserRULE_matchingRuleUseLabel         = 13
	RFC4512ParserRULE_lDAPSyntaxLabel              = 14
	RFC4512ParserRULE_dITContentRuleLabel          = 15
	RFC4512ParserRULE_dITStructureRuleLabel        = 16
	RFC4512ParserRULE_attributeTypeLabel           = 17
	RFC4512ParserRULE_nameFormLabel                = 18
	RFC4512ParserRULE_definitionLabelDelim         = 19
	RFC4512ParserRULE_kind                         = 20
	RFC4512ParserRULE_abstractKind                 = 21
	RFC4512ParserRULE_structuralKind               = 22
	RFC4512ParserRULE_auxiliaryKind                = 23
	RFC4512ParserRULE_applies                      = 24
	RFC4512ParserRULE_must                         = 25
	RFC4512ParserRULE_aux                          = 26
	RFC4512ParserRULE_may                          = 27
	RFC4512ParserRULE_not                          = 28
	RFC4512ParserRULE_form                         = 29
	RFC4512ParserRULE_ordering                     = 30
	RFC4512ParserRULE_equality                     = 31
	RFC4512ParserRULE_structuralClass              = 32
	RFC4512ParserRULE_superType                    = 33
	RFC4512ParserRULE_superClasses                 = 34
	RFC4512ParserRULE_superRules                   = 35
	RFC4512ParserRULE_substr                       = 36
	RFC4512ParserRULE_name                         = 37
	RFC4512ParserRULE_usage                        = 38
	RFC4512ParserRULE_description                  = 39
	RFC4512ParserRULE_syntax                       = 40
	RFC4512ParserRULE_singleValue                  = 41
	RFC4512ParserRULE_immutability                 = 42
	RFC4512ParserRULE_collective                   = 43
	RFC4512ParserRULE_obsolescence                 = 44
	RFC4512ParserRULE_minUpperBounds               = 45
	RFC4512ParserRULE_structureRule                = 46
	RFC4512ParserRULE_usages                       = 47
	RFC4512ParserRULE_quotedDescriptor             = 48
	RFC4512ParserRULE_quotedString                 = 49
	RFC4512ParserRULE_schemaDN                     = 50
	RFC4512ParserRULE_objectIdentifierOIDOrName    = 51
	RFC4512ParserRULE_attributeDescription         = 52
	RFC4512ParserRULE_openParen                    = 53
	RFC4512ParserRULE_closeParen                   = 54
	RFC4512ParserRULE_numericOIDOrMacro            = 55
	RFC4512ParserRULE_macro                        = 56
	RFC4512ParserRULE_numericOID                   = 57
	RFC4512ParserRULE_macroSuffix                  = 58
	RFC4512ParserRULE_number                       = 59
	RFC4512ParserRULE_attrOptions                  = 60
	RFC4512ParserRULE_userApplication              = 61
	RFC4512ParserRULE_directoryOperation           = 62
	RFC4512ParserRULE_distributedOperation         = 63
	RFC4512ParserRULE_dSAOperation                 = 64
	RFC4512ParserRULE_structureRules               = 65
	RFC4512ParserRULE_oID                          = 66
	RFC4512ParserRULE_oIDs                         = 67
	RFC4512ParserRULE_extensionValue               = 68
	RFC4512ParserRULE_extensions                   = 69
	RFC4512ParserRULE_extension                    = 70
	RFC4512ParserRULE_names                        = 71
	RFC4512ParserRULE_descriptor                   = 72
	RFC4512ParserRULE_objectClassDescription       = 73
	RFC4512ParserRULE_attributeTypeDescription     = 74
	RFC4512ParserRULE_matchingRuleDescription      = 75
	RFC4512ParserRULE_matchingRuleUseDescription   = 76
	RFC4512ParserRULE_lDAPSyntaxDescription        = 77
	RFC4512ParserRULE_dITContentRuleDescription    = 78
	RFC4512ParserRULE_dITStructureRuleDescription  = 79
	RFC4512ParserRULE_nameFormDescription          = 80
)

// IFileparseContext is an interface to support dynamic dispatch.
type IFileparseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Definitions() IDefinitionsContext
	EOF() antlr.TerminalNode
	NEWLINE() antlr.TerminalNode
	LineComment() antlr.TerminalNode
	SchemaDN() ISchemaDNContext

	// IsFileparseContext differentiates from other interfaces.
	IsFileparseContext()
}

type FileparseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileparseContext() *FileparseContext {
	var p = new(FileparseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_fileparse
	return p
}

func InitEmptyFileparseContext(p *FileparseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_fileparse
}

func (*FileparseContext) IsFileparseContext() {}

func NewFileparseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileparseContext {
	var p = new(FileparseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_fileparse

	return p
}

func (s *FileparseContext) GetParser() antlr.Parser { return s.parser }

func (s *FileparseContext) Definitions() IDefinitionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionsContext)
}

func (s *FileparseContext) EOF() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, 0)
}

func (s *FileparseContext) NEWLINE() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, 0)
}

func (s *FileparseContext) LineComment() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, 0)
}

func (s *FileparseContext) SchemaDN() ISchemaDNContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchemaDNContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchemaDNContext)
}

func (s *FileparseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileparseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileparseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterFileparse(s)
	}
}

func (s *FileparseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitFileparse(s)
	}
}

func (p *RFC4512Parser) Fileparse() (localctx IFileparseContext) {
	localctx = NewFileparseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, RFC4512ParserRULE_fileparse)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(163)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(162)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(166)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(165)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(169)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserDistinguishedName {
		{
			p.SetState(168)
			p.SchemaDN()
		}

	}
	{
		p.SetState(171)
		p.Definitions()
	}
	{
		p.SetState(172)
		p.Match(RFC4512ParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionsContext is an interface to support dynamic dispatch.
type IDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllObjectIdentifier() []IObjectIdentifierContext
	ObjectIdentifier(i int) IObjectIdentifierContext
	AllLDAPSyntaxDescriptions() []ILDAPSyntaxDescriptionsContext
	LDAPSyntaxDescriptions(i int) ILDAPSyntaxDescriptionsContext
	AllMatchingRuleDescriptions() []IMatchingRuleDescriptionsContext
	MatchingRuleDescriptions(i int) IMatchingRuleDescriptionsContext
	AllAttributeTypeDescriptions() []IAttributeTypeDescriptionsContext
	AttributeTypeDescriptions(i int) IAttributeTypeDescriptionsContext
	AllMatchingRuleUseDescriptions() []IMatchingRuleUseDescriptionsContext
	MatchingRuleUseDescriptions(i int) IMatchingRuleUseDescriptionsContext
	AllObjectClassDescriptions() []IObjectClassDescriptionsContext
	ObjectClassDescriptions(i int) IObjectClassDescriptionsContext
	AllDITContentRuleDescriptions() []IDITContentRuleDescriptionsContext
	DITContentRuleDescriptions(i int) IDITContentRuleDescriptionsContext
	AllNameFormDescriptions() []INameFormDescriptionsContext
	NameFormDescriptions(i int) INameFormDescriptionsContext
	AllDITStructureRuleDescriptions() []IDITStructureRuleDescriptionsContext
	DITStructureRuleDescriptions(i int) IDITStructureRuleDescriptionsContext

	// IsDefinitionsContext differentiates from other interfaces.
	IsDefinitionsContext()
}

type DefinitionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionsContext() *DefinitionsContext {
	var p = new(DefinitionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitions
	return p
}

func InitEmptyDefinitionsContext(p *DefinitionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitions
}

func (*DefinitionsContext) IsDefinitionsContext() {}

func NewDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionsContext {
	var p = new(DefinitionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitions

	return p
}

func (s *DefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionsContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DefinitionsContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DefinitionsContext) AllObjectIdentifier() []IObjectIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IObjectIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectIdentifierContext); ok {
			tst[i] = t.(IObjectIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) ObjectIdentifier(i int) IObjectIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectIdentifierContext)
}

func (s *DefinitionsContext) AllLDAPSyntaxDescriptions() []ILDAPSyntaxDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILDAPSyntaxDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]ILDAPSyntaxDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILDAPSyntaxDescriptionsContext); ok {
			tst[i] = t.(ILDAPSyntaxDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) LDAPSyntaxDescriptions(i int) ILDAPSyntaxDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDAPSyntaxDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDAPSyntaxDescriptionsContext)
}

func (s *DefinitionsContext) AllMatchingRuleDescriptions() []IMatchingRuleDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleDescriptionsContext); ok {
			tst[i] = t.(IMatchingRuleDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) MatchingRuleDescriptions(i int) IMatchingRuleDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleDescriptionsContext)
}

func (s *DefinitionsContext) AllAttributeTypeDescriptions() []IAttributeTypeDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeTypeDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IAttributeTypeDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeTypeDescriptionsContext); ok {
			tst[i] = t.(IAttributeTypeDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) AttributeTypeDescriptions(i int) IAttributeTypeDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeTypeDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeTypeDescriptionsContext)
}

func (s *DefinitionsContext) AllMatchingRuleUseDescriptions() []IMatchingRuleUseDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleUseDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleUseDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleUseDescriptionsContext); ok {
			tst[i] = t.(IMatchingRuleUseDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) MatchingRuleUseDescriptions(i int) IMatchingRuleUseDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleUseDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleUseDescriptionsContext)
}

func (s *DefinitionsContext) AllObjectClassDescriptions() []IObjectClassDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectClassDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IObjectClassDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectClassDescriptionsContext); ok {
			tst[i] = t.(IObjectClassDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) ObjectClassDescriptions(i int) IObjectClassDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectClassDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectClassDescriptionsContext)
}

func (s *DefinitionsContext) AllDITContentRuleDescriptions() []IDITContentRuleDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITContentRuleDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IDITContentRuleDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITContentRuleDescriptionsContext); ok {
			tst[i] = t.(IDITContentRuleDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) DITContentRuleDescriptions(i int) IDITContentRuleDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITContentRuleDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITContentRuleDescriptionsContext)
}

func (s *DefinitionsContext) AllNameFormDescriptions() []INameFormDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameFormDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]INameFormDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameFormDescriptionsContext); ok {
			tst[i] = t.(INameFormDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) NameFormDescriptions(i int) INameFormDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameFormDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameFormDescriptionsContext)
}

func (s *DefinitionsContext) AllDITStructureRuleDescriptions() []IDITStructureRuleDescriptionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITStructureRuleDescriptionsContext); ok {
			len++
		}
	}

	tst := make([]IDITStructureRuleDescriptionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITStructureRuleDescriptionsContext); ok {
			tst[i] = t.(IDITStructureRuleDescriptionsContext)
			i++
		}
	}

	return tst
}

func (s *DefinitionsContext) DITStructureRuleDescriptions(i int) IDITStructureRuleDescriptionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITStructureRuleDescriptionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITStructureRuleDescriptionsContext)
}

func (s *DefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitions(s)
	}
}

func (s *DefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitions(s)
	}
}

func (p *RFC4512Parser) Definitions() (localctx IDefinitionsContext) {
	localctx = NewDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, RFC4512ParserRULE_definitions)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(184)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&40514804460290050) != 0) {
		p.SetState(184)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case RFC4512ParserLineComment:
			{
				p.SetState(174)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case RFC4512ParserT__0:
			{
				p.SetState(175)
				p.ObjectIdentifier()
			}

		case RFC4512ParserLSLabel:
			{
				p.SetState(176)
				p.LDAPSyntaxDescriptions()
			}

		case RFC4512ParserMRLabel:
			{
				p.SetState(177)
				p.MatchingRuleDescriptions()
			}

		case RFC4512ParserATLabel:
			{
				p.SetState(178)
				p.AttributeTypeDescriptions()
			}

		case RFC4512ParserMULabel:
			{
				p.SetState(179)
				p.MatchingRuleUseDescriptions()
			}

		case RFC4512ParserOCLabel:
			{
				p.SetState(180)
				p.ObjectClassDescriptions()
			}

		case RFC4512ParserDCLabel:
			{
				p.SetState(181)
				p.DITContentRuleDescriptions()
			}

		case RFC4512ParserNFLabel:
			{
				p.SetState(182)
				p.NameFormDescriptions()
			}

		case RFC4512ParserDSLabel:
			{
				p.SetState(183)
				p.DITStructureRuleDescriptions()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(186)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectClassDescriptionsContext is an interface to support dynamic dispatch.
type IObjectClassDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllObjectClassLabel() []IObjectClassLabelContext
	ObjectClassLabel(i int) IObjectClassLabelContext
	AllObjectClassDescription() []IObjectClassDescriptionContext
	ObjectClassDescription(i int) IObjectClassDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsObjectClassDescriptionsContext differentiates from other interfaces.
	IsObjectClassDescriptionsContext()
}

type ObjectClassDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectClassDescriptionsContext() *ObjectClassDescriptionsContext {
	var p = new(ObjectClassDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescriptions
	return p
}

func InitEmptyObjectClassDescriptionsContext(p *ObjectClassDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescriptions
}

func (*ObjectClassDescriptionsContext) IsObjectClassDescriptionsContext() {}

func NewObjectClassDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectClassDescriptionsContext {
	var p = new(ObjectClassDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectClassDescriptions

	return p
}

func (s *ObjectClassDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectClassDescriptionsContext) AllObjectClassLabel() []IObjectClassLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectClassLabelContext); ok {
			len++
		}
	}

	tst := make([]IObjectClassLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectClassLabelContext); ok {
			tst[i] = t.(IObjectClassLabelContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionsContext) ObjectClassLabel(i int) IObjectClassLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectClassLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectClassLabelContext)
}

func (s *ObjectClassDescriptionsContext) AllObjectClassDescription() []IObjectClassDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectClassDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IObjectClassDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectClassDescriptionContext); ok {
			tst[i] = t.(IObjectClassDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionsContext) ObjectClassDescription(i int) IObjectClassDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectClassDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectClassDescriptionContext)
}

func (s *ObjectClassDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *ObjectClassDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *ObjectClassDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *ObjectClassDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *ObjectClassDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ObjectClassDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ObjectClassDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectClassDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectClassDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectClassDescriptions(s)
	}
}

func (s *ObjectClassDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectClassDescriptions(s)
	}
}

func (p *RFC4512Parser) ObjectClassDescriptions() (localctx IObjectClassDescriptionsContext) {
	localctx = NewObjectClassDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, RFC4512ParserRULE_objectClassDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(198)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(188)
				p.ObjectClassLabel()
			}
			{
				p.SetState(189)
				p.ObjectClassDescription()
			}
			p.SetState(193)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(190)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(195)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(196)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(200)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeTypeDescriptionsContext is an interface to support dynamic dispatch.
type IAttributeTypeDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAttributeTypeLabel() []IAttributeTypeLabelContext
	AttributeTypeLabel(i int) IAttributeTypeLabelContext
	AllAttributeTypeDescription() []IAttributeTypeDescriptionContext
	AttributeTypeDescription(i int) IAttributeTypeDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsAttributeTypeDescriptionsContext differentiates from other interfaces.
	IsAttributeTypeDescriptionsContext()
}

type AttributeTypeDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeTypeDescriptionsContext() *AttributeTypeDescriptionsContext {
	var p = new(AttributeTypeDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescriptions
	return p
}

func InitEmptyAttributeTypeDescriptionsContext(p *AttributeTypeDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescriptions
}

func (*AttributeTypeDescriptionsContext) IsAttributeTypeDescriptionsContext() {}

func NewAttributeTypeDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeTypeDescriptionsContext {
	var p = new(AttributeTypeDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescriptions

	return p
}

func (s *AttributeTypeDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeTypeDescriptionsContext) AllAttributeTypeLabel() []IAttributeTypeLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeTypeLabelContext); ok {
			len++
		}
	}

	tst := make([]IAttributeTypeLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeTypeLabelContext); ok {
			tst[i] = t.(IAttributeTypeLabelContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionsContext) AttributeTypeLabel(i int) IAttributeTypeLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeTypeLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeTypeLabelContext)
}

func (s *AttributeTypeDescriptionsContext) AllAttributeTypeDescription() []IAttributeTypeDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeTypeDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IAttributeTypeDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeTypeDescriptionContext); ok {
			tst[i] = t.(IAttributeTypeDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionsContext) AttributeTypeDescription(i int) IAttributeTypeDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeTypeDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeTypeDescriptionContext)
}

func (s *AttributeTypeDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *AttributeTypeDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *AttributeTypeDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *AttributeTypeDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *AttributeTypeDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *AttributeTypeDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *AttributeTypeDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeTypeDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeTypeDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeTypeDescriptions(s)
	}
}

func (s *AttributeTypeDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeTypeDescriptions(s)
	}
}

func (p *RFC4512Parser) AttributeTypeDescriptions() (localctx IAttributeTypeDescriptionsContext) {
	localctx = NewAttributeTypeDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, RFC4512ParserRULE_attributeTypeDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(212)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(202)
				p.AttributeTypeLabel()
			}
			{
				p.SetState(203)
				p.AttributeTypeDescription()
			}
			p.SetState(207)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(204)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(209)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(210)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(214)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleDescriptionsContext is an interface to support dynamic dispatch.
type IMatchingRuleDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMatchingRuleLabel() []IMatchingRuleLabelContext
	MatchingRuleLabel(i int) IMatchingRuleLabelContext
	AllMatchingRuleDescription() []IMatchingRuleDescriptionContext
	MatchingRuleDescription(i int) IMatchingRuleDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsMatchingRuleDescriptionsContext differentiates from other interfaces.
	IsMatchingRuleDescriptionsContext()
}

type MatchingRuleDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleDescriptionsContext() *MatchingRuleDescriptionsContext {
	var p = new(MatchingRuleDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescriptions
	return p
}

func InitEmptyMatchingRuleDescriptionsContext(p *MatchingRuleDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescriptions
}

func (*MatchingRuleDescriptionsContext) IsMatchingRuleDescriptionsContext() {}

func NewMatchingRuleDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleDescriptionsContext {
	var p = new(MatchingRuleDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescriptions

	return p
}

func (s *MatchingRuleDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleDescriptionsContext) AllMatchingRuleLabel() []IMatchingRuleLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleLabelContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleLabelContext); ok {
			tst[i] = t.(IMatchingRuleLabelContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleDescriptionsContext) MatchingRuleLabel(i int) IMatchingRuleLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleLabelContext)
}

func (s *MatchingRuleDescriptionsContext) AllMatchingRuleDescription() []IMatchingRuleDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleDescriptionContext); ok {
			tst[i] = t.(IMatchingRuleDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleDescriptionsContext) MatchingRuleDescription(i int) IMatchingRuleDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleDescriptionContext)
}

func (s *MatchingRuleDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *MatchingRuleDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *MatchingRuleDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleDescriptions(s)
	}
}

func (s *MatchingRuleDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleDescriptions(s)
	}
}

func (p *RFC4512Parser) MatchingRuleDescriptions() (localctx IMatchingRuleDescriptionsContext) {
	localctx = NewMatchingRuleDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, RFC4512ParserRULE_matchingRuleDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(226)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(216)
				p.MatchingRuleLabel()
			}
			{
				p.SetState(217)
				p.MatchingRuleDescription()
			}
			p.SetState(221)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(218)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(223)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(224)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(228)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleUseDescriptionsContext is an interface to support dynamic dispatch.
type IMatchingRuleUseDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMatchingRuleUseLabel() []IMatchingRuleUseLabelContext
	MatchingRuleUseLabel(i int) IMatchingRuleUseLabelContext
	AllMatchingRuleUseDescription() []IMatchingRuleUseDescriptionContext
	MatchingRuleUseDescription(i int) IMatchingRuleUseDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsMatchingRuleUseDescriptionsContext differentiates from other interfaces.
	IsMatchingRuleUseDescriptionsContext()
}

type MatchingRuleUseDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleUseDescriptionsContext() *MatchingRuleUseDescriptionsContext {
	var p = new(MatchingRuleUseDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescriptions
	return p
}

func InitEmptyMatchingRuleUseDescriptionsContext(p *MatchingRuleUseDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescriptions
}

func (*MatchingRuleUseDescriptionsContext) IsMatchingRuleUseDescriptionsContext() {}

func NewMatchingRuleUseDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleUseDescriptionsContext {
	var p = new(MatchingRuleUseDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescriptions

	return p
}

func (s *MatchingRuleUseDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleUseDescriptionsContext) AllMatchingRuleUseLabel() []IMatchingRuleUseLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleUseLabelContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleUseLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleUseLabelContext); ok {
			tst[i] = t.(IMatchingRuleUseLabelContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleUseDescriptionsContext) MatchingRuleUseLabel(i int) IMatchingRuleUseLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleUseLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleUseLabelContext)
}

func (s *MatchingRuleUseDescriptionsContext) AllMatchingRuleUseDescription() []IMatchingRuleUseDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchingRuleUseDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IMatchingRuleUseDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchingRuleUseDescriptionContext); ok {
			tst[i] = t.(IMatchingRuleUseDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleUseDescriptionsContext) MatchingRuleUseDescription(i int) IMatchingRuleUseDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchingRuleUseDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchingRuleUseDescriptionContext)
}

func (s *MatchingRuleUseDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleUseDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleUseDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *MatchingRuleUseDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *MatchingRuleUseDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleUseDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleUseDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleUseDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleUseDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleUseDescriptions(s)
	}
}

func (s *MatchingRuleUseDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleUseDescriptions(s)
	}
}

func (p *RFC4512Parser) MatchingRuleUseDescriptions() (localctx IMatchingRuleUseDescriptionsContext) {
	localctx = NewMatchingRuleUseDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, RFC4512ParserRULE_matchingRuleUseDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(240)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(230)
				p.MatchingRuleUseLabel()
			}
			{
				p.SetState(231)
				p.MatchingRuleUseDescription()
			}
			p.SetState(235)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(232)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(237)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(238)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(242)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 12, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILDAPSyntaxDescriptionsContext is an interface to support dynamic dispatch.
type ILDAPSyntaxDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLDAPSyntaxLabel() []ILDAPSyntaxLabelContext
	LDAPSyntaxLabel(i int) ILDAPSyntaxLabelContext
	AllLDAPSyntaxDescription() []ILDAPSyntaxDescriptionContext
	LDAPSyntaxDescription(i int) ILDAPSyntaxDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsLDAPSyntaxDescriptionsContext differentiates from other interfaces.
	IsLDAPSyntaxDescriptionsContext()
}

type LDAPSyntaxDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLDAPSyntaxDescriptionsContext() *LDAPSyntaxDescriptionsContext {
	var p = new(LDAPSyntaxDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescriptions
	return p
}

func InitEmptyLDAPSyntaxDescriptionsContext(p *LDAPSyntaxDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescriptions
}

func (*LDAPSyntaxDescriptionsContext) IsLDAPSyntaxDescriptionsContext() {}

func NewLDAPSyntaxDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LDAPSyntaxDescriptionsContext {
	var p = new(LDAPSyntaxDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescriptions

	return p
}

func (s *LDAPSyntaxDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *LDAPSyntaxDescriptionsContext) AllLDAPSyntaxLabel() []ILDAPSyntaxLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILDAPSyntaxLabelContext); ok {
			len++
		}
	}

	tst := make([]ILDAPSyntaxLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILDAPSyntaxLabelContext); ok {
			tst[i] = t.(ILDAPSyntaxLabelContext)
			i++
		}
	}

	return tst
}

func (s *LDAPSyntaxDescriptionsContext) LDAPSyntaxLabel(i int) ILDAPSyntaxLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDAPSyntaxLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDAPSyntaxLabelContext)
}

func (s *LDAPSyntaxDescriptionsContext) AllLDAPSyntaxDescription() []ILDAPSyntaxDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILDAPSyntaxDescriptionContext); ok {
			len++
		}
	}

	tst := make([]ILDAPSyntaxDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILDAPSyntaxDescriptionContext); ok {
			tst[i] = t.(ILDAPSyntaxDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *LDAPSyntaxDescriptionsContext) LDAPSyntaxDescription(i int) ILDAPSyntaxDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDAPSyntaxDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDAPSyntaxDescriptionContext)
}

func (s *LDAPSyntaxDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *LDAPSyntaxDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *LDAPSyntaxDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *LDAPSyntaxDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *LDAPSyntaxDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *LDAPSyntaxDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *LDAPSyntaxDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LDAPSyntaxDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LDAPSyntaxDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterLDAPSyntaxDescriptions(s)
	}
}

func (s *LDAPSyntaxDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitLDAPSyntaxDescriptions(s)
	}
}

func (p *RFC4512Parser) LDAPSyntaxDescriptions() (localctx ILDAPSyntaxDescriptionsContext) {
	localctx = NewLDAPSyntaxDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, RFC4512ParserRULE_lDAPSyntaxDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(254)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(244)
				p.LDAPSyntaxLabel()
			}
			{
				p.SetState(245)
				p.LDAPSyntaxDescription()
			}
			p.SetState(249)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(246)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(251)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(252)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(256)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITStructureRuleDescriptionsContext is an interface to support dynamic dispatch.
type IDITStructureRuleDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDITStructureRuleLabel() []IDITStructureRuleLabelContext
	DITStructureRuleLabel(i int) IDITStructureRuleLabelContext
	AllDITStructureRuleDescription() []IDITStructureRuleDescriptionContext
	DITStructureRuleDescription(i int) IDITStructureRuleDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsDITStructureRuleDescriptionsContext differentiates from other interfaces.
	IsDITStructureRuleDescriptionsContext()
}

type DITStructureRuleDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITStructureRuleDescriptionsContext() *DITStructureRuleDescriptionsContext {
	var p = new(DITStructureRuleDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescriptions
	return p
}

func InitEmptyDITStructureRuleDescriptionsContext(p *DITStructureRuleDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescriptions
}

func (*DITStructureRuleDescriptionsContext) IsDITStructureRuleDescriptionsContext() {}

func NewDITStructureRuleDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITStructureRuleDescriptionsContext {
	var p = new(DITStructureRuleDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescriptions

	return p
}

func (s *DITStructureRuleDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *DITStructureRuleDescriptionsContext) AllDITStructureRuleLabel() []IDITStructureRuleLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITStructureRuleLabelContext); ok {
			len++
		}
	}

	tst := make([]IDITStructureRuleLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITStructureRuleLabelContext); ok {
			tst[i] = t.(IDITStructureRuleLabelContext)
			i++
		}
	}

	return tst
}

func (s *DITStructureRuleDescriptionsContext) DITStructureRuleLabel(i int) IDITStructureRuleLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITStructureRuleLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITStructureRuleLabelContext)
}

func (s *DITStructureRuleDescriptionsContext) AllDITStructureRuleDescription() []IDITStructureRuleDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITStructureRuleDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDITStructureRuleDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITStructureRuleDescriptionContext); ok {
			tst[i] = t.(IDITStructureRuleDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *DITStructureRuleDescriptionsContext) DITStructureRuleDescription(i int) IDITStructureRuleDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITStructureRuleDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITStructureRuleDescriptionContext)
}

func (s *DITStructureRuleDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITStructureRuleDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITStructureRuleDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *DITStructureRuleDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *DITStructureRuleDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITStructureRuleDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITStructureRuleDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITStructureRuleDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITStructureRuleDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITStructureRuleDescriptions(s)
	}
}

func (s *DITStructureRuleDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITStructureRuleDescriptions(s)
	}
}

func (p *RFC4512Parser) DITStructureRuleDescriptions() (localctx IDITStructureRuleDescriptionsContext) {
	localctx = NewDITStructureRuleDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, RFC4512ParserRULE_dITStructureRuleDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(268)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(258)
				p.DITStructureRuleLabel()
			}
			{
				p.SetState(259)
				p.DITStructureRuleDescription()
			}
			p.SetState(263)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(260)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(265)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(266)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(270)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameFormDescriptionsContext is an interface to support dynamic dispatch.
type INameFormDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNameFormLabel() []INameFormLabelContext
	NameFormLabel(i int) INameFormLabelContext
	AllNameFormDescription() []INameFormDescriptionContext
	NameFormDescription(i int) INameFormDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsNameFormDescriptionsContext differentiates from other interfaces.
	IsNameFormDescriptionsContext()
}

type NameFormDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameFormDescriptionsContext() *NameFormDescriptionsContext {
	var p = new(NameFormDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescriptions
	return p
}

func InitEmptyNameFormDescriptionsContext(p *NameFormDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescriptions
}

func (*NameFormDescriptionsContext) IsNameFormDescriptionsContext() {}

func NewNameFormDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameFormDescriptionsContext {
	var p = new(NameFormDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_nameFormDescriptions

	return p
}

func (s *NameFormDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *NameFormDescriptionsContext) AllNameFormLabel() []INameFormLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameFormLabelContext); ok {
			len++
		}
	}

	tst := make([]INameFormLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameFormLabelContext); ok {
			tst[i] = t.(INameFormLabelContext)
			i++
		}
	}

	return tst
}

func (s *NameFormDescriptionsContext) NameFormLabel(i int) INameFormLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameFormLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameFormLabelContext)
}

func (s *NameFormDescriptionsContext) AllNameFormDescription() []INameFormDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameFormDescriptionContext); ok {
			len++
		}
	}

	tst := make([]INameFormDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameFormDescriptionContext); ok {
			tst[i] = t.(INameFormDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *NameFormDescriptionsContext) NameFormDescription(i int) INameFormDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameFormDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameFormDescriptionContext)
}

func (s *NameFormDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *NameFormDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *NameFormDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *NameFormDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *NameFormDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *NameFormDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *NameFormDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameFormDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameFormDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNameFormDescriptions(s)
	}
}

func (s *NameFormDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNameFormDescriptions(s)
	}
}

func (p *RFC4512Parser) NameFormDescriptions() (localctx INameFormDescriptionsContext) {
	localctx = NewNameFormDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, RFC4512ParserRULE_nameFormDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(272)
				p.NameFormLabel()
			}
			{
				p.SetState(273)
				p.NameFormDescription()
			}
			p.SetState(277)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(274)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(279)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(280)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(284)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 18, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITContentRuleDescriptionsContext is an interface to support dynamic dispatch.
type IDITContentRuleDescriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDITContentRuleLabel() []IDITContentRuleLabelContext
	DITContentRuleLabel(i int) IDITContentRuleLabelContext
	AllDITContentRuleDescription() []IDITContentRuleDescriptionContext
	DITContentRuleDescription(i int) IDITContentRuleDescriptionContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsDITContentRuleDescriptionsContext differentiates from other interfaces.
	IsDITContentRuleDescriptionsContext()
}

type DITContentRuleDescriptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITContentRuleDescriptionsContext() *DITContentRuleDescriptionsContext {
	var p = new(DITContentRuleDescriptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescriptions
	return p
}

func InitEmptyDITContentRuleDescriptionsContext(p *DITContentRuleDescriptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescriptions
}

func (*DITContentRuleDescriptionsContext) IsDITContentRuleDescriptionsContext() {}

func NewDITContentRuleDescriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITContentRuleDescriptionsContext {
	var p = new(DITContentRuleDescriptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescriptions

	return p
}

func (s *DITContentRuleDescriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *DITContentRuleDescriptionsContext) AllDITContentRuleLabel() []IDITContentRuleLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITContentRuleLabelContext); ok {
			len++
		}
	}

	tst := make([]IDITContentRuleLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITContentRuleLabelContext); ok {
			tst[i] = t.(IDITContentRuleLabelContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionsContext) DITContentRuleLabel(i int) IDITContentRuleLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITContentRuleLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITContentRuleLabelContext)
}

func (s *DITContentRuleDescriptionsContext) AllDITContentRuleDescription() []IDITContentRuleDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDITContentRuleDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDITContentRuleDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDITContentRuleDescriptionContext); ok {
			tst[i] = t.(IDITContentRuleDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionsContext) DITContentRuleDescription(i int) IDITContentRuleDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDITContentRuleDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDITContentRuleDescriptionContext)
}

func (s *DITContentRuleDescriptionsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITContentRuleDescriptionsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITContentRuleDescriptionsContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *DITContentRuleDescriptionsContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *DITContentRuleDescriptionsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITContentRuleDescriptionsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITContentRuleDescriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITContentRuleDescriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITContentRuleDescriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITContentRuleDescriptions(s)
	}
}

func (s *DITContentRuleDescriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITContentRuleDescriptions(s)
	}
}

func (p *RFC4512Parser) DITContentRuleDescriptions() (localctx IDITContentRuleDescriptionsContext) {
	localctx = NewDITContentRuleDescriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, RFC4512ParserRULE_dITContentRuleDescriptions)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(296)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(286)
				p.DITContentRuleLabel()
			}
			{
				p.SetState(287)
				p.DITContentRuleDescription()
			}
			p.SetState(291)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(288)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(293)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(294)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(298)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectIdentifierContext is an interface to support dynamic dispatch.
type IObjectIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllObjectIdentifierOIDOrName() []IObjectIdentifierOIDOrNameContext
	ObjectIdentifierOIDOrName(i int) IObjectIdentifierOIDOrNameContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllEOF() []antlr.TerminalNode
	EOF(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsObjectIdentifierContext differentiates from other interfaces.
	IsObjectIdentifierContext()
}

type ObjectIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectIdentifierContext() *ObjectIdentifierContext {
	var p = new(ObjectIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectIdentifier
	return p
}

func InitEmptyObjectIdentifierContext(p *ObjectIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectIdentifier
}

func (*ObjectIdentifierContext) IsObjectIdentifierContext() {}

func NewObjectIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectIdentifierContext {
	var p = new(ObjectIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectIdentifier

	return p
}

func (s *ObjectIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectIdentifierContext) AllObjectIdentifierOIDOrName() []IObjectIdentifierOIDOrNameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectIdentifierOIDOrNameContext); ok {
			len++
		}
	}

	tst := make([]IObjectIdentifierOIDOrNameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectIdentifierOIDOrNameContext); ok {
			tst[i] = t.(IObjectIdentifierOIDOrNameContext)
			i++
		}
	}

	return tst
}

func (s *ObjectIdentifierContext) ObjectIdentifierOIDOrName(i int) IObjectIdentifierOIDOrNameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectIdentifierOIDOrNameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectIdentifierOIDOrNameContext)
}

func (s *ObjectIdentifierContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *ObjectIdentifierContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *ObjectIdentifierContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserEOF)
}

func (s *ObjectIdentifierContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserEOF, i)
}

func (s *ObjectIdentifierContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ObjectIdentifierContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ObjectIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectIdentifier(s)
	}
}

func (s *ObjectIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectIdentifier(s)
	}
}

func (p *RFC4512Parser) ObjectIdentifier() (localctx IObjectIdentifierContext) {
	localctx = NewObjectIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, RFC4512ParserRULE_objectIdentifier)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(315)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(300)
				p.Match(RFC4512ParserT__0)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(302)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == RFC4512ParserSP {
				{
					p.SetState(301)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(304)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(306)
				p.ObjectIdentifierOIDOrName()
			}
			p.SetState(310)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(307)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(312)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(313)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RFC4512ParserEOF || _la == RFC4512ParserNEWLINE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(317)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 23, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectClassLabelContext is an interface to support dynamic dispatch.
type IObjectClassLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OCLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsObjectClassLabelContext differentiates from other interfaces.
	IsObjectClassLabelContext()
}

type ObjectClassLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectClassLabelContext() *ObjectClassLabelContext {
	var p = new(ObjectClassLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassLabel
	return p
}

func InitEmptyObjectClassLabelContext(p *ObjectClassLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassLabel
}

func (*ObjectClassLabelContext) IsObjectClassLabelContext() {}

func NewObjectClassLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectClassLabelContext {
	var p = new(ObjectClassLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectClassLabel

	return p
}

func (s *ObjectClassLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectClassLabelContext) OCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserOCLabel, 0)
}

func (s *ObjectClassLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *ObjectClassLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectClassLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectClassLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectClassLabel(s)
	}
}

func (s *ObjectClassLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectClassLabel(s)
	}
}

func (p *RFC4512Parser) ObjectClassLabel() (localctx IObjectClassLabelContext) {
	localctx = NewObjectClassLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, RFC4512ParserRULE_objectClassLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(319)
		p.Match(RFC4512ParserOCLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(320)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleLabelContext is an interface to support dynamic dispatch.
type IMatchingRuleLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MRLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsMatchingRuleLabelContext differentiates from other interfaces.
	IsMatchingRuleLabelContext()
}

type MatchingRuleLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleLabelContext() *MatchingRuleLabelContext {
	var p = new(MatchingRuleLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleLabel
	return p
}

func InitEmptyMatchingRuleLabelContext(p *MatchingRuleLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleLabel
}

func (*MatchingRuleLabelContext) IsMatchingRuleLabelContext() {}

func NewMatchingRuleLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleLabelContext {
	var p = new(MatchingRuleLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleLabel

	return p
}

func (s *MatchingRuleLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleLabelContext) MRLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMRLabel, 0)
}

func (s *MatchingRuleLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *MatchingRuleLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleLabel(s)
	}
}

func (s *MatchingRuleLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleLabel(s)
	}
}

func (p *RFC4512Parser) MatchingRuleLabel() (localctx IMatchingRuleLabelContext) {
	localctx = NewMatchingRuleLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, RFC4512ParserRULE_matchingRuleLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(322)
		p.Match(RFC4512ParserMRLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(323)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleUseLabelContext is an interface to support dynamic dispatch.
type IMatchingRuleUseLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MULabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsMatchingRuleUseLabelContext differentiates from other interfaces.
	IsMatchingRuleUseLabelContext()
}

type MatchingRuleUseLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleUseLabelContext() *MatchingRuleUseLabelContext {
	var p = new(MatchingRuleUseLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseLabel
	return p
}

func InitEmptyMatchingRuleUseLabelContext(p *MatchingRuleUseLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseLabel
}

func (*MatchingRuleUseLabelContext) IsMatchingRuleUseLabelContext() {}

func NewMatchingRuleUseLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleUseLabelContext {
	var p = new(MatchingRuleUseLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseLabel

	return p
}

func (s *MatchingRuleUseLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleUseLabelContext) MULabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMULabel, 0)
}

func (s *MatchingRuleUseLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *MatchingRuleUseLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleUseLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleUseLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleUseLabel(s)
	}
}

func (s *MatchingRuleUseLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleUseLabel(s)
	}
}

func (p *RFC4512Parser) MatchingRuleUseLabel() (localctx IMatchingRuleUseLabelContext) {
	localctx = NewMatchingRuleUseLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, RFC4512ParserRULE_matchingRuleUseLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(325)
		p.Match(RFC4512ParserMULabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(326)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILDAPSyntaxLabelContext is an interface to support dynamic dispatch.
type ILDAPSyntaxLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LSLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsLDAPSyntaxLabelContext differentiates from other interfaces.
	IsLDAPSyntaxLabelContext()
}

type LDAPSyntaxLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLDAPSyntaxLabelContext() *LDAPSyntaxLabelContext {
	var p = new(LDAPSyntaxLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxLabel
	return p
}

func InitEmptyLDAPSyntaxLabelContext(p *LDAPSyntaxLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxLabel
}

func (*LDAPSyntaxLabelContext) IsLDAPSyntaxLabelContext() {}

func NewLDAPSyntaxLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LDAPSyntaxLabelContext {
	var p = new(LDAPSyntaxLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxLabel

	return p
}

func (s *LDAPSyntaxLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *LDAPSyntaxLabelContext) LSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLSLabel, 0)
}

func (s *LDAPSyntaxLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *LDAPSyntaxLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LDAPSyntaxLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LDAPSyntaxLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterLDAPSyntaxLabel(s)
	}
}

func (s *LDAPSyntaxLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitLDAPSyntaxLabel(s)
	}
}

func (p *RFC4512Parser) LDAPSyntaxLabel() (localctx ILDAPSyntaxLabelContext) {
	localctx = NewLDAPSyntaxLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, RFC4512ParserRULE_lDAPSyntaxLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(328)
		p.Match(RFC4512ParserLSLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(329)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITContentRuleLabelContext is an interface to support dynamic dispatch.
type IDITContentRuleLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DCLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsDITContentRuleLabelContext differentiates from other interfaces.
	IsDITContentRuleLabelContext()
}

type DITContentRuleLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITContentRuleLabelContext() *DITContentRuleLabelContext {
	var p = new(DITContentRuleLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleLabel
	return p
}

func InitEmptyDITContentRuleLabelContext(p *DITContentRuleLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleLabel
}

func (*DITContentRuleLabelContext) IsDITContentRuleLabelContext() {}

func NewDITContentRuleLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITContentRuleLabelContext {
	var p = new(DITContentRuleLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleLabel

	return p
}

func (s *DITContentRuleLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *DITContentRuleLabelContext) DCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDCLabel, 0)
}

func (s *DITContentRuleLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *DITContentRuleLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITContentRuleLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITContentRuleLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITContentRuleLabel(s)
	}
}

func (s *DITContentRuleLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITContentRuleLabel(s)
	}
}

func (p *RFC4512Parser) DITContentRuleLabel() (localctx IDITContentRuleLabelContext) {
	localctx = NewDITContentRuleLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, RFC4512ParserRULE_dITContentRuleLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(331)
		p.Match(RFC4512ParserDCLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(332)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITStructureRuleLabelContext is an interface to support dynamic dispatch.
type IDITStructureRuleLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DSLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsDITStructureRuleLabelContext differentiates from other interfaces.
	IsDITStructureRuleLabelContext()
}

type DITStructureRuleLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITStructureRuleLabelContext() *DITStructureRuleLabelContext {
	var p = new(DITStructureRuleLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleLabel
	return p
}

func InitEmptyDITStructureRuleLabelContext(p *DITStructureRuleLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleLabel
}

func (*DITStructureRuleLabelContext) IsDITStructureRuleLabelContext() {}

func NewDITStructureRuleLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITStructureRuleLabelContext {
	var p = new(DITStructureRuleLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleLabel

	return p
}

func (s *DITStructureRuleLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *DITStructureRuleLabelContext) DSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDSLabel, 0)
}

func (s *DITStructureRuleLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *DITStructureRuleLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITStructureRuleLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITStructureRuleLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITStructureRuleLabel(s)
	}
}

func (s *DITStructureRuleLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITStructureRuleLabel(s)
	}
}

func (p *RFC4512Parser) DITStructureRuleLabel() (localctx IDITStructureRuleLabelContext) {
	localctx = NewDITStructureRuleLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, RFC4512ParserRULE_dITStructureRuleLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(334)
		p.Match(RFC4512ParserDSLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(335)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeTypeLabelContext is an interface to support dynamic dispatch.
type IAttributeTypeLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ATLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsAttributeTypeLabelContext differentiates from other interfaces.
	IsAttributeTypeLabelContext()
}

type AttributeTypeLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeTypeLabelContext() *AttributeTypeLabelContext {
	var p = new(AttributeTypeLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeLabel
	return p
}

func InitEmptyAttributeTypeLabelContext(p *AttributeTypeLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeLabel
}

func (*AttributeTypeLabelContext) IsAttributeTypeLabelContext() {}

func NewAttributeTypeLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeTypeLabelContext {
	var p = new(AttributeTypeLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeTypeLabel

	return p
}

func (s *AttributeTypeLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeTypeLabelContext) ATLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserATLabel, 0)
}

func (s *AttributeTypeLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *AttributeTypeLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeTypeLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeTypeLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeTypeLabel(s)
	}
}

func (s *AttributeTypeLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeTypeLabel(s)
	}
}

func (p *RFC4512Parser) AttributeTypeLabel() (localctx IAttributeTypeLabelContext) {
	localctx = NewAttributeTypeLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, RFC4512ParserRULE_attributeTypeLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(337)
		p.Match(RFC4512ParserATLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(338)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameFormLabelContext is an interface to support dynamic dispatch.
type INameFormLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NFLabel() antlr.TerminalNode
	DefinitionLabelDelim() IDefinitionLabelDelimContext

	// IsNameFormLabelContext differentiates from other interfaces.
	IsNameFormLabelContext()
}

type NameFormLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameFormLabelContext() *NameFormLabelContext {
	var p = new(NameFormLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormLabel
	return p
}

func InitEmptyNameFormLabelContext(p *NameFormLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormLabel
}

func (*NameFormLabelContext) IsNameFormLabelContext() {}

func NewNameFormLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameFormLabelContext {
	var p = new(NameFormLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_nameFormLabel

	return p
}

func (s *NameFormLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *NameFormLabelContext) NFLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNFLabel, 0)
}

func (s *NameFormLabelContext) DefinitionLabelDelim() IDefinitionLabelDelimContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefinitionLabelDelimContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefinitionLabelDelimContext)
}

func (s *NameFormLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameFormLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameFormLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNameFormLabel(s)
	}
}

func (s *NameFormLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNameFormLabel(s)
	}
}

func (p *RFC4512Parser) NameFormLabel() (localctx INameFormLabelContext) {
	localctx = NewNameFormLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, RFC4512ParserRULE_nameFormLabel)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(340)
		p.Match(RFC4512ParserNFLabel)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(341)
		p.DefinitionLabelDelim()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefinitionLabelDelimContext is an interface to support dynamic dispatch.
type IDefinitionLabelDelimContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsDefinitionLabelDelimContext differentiates from other interfaces.
	IsDefinitionLabelDelimContext()
}

type DefinitionLabelDelimContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefinitionLabelDelimContext() *DefinitionLabelDelimContext {
	var p = new(DefinitionLabelDelimContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionLabelDelim
	return p
}

func InitEmptyDefinitionLabelDelimContext(p *DefinitionLabelDelimContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_definitionLabelDelim
}

func (*DefinitionLabelDelimContext) IsDefinitionLabelDelimContext() {}

func NewDefinitionLabelDelimContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinitionLabelDelimContext {
	var p = new(DefinitionLabelDelimContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_definitionLabelDelim

	return p
}

func (s *DefinitionLabelDelimContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinitionLabelDelimContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DefinitionLabelDelimContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DefinitionLabelDelimContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinitionLabelDelimContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinitionLabelDelimContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDefinitionLabelDelim(s)
	}
}

func (s *DefinitionLabelDelimContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDefinitionLabelDelim(s)
	}
}

func (p *RFC4512Parser) DefinitionLabelDelim() (localctx IDefinitionLabelDelimContext) {
	localctx = NewDefinitionLabelDelimContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, RFC4512ParserRULE_definitionLabelDelim)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(376)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.SetState(369)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext()) {
		case 1:
			p.SetState(346)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(343)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(348)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(349)
				p.Match(RFC4512ParserT__1)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(353)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(350)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(355)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			p.SetState(359)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(356)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(361)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(362)
				p.Match(RFC4512ParserT__2)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(366)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == RFC4512ParserSP {
				{
					p.SetState(363)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(368)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 2:
		p.SetState(372)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RFC4512ParserSP {
			{
				p.SetState(371)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(374)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKindContext is an interface to support dynamic dispatch.
type IKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StructuralKind() IStructuralKindContext
	AuxiliaryKind() IAuxiliaryKindContext
	AbstractKind() IAbstractKindContext

	// IsKindContext differentiates from other interfaces.
	IsKindContext()
}

type KindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKindContext() *KindContext {
	var p = new(KindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_kind
	return p
}

func InitEmptyKindContext(p *KindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_kind
}

func (*KindContext) IsKindContext() {}

func NewKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KindContext {
	var p = new(KindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_kind

	return p
}

func (s *KindContext) GetParser() antlr.Parser { return s.parser }

func (s *KindContext) StructuralKind() IStructuralKindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructuralKindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructuralKindContext)
}

func (s *KindContext) AuxiliaryKind() IAuxiliaryKindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAuxiliaryKindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAuxiliaryKindContext)
}

func (s *KindContext) AbstractKind() IAbstractKindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbstractKindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbstractKindContext)
}

func (s *KindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterKind(s)
	}
}

func (s *KindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitKind(s)
	}
}

func (p *RFC4512Parser) Kind() (localctx IKindContext) {
	localctx = NewKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, RFC4512ParserRULE_kind)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserT__4:
		{
			p.SetState(378)
			p.StructuralKind()
		}

	case RFC4512ParserT__5:
		{
			p.SetState(379)
			p.AuxiliaryKind()
		}

	case RFC4512ParserT__3:
		{
			p.SetState(380)
			p.AbstractKind()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAbstractKindContext is an interface to support dynamic dispatch.
type IAbstractKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAbstractKindContext differentiates from other interfaces.
	IsAbstractKindContext()
}

type AbstractKindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractKindContext() *AbstractKindContext {
	var p = new(AbstractKindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_abstractKind
	return p
}

func InitEmptyAbstractKindContext(p *AbstractKindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_abstractKind
}

func (*AbstractKindContext) IsAbstractKindContext() {}

func NewAbstractKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractKindContext {
	var p = new(AbstractKindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_abstractKind

	return p
}

func (s *AbstractKindContext) GetParser() antlr.Parser { return s.parser }
func (s *AbstractKindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractKindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractKindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAbstractKind(s)
	}
}

func (s *AbstractKindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAbstractKind(s)
	}
}

func (p *RFC4512Parser) AbstractKind() (localctx IAbstractKindContext) {
	localctx = NewAbstractKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, RFC4512ParserRULE_abstractKind)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(383)
		p.Match(RFC4512ParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructuralKindContext is an interface to support dynamic dispatch.
type IStructuralKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsStructuralKindContext differentiates from other interfaces.
	IsStructuralKindContext()
}

type StructuralKindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructuralKindContext() *StructuralKindContext {
	var p = new(StructuralKindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structuralKind
	return p
}

func InitEmptyStructuralKindContext(p *StructuralKindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structuralKind
}

func (*StructuralKindContext) IsStructuralKindContext() {}

func NewStructuralKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructuralKindContext {
	var p = new(StructuralKindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_structuralKind

	return p
}

func (s *StructuralKindContext) GetParser() antlr.Parser { return s.parser }
func (s *StructuralKindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructuralKindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructuralKindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterStructuralKind(s)
	}
}

func (s *StructuralKindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitStructuralKind(s)
	}
}

func (p *RFC4512Parser) StructuralKind() (localctx IStructuralKindContext) {
	localctx = NewStructuralKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, RFC4512ParserRULE_structuralKind)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(385)
		p.Match(RFC4512ParserT__4)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAuxiliaryKindContext is an interface to support dynamic dispatch.
type IAuxiliaryKindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAuxiliaryKindContext differentiates from other interfaces.
	IsAuxiliaryKindContext()
}

type AuxiliaryKindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuxiliaryKindContext() *AuxiliaryKindContext {
	var p = new(AuxiliaryKindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_auxiliaryKind
	return p
}

func InitEmptyAuxiliaryKindContext(p *AuxiliaryKindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_auxiliaryKind
}

func (*AuxiliaryKindContext) IsAuxiliaryKindContext() {}

func NewAuxiliaryKindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AuxiliaryKindContext {
	var p = new(AuxiliaryKindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_auxiliaryKind

	return p
}

func (s *AuxiliaryKindContext) GetParser() antlr.Parser { return s.parser }
func (s *AuxiliaryKindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuxiliaryKindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AuxiliaryKindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAuxiliaryKind(s)
	}
}

func (s *AuxiliaryKindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAuxiliaryKind(s)
	}
}

func (p *RFC4512Parser) AuxiliaryKind() (localctx IAuxiliaryKindContext) {
	localctx = NewAuxiliaryKindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, RFC4512ParserRULE_auxiliaryKind)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(387)
		p.Match(RFC4512ParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAppliesContext is an interface to support dynamic dispatch.
type IAppliesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsAppliesContext differentiates from other interfaces.
	IsAppliesContext()
}

type AppliesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAppliesContext() *AppliesContext {
	var p = new(AppliesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_applies
	return p
}

func InitEmptyAppliesContext(p *AppliesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_applies
}

func (*AppliesContext) IsAppliesContext() {}

func NewAppliesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AppliesContext {
	var p = new(AppliesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_applies

	return p
}

func (s *AppliesContext) GetParser() antlr.Parser { return s.parser }

func (s *AppliesContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *AppliesContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *AppliesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *AppliesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *AppliesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AppliesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AppliesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterApplies(s)
	}
}

func (s *AppliesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitApplies(s)
	}
}

func (p *RFC4512Parser) Applies() (localctx IAppliesContext) {
	localctx = NewAppliesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, RFC4512ParserRULE_applies)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(390)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(389)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(392)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(394)
		p.Match(RFC4512ParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(396)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(395)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(398)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(402)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(400)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(401)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMustContext is an interface to support dynamic dispatch.
type IMustContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsMustContext differentiates from other interfaces.
	IsMustContext()
}

type MustContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMustContext() *MustContext {
	var p = new(MustContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_must
	return p
}

func InitEmptyMustContext(p *MustContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_must
}

func (*MustContext) IsMustContext() {}

func NewMustContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MustContext {
	var p = new(MustContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_must

	return p
}

func (s *MustContext) GetParser() antlr.Parser { return s.parser }

func (s *MustContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *MustContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *MustContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MustContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MustContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MustContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MustContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMust(s)
	}
}

func (s *MustContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMust(s)
	}
}

func (p *RFC4512Parser) Must() (localctx IMustContext) {
	localctx = NewMustContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, RFC4512ParserRULE_must)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(405)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(404)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(407)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(409)
		p.Match(RFC4512ParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(411)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(410)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(413)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(415)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(416)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAuxContext is an interface to support dynamic dispatch.
type IAuxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsAuxContext differentiates from other interfaces.
	IsAuxContext()
}

type AuxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuxContext() *AuxContext {
	var p = new(AuxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aux
	return p
}

func InitEmptyAuxContext(p *AuxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_aux
}

func (*AuxContext) IsAuxContext() {}

func NewAuxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AuxContext {
	var p = new(AuxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_aux

	return p
}

func (s *AuxContext) GetParser() antlr.Parser { return s.parser }

func (s *AuxContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *AuxContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *AuxContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *AuxContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *AuxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AuxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAux(s)
	}
}

func (s *AuxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAux(s)
	}
}

func (p *RFC4512Parser) Aux() (localctx IAuxContext) {
	localctx = NewAuxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, RFC4512ParserRULE_aux)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(419)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(422)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(424)
		p.Match(RFC4512ParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(426)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(425)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(428)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(432)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(430)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(431)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMayContext is an interface to support dynamic dispatch.
type IMayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsMayContext differentiates from other interfaces.
	IsMayContext()
}

type MayContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMayContext() *MayContext {
	var p = new(MayContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_may
	return p
}

func InitEmptyMayContext(p *MayContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_may
}

func (*MayContext) IsMayContext() {}

func NewMayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MayContext {
	var p = new(MayContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_may

	return p
}

func (s *MayContext) GetParser() antlr.Parser { return s.parser }

func (s *MayContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *MayContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *MayContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MayContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMay(s)
	}
}

func (s *MayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMay(s)
	}
}

func (p *RFC4512Parser) May() (localctx IMayContext) {
	localctx = NewMayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, RFC4512ParserRULE_may)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(435)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(434)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(437)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(439)
		p.Match(RFC4512ParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(441)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(440)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(447)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(445)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(446)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INotContext is an interface to support dynamic dispatch.
type INotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsNotContext differentiates from other interfaces.
	IsNotContext()
}

type NotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNotContext() *NotContext {
	var p = new(NotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_not
	return p
}

func InitEmptyNotContext(p *NotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_not
}

func (*NotContext) IsNotContext() {}

func NewNotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NotContext {
	var p = new(NotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_not

	return p
}

func (s *NotContext) GetParser() antlr.Parser { return s.parser }

func (s *NotContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *NotContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *NotContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *NotContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *NotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNot(s)
	}
}

func (s *NotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNot(s)
	}
}

func (p *RFC4512Parser) Not() (localctx INotContext) {
	localctx = NewNotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, RFC4512ParserRULE_not)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(450)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(449)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(452)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(454)
		p.Match(RFC4512ParserT__10)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(455)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(458)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(460)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(461)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFormContext is an interface to support dynamic dispatch.
type IFormContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsFormContext differentiates from other interfaces.
	IsFormContext()
}

type FormContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormContext() *FormContext {
	var p = new(FormContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_form
	return p
}

func InitEmptyFormContext(p *FormContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_form
}

func (*FormContext) IsFormContext() {}

func NewFormContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormContext {
	var p = new(FormContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_form

	return p
}

func (s *FormContext) GetParser() antlr.Parser { return s.parser }

func (s *FormContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *FormContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *FormContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *FormContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterForm(s)
	}
}

func (s *FormContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitForm(s)
	}
}

func (p *RFC4512Parser) Form() (localctx IFormContext) {
	localctx = NewFormContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, RFC4512ParserRULE_form)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(464)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(469)
		p.Match(RFC4512ParserT__11)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(470)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(473)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(475)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderingContext is an interface to support dynamic dispatch.
type IOrderingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsOrderingContext differentiates from other interfaces.
	IsOrderingContext()
}

type OrderingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderingContext() *OrderingContext {
	var p = new(OrderingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_ordering
	return p
}

func InitEmptyOrderingContext(p *OrderingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_ordering
}

func (*OrderingContext) IsOrderingContext() {}

func NewOrderingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderingContext {
	var p = new(OrderingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_ordering

	return p
}

func (s *OrderingContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderingContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *OrderingContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *OrderingContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *OrderingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOrdering(s)
	}
}

func (s *OrderingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOrdering(s)
	}
}

func (p *RFC4512Parser) Ordering() (localctx IOrderingContext) {
	localctx = NewOrderingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, RFC4512ParserRULE_ordering)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(477)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(480)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(482)
		p.Match(RFC4512ParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(484)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(483)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(486)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(488)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEqualityContext is an interface to support dynamic dispatch.
type IEqualityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsEqualityContext differentiates from other interfaces.
	IsEqualityContext()
}

type EqualityContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityContext() *EqualityContext {
	var p = new(EqualityContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_equality
	return p
}

func InitEmptyEqualityContext(p *EqualityContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_equality
}

func (*EqualityContext) IsEqualityContext() {}

func NewEqualityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityContext {
	var p = new(EqualityContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_equality

	return p
}

func (s *EqualityContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *EqualityContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *EqualityContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *EqualityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterEquality(s)
	}
}

func (s *EqualityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitEquality(s)
	}
}

func (p *RFC4512Parser) Equality() (localctx IEqualityContext) {
	localctx = NewEqualityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, RFC4512ParserRULE_equality)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(491)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(490)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(493)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(495)
		p.Match(RFC4512ParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(496)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(499)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(501)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructuralClassContext is an interface to support dynamic dispatch.
type IStructuralClassContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsStructuralClassContext differentiates from other interfaces.
	IsStructuralClassContext()
}

type StructuralClassContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructuralClassContext() *StructuralClassContext {
	var p = new(StructuralClassContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structuralClass
	return p
}

func InitEmptyStructuralClassContext(p *StructuralClassContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structuralClass
}

func (*StructuralClassContext) IsStructuralClassContext() {}

func NewStructuralClassContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructuralClassContext {
	var p = new(StructuralClassContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_structuralClass

	return p
}

func (s *StructuralClassContext) GetParser() antlr.Parser { return s.parser }

func (s *StructuralClassContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *StructuralClassContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *StructuralClassContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *StructuralClassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructuralClassContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructuralClassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterStructuralClass(s)
	}
}

func (s *StructuralClassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitStructuralClass(s)
	}
}

func (p *RFC4512Parser) StructuralClass() (localctx IStructuralClassContext) {
	localctx = NewStructuralClassContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, RFC4512ParserRULE_structuralClass)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(504)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(503)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(506)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(508)
		p.Match(RFC4512ParserT__14)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(510)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(509)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(512)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(514)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISuperTypeContext is an interface to support dynamic dispatch.
type ISuperTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsSuperTypeContext differentiates from other interfaces.
	IsSuperTypeContext()
}

type SuperTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperTypeContext() *SuperTypeContext {
	var p = new(SuperTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_superType
	return p
}

func InitEmptySuperTypeContext(p *SuperTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_superType
}

func (*SuperTypeContext) IsSuperTypeContext() {}

func NewSuperTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperTypeContext {
	var p = new(SuperTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_superType

	return p
}

func (s *SuperTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperTypeContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *SuperTypeContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *SuperTypeContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *SuperTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterSuperType(s)
	}
}

func (s *SuperTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitSuperType(s)
	}
}

func (p *RFC4512Parser) SuperType() (localctx ISuperTypeContext) {
	localctx = NewSuperTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, RFC4512ParserRULE_superType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(516)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(519)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(521)
		p.Match(RFC4512ParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(522)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(525)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(527)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISuperClassesContext is an interface to support dynamic dispatch.
type ISuperClassesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	OIDs() IOIDsContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsSuperClassesContext differentiates from other interfaces.
	IsSuperClassesContext()
}

type SuperClassesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperClassesContext() *SuperClassesContext {
	var p = new(SuperClassesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_superClasses
	return p
}

func InitEmptySuperClassesContext(p *SuperClassesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_superClasses
}

func (*SuperClassesContext) IsSuperClassesContext() {}

func NewSuperClassesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperClassesContext {
	var p = new(SuperClassesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_superClasses

	return p
}

func (s *SuperClassesContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperClassesContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *SuperClassesContext) OIDs() IOIDsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDsContext)
}

func (s *SuperClassesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *SuperClassesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *SuperClassesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperClassesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperClassesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterSuperClasses(s)
	}
}

func (s *SuperClassesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitSuperClasses(s)
	}
}

func (p *RFC4512Parser) SuperClasses() (localctx ISuperClassesContext) {
	localctx = NewSuperClassesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, RFC4512ParserRULE_superClasses)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(529)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(532)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(534)
		p.Match(RFC4512ParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(535)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID, RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(540)
			p.OID()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(541)
			p.OIDs()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISuperRulesContext is an interface to support dynamic dispatch.
type ISuperRulesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StructureRule() IStructureRuleContext
	StructureRules() IStructureRulesContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsSuperRulesContext differentiates from other interfaces.
	IsSuperRulesContext()
}

type SuperRulesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperRulesContext() *SuperRulesContext {
	var p = new(SuperRulesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_superRules
	return p
}

func InitEmptySuperRulesContext(p *SuperRulesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_superRules
}

func (*SuperRulesContext) IsSuperRulesContext() {}

func NewSuperRulesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperRulesContext {
	var p = new(SuperRulesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_superRules

	return p
}

func (s *SuperRulesContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperRulesContext) StructureRule() IStructureRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRuleContext)
}

func (s *SuperRulesContext) StructureRules() IStructureRulesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRulesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRulesContext)
}

func (s *SuperRulesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *SuperRulesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *SuperRulesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperRulesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperRulesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterSuperRules(s)
	}
}

func (s *SuperRulesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitSuperRules(s)
	}
}

func (p *RFC4512Parser) SuperRules() (localctx ISuperRulesContext) {
	localctx = NewSuperRulesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, RFC4512ParserRULE_superRules)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(545)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(544)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(547)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(549)
		p.Match(RFC4512ParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(551)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(550)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(553)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(557)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserDigit:
		{
			p.SetState(555)
			p.StructureRule()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(556)
			p.StructureRules()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISubstrContext is an interface to support dynamic dispatch.
type ISubstrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsSubstrContext differentiates from other interfaces.
	IsSubstrContext()
}

type SubstrContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstrContext() *SubstrContext {
	var p = new(SubstrContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_substr
	return p
}

func InitEmptySubstrContext(p *SubstrContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_substr
}

func (*SubstrContext) IsSubstrContext() {}

func NewSubstrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstrContext {
	var p = new(SubstrContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_substr

	return p
}

func (s *SubstrContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstrContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *SubstrContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *SubstrContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *SubstrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterSubstr(s)
	}
}

func (s *SubstrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitSubstr(s)
	}
}

func (p *RFC4512Parser) Substr() (localctx ISubstrContext) {
	localctx = NewSubstrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, RFC4512ParserRULE_substr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(560)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(559)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(562)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(564)
		p.Match(RFC4512ParserT__16)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserT__17 {
		{
			p.SetState(565)
			p.Match(RFC4512ParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(567)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserT__18 {
			{
				p.SetState(566)
				p.Match(RFC4512ParserT__18)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	p.SetState(572)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(571)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(574)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(576)
		p.OID()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Names() INamesContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_name
	return p
}

func InitEmptyNameContext(p *NameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_name
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) Names() INamesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamesContext)
}

func (s *NameContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *NameContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitName(s)
	}
}

func (p *RFC4512Parser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, RFC4512ParserRULE_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(579)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(578)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(581)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(583)
		p.Match(RFC4512ParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(584)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(587)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(589)
		p.Names()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsageContext is an interface to support dynamic dispatch.
type IUsageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Usages() IUsagesContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsUsageContext differentiates from other interfaces.
	IsUsageContext()
}

type UsageContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsageContext() *UsageContext {
	var p = new(UsageContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_usage
	return p
}

func InitEmptyUsageContext(p *UsageContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_usage
}

func (*UsageContext) IsUsageContext() {}

func NewUsageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsageContext {
	var p = new(UsageContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_usage

	return p
}

func (s *UsageContext) GetParser() antlr.Parser { return s.parser }

func (s *UsageContext) Usages() IUsagesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsagesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsagesContext)
}

func (s *UsageContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *UsageContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *UsageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterUsage(s)
	}
}

func (s *UsageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitUsage(s)
	}
}

func (p *RFC4512Parser) Usage() (localctx IUsageContext) {
	localctx = NewUsageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, RFC4512ParserRULE_usage)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(591)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(594)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(596)
		p.Match(RFC4512ParserT__20)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(598)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(597)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(600)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(602)
		p.Usages()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptionContext is an interface to support dynamic dispatch.
type IDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QuotedString() IQuotedStringContext
	QuotedDescriptor() IQuotedDescriptorContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsDescriptionContext differentiates from other interfaces.
	IsDescriptionContext()
}

type DescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptionContext() *DescriptionContext {
	var p = new(DescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_description
	return p
}

func InitEmptyDescriptionContext(p *DescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_description
}

func (*DescriptionContext) IsDescriptionContext() {}

func NewDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescriptionContext {
	var p = new(DescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_description

	return p
}

func (s *DescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DescriptionContext) QuotedString() IQuotedStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuotedStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuotedStringContext)
}

func (s *DescriptionContext) QuotedDescriptor() IQuotedDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuotedDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuotedDescriptorContext)
}

func (s *DescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDescription(s)
	}
}

func (s *DescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDescription(s)
	}
}

func (p *RFC4512Parser) Description() (localctx IDescriptionContext) {
	localctx = NewDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, RFC4512ParserRULE_description)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(605)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(604)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(607)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(609)
		p.Match(RFC4512ParserT__21)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(610)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(613)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(617)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserQString:
		{
			p.SetState(615)
			p.QuotedString()
		}

	case RFC4512ParserQDescr:
		{
			p.SetState(616)
			p.QuotedDescriptor()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISyntaxContext is an interface to support dynamic dispatch.
type ISyntaxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumericOID() INumericOIDContext
	QuotedDescriptor() IQuotedDescriptorContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsSyntaxContext differentiates from other interfaces.
	IsSyntaxContext()
}

type SyntaxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySyntaxContext() *SyntaxContext {
	var p = new(SyntaxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_syntax
	return p
}

func InitEmptySyntaxContext(p *SyntaxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_syntax
}

func (*SyntaxContext) IsSyntaxContext() {}

func NewSyntaxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SyntaxContext {
	var p = new(SyntaxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_syntax

	return p
}

func (s *SyntaxContext) GetParser() antlr.Parser { return s.parser }

func (s *SyntaxContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *SyntaxContext) QuotedDescriptor() IQuotedDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuotedDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuotedDescriptorContext)
}

func (s *SyntaxContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *SyntaxContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *SyntaxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SyntaxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SyntaxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterSyntax(s)
	}
}

func (s *SyntaxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitSyntax(s)
	}
}

func (p *RFC4512Parser) Syntax() (localctx ISyntaxContext) {
	localctx = NewSyntaxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, RFC4512ParserRULE_syntax)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(620)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(619)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(622)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(624)
		p.Match(RFC4512ParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(625)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(632)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNumOID:
		{
			p.SetState(630)
			p.NumericOID()
		}

	case RFC4512ParserQDescr:
		{
			p.SetState(631)
			p.QuotedDescriptor()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISingleValueContext is an interface to support dynamic dispatch.
type ISingleValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsSingleValueContext differentiates from other interfaces.
	IsSingleValueContext()
}

type SingleValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleValueContext() *SingleValueContext {
	var p = new(SingleValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_singleValue
	return p
}

func InitEmptySingleValueContext(p *SingleValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_singleValue
}

func (*SingleValueContext) IsSingleValueContext() {}

func NewSingleValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleValueContext {
	var p = new(SingleValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_singleValue

	return p
}

func (s *SingleValueContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleValueContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *SingleValueContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *SingleValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterSingleValue(s)
	}
}

func (s *SingleValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitSingleValue(s)
	}
}

func (p *RFC4512Parser) SingleValue() (localctx ISingleValueContext) {
	localctx = NewSingleValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, RFC4512ParserRULE_singleValue)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(635)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(634)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(639)
		p.Match(RFC4512ParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImmutabilityContext is an interface to support dynamic dispatch.
type IImmutabilityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsImmutabilityContext differentiates from other interfaces.
	IsImmutabilityContext()
}

type ImmutabilityContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImmutabilityContext() *ImmutabilityContext {
	var p = new(ImmutabilityContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_immutability
	return p
}

func InitEmptyImmutabilityContext(p *ImmutabilityContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_immutability
}

func (*ImmutabilityContext) IsImmutabilityContext() {}

func NewImmutabilityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImmutabilityContext {
	var p = new(ImmutabilityContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_immutability

	return p
}

func (s *ImmutabilityContext) GetParser() antlr.Parser { return s.parser }

func (s *ImmutabilityContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ImmutabilityContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ImmutabilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImmutabilityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImmutabilityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterImmutability(s)
	}
}

func (s *ImmutabilityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitImmutability(s)
	}
}

func (p *RFC4512Parser) Immutability() (localctx IImmutabilityContext) {
	localctx = NewImmutabilityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, RFC4512ParserRULE_immutability)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(641)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(644)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(646)
		p.Match(RFC4512ParserT__24)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollectiveContext is an interface to support dynamic dispatch.
type ICollectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsCollectiveContext differentiates from other interfaces.
	IsCollectiveContext()
}

type CollectiveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectiveContext() *CollectiveContext {
	var p = new(CollectiveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_collective
	return p
}

func InitEmptyCollectiveContext(p *CollectiveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_collective
}

func (*CollectiveContext) IsCollectiveContext() {}

func NewCollectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectiveContext {
	var p = new(CollectiveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_collective

	return p
}

func (s *CollectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectiveContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *CollectiveContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *CollectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterCollective(s)
	}
}

func (s *CollectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitCollective(s)
	}
}

func (p *RFC4512Parser) Collective() (localctx ICollectiveContext) {
	localctx = NewCollectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, RFC4512ParserRULE_collective)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(649)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(648)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(653)
		p.Match(RFC4512ParserT__25)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObsolescenceContext is an interface to support dynamic dispatch.
type IObsolescenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsObsolescenceContext differentiates from other interfaces.
	IsObsolescenceContext()
}

type ObsolescenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObsolescenceContext() *ObsolescenceContext {
	var p = new(ObsolescenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_obsolescence
	return p
}

func InitEmptyObsolescenceContext(p *ObsolescenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_obsolescence
}

func (*ObsolescenceContext) IsObsolescenceContext() {}

func NewObsolescenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObsolescenceContext {
	var p = new(ObsolescenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_obsolescence

	return p
}

func (s *ObsolescenceContext) GetParser() antlr.Parser { return s.parser }

func (s *ObsolescenceContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ObsolescenceContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ObsolescenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObsolescenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObsolescenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObsolescence(s)
	}
}

func (s *ObsolescenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObsolescence(s)
	}
}

func (p *RFC4512Parser) Obsolescence() (localctx IObsolescenceContext) {
	localctx = NewObsolescenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, RFC4512ParserRULE_obsolescence)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(655)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(658)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(660)
		p.Match(RFC4512ParserT__26)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMinUpperBoundsContext is an interface to support dynamic dispatch.
type IMinUpperBoundsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MUB() antlr.TerminalNode

	// IsMinUpperBoundsContext differentiates from other interfaces.
	IsMinUpperBoundsContext()
}

type MinUpperBoundsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMinUpperBoundsContext() *MinUpperBoundsContext {
	var p = new(MinUpperBoundsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_minUpperBounds
	return p
}

func InitEmptyMinUpperBoundsContext(p *MinUpperBoundsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_minUpperBounds
}

func (*MinUpperBoundsContext) IsMinUpperBoundsContext() {}

func NewMinUpperBoundsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MinUpperBoundsContext {
	var p = new(MinUpperBoundsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_minUpperBounds

	return p
}

func (s *MinUpperBoundsContext) GetParser() antlr.Parser { return s.parser }

func (s *MinUpperBoundsContext) MUB() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMUB, 0)
}

func (s *MinUpperBoundsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MinUpperBoundsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MinUpperBoundsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMinUpperBounds(s)
	}
}

func (s *MinUpperBoundsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMinUpperBounds(s)
	}
}

func (p *RFC4512Parser) MinUpperBounds() (localctx IMinUpperBoundsContext) {
	localctx = NewMinUpperBoundsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, RFC4512ParserRULE_minUpperBounds)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(662)
		p.Match(RFC4512ParserMUB)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructureRuleContext is an interface to support dynamic dispatch.
type IStructureRuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsStructureRuleContext differentiates from other interfaces.
	IsStructureRuleContext()
}

type StructureRuleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructureRuleContext() *StructureRuleContext {
	var p = new(StructureRuleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRule
	return p
}

func InitEmptyStructureRuleContext(p *StructureRuleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRule
}

func (*StructureRuleContext) IsStructureRuleContext() {}

func NewStructureRuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructureRuleContext {
	var p = new(StructureRuleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_structureRule

	return p
}

func (s *StructureRuleContext) GetParser() antlr.Parser { return s.parser }

func (s *StructureRuleContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *StructureRuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructureRuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructureRuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterStructureRule(s)
	}
}

func (s *StructureRuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitStructureRule(s)
	}
}

func (p *RFC4512Parser) StructureRule() (localctx IStructureRuleContext) {
	localctx = NewStructureRuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, RFC4512ParserRULE_structureRule)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(664)
		p.Number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsagesContext is an interface to support dynamic dispatch.
type IUsagesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UserApplication() IUserApplicationContext
	DirectoryOperation() IDirectoryOperationContext
	DistributedOperation() IDistributedOperationContext
	DSAOperation() IDSAOperationContext

	// IsUsagesContext differentiates from other interfaces.
	IsUsagesContext()
}

type UsagesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsagesContext() *UsagesContext {
	var p = new(UsagesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_usages
	return p
}

func InitEmptyUsagesContext(p *UsagesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_usages
}

func (*UsagesContext) IsUsagesContext() {}

func NewUsagesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsagesContext {
	var p = new(UsagesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_usages

	return p
}

func (s *UsagesContext) GetParser() antlr.Parser { return s.parser }

func (s *UsagesContext) UserApplication() IUserApplicationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUserApplicationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUserApplicationContext)
}

func (s *UsagesContext) DirectoryOperation() IDirectoryOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectoryOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectoryOperationContext)
}

func (s *UsagesContext) DistributedOperation() IDistributedOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistributedOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistributedOperationContext)
}

func (s *UsagesContext) DSAOperation() IDSAOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDSAOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDSAOperationContext)
}

func (s *UsagesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsagesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsagesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterUsages(s)
	}
}

func (s *UsagesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitUsages(s)
	}
}

func (p *RFC4512Parser) Usages() (localctx IUsagesContext) {
	localctx = NewUsagesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, RFC4512ParserRULE_usages)
	p.SetState(670)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserT__28:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(666)
			p.UserApplication()
		}

	case RFC4512ParserT__29:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(667)
			p.DirectoryOperation()
		}

	case RFC4512ParserT__30:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(668)
			p.DistributedOperation()
		}

	case RFC4512ParserT__31:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(669)
			p.DSAOperation()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuotedDescriptorContext is an interface to support dynamic dispatch.
type IQuotedDescriptorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QDescr() antlr.TerminalNode

	// IsQuotedDescriptorContext differentiates from other interfaces.
	IsQuotedDescriptorContext()
}

type QuotedDescriptorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuotedDescriptorContext() *QuotedDescriptorContext {
	var p = new(QuotedDescriptorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_quotedDescriptor
	return p
}

func InitEmptyQuotedDescriptorContext(p *QuotedDescriptorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_quotedDescriptor
}

func (*QuotedDescriptorContext) IsQuotedDescriptorContext() {}

func NewQuotedDescriptorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuotedDescriptorContext {
	var p = new(QuotedDescriptorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_quotedDescriptor

	return p
}

func (s *QuotedDescriptorContext) GetParser() antlr.Parser { return s.parser }

func (s *QuotedDescriptorContext) QDescr() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserQDescr, 0)
}

func (s *QuotedDescriptorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuotedDescriptorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuotedDescriptorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterQuotedDescriptor(s)
	}
}

func (s *QuotedDescriptorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitQuotedDescriptor(s)
	}
}

func (p *RFC4512Parser) QuotedDescriptor() (localctx IQuotedDescriptorContext) {
	localctx = NewQuotedDescriptorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, RFC4512ParserRULE_quotedDescriptor)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(672)
		p.Match(RFC4512ParserQDescr)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuotedStringContext is an interface to support dynamic dispatch.
type IQuotedStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QString() antlr.TerminalNode

	// IsQuotedStringContext differentiates from other interfaces.
	IsQuotedStringContext()
}

type QuotedStringContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuotedStringContext() *QuotedStringContext {
	var p = new(QuotedStringContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_quotedString
	return p
}

func InitEmptyQuotedStringContext(p *QuotedStringContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_quotedString
}

func (*QuotedStringContext) IsQuotedStringContext() {}

func NewQuotedStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuotedStringContext {
	var p = new(QuotedStringContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_quotedString

	return p
}

func (s *QuotedStringContext) GetParser() antlr.Parser { return s.parser }

func (s *QuotedStringContext) QString() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserQString, 0)
}

func (s *QuotedStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuotedStringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuotedStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterQuotedString(s)
	}
}

func (s *QuotedStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitQuotedString(s)
	}
}

func (p *RFC4512Parser) QuotedString() (localctx IQuotedStringContext) {
	localctx = NewQuotedStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, RFC4512ParserRULE_quotedString)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(674)
		p.Match(RFC4512ParserQString)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISchemaDNContext is an interface to support dynamic dispatch.
type ISchemaDNContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DistinguishedName() antlr.TerminalNode

	// IsSchemaDNContext differentiates from other interfaces.
	IsSchemaDNContext()
}

type SchemaDNContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaDNContext() *SchemaDNContext {
	var p = new(SchemaDNContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_schemaDN
	return p
}

func InitEmptySchemaDNContext(p *SchemaDNContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_schemaDN
}

func (*SchemaDNContext) IsSchemaDNContext() {}

func NewSchemaDNContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaDNContext {
	var p = new(SchemaDNContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_schemaDN

	return p
}

func (s *SchemaDNContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaDNContext) DistinguishedName() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDistinguishedName, 0)
}

func (s *SchemaDNContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaDNContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemaDNContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterSchemaDN(s)
	}
}

func (s *SchemaDNContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitSchemaDN(s)
	}
}

func (p *RFC4512Parser) SchemaDN() (localctx ISchemaDNContext) {
	localctx = NewSchemaDNContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, RFC4512ParserRULE_schemaDN)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(676)
		p.Match(RFC4512ParserDistinguishedName)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectIdentifierOIDOrNameContext is an interface to support dynamic dispatch.
type IObjectIdentifierOIDOrNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Descriptor() IDescriptorContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode

	// IsObjectIdentifierOIDOrNameContext differentiates from other interfaces.
	IsObjectIdentifierOIDOrNameContext()
}

type ObjectIdentifierOIDOrNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectIdentifierOIDOrNameContext() *ObjectIdentifierOIDOrNameContext {
	var p = new(ObjectIdentifierOIDOrNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectIdentifierOIDOrName
	return p
}

func InitEmptyObjectIdentifierOIDOrNameContext(p *ObjectIdentifierOIDOrNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectIdentifierOIDOrName
}

func (*ObjectIdentifierOIDOrNameContext) IsObjectIdentifierOIDOrNameContext() {}

func NewObjectIdentifierOIDOrNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectIdentifierOIDOrNameContext {
	var p = new(ObjectIdentifierOIDOrNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectIdentifierOIDOrName

	return p
}

func (s *ObjectIdentifierOIDOrNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectIdentifierOIDOrNameContext) Descriptor() IDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptorContext)
}

func (s *ObjectIdentifierOIDOrNameContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *ObjectIdentifierOIDOrNameContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ObjectIdentifierOIDOrNameContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ObjectIdentifierOIDOrNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectIdentifierOIDOrNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectIdentifierOIDOrNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectIdentifierOIDOrName(s)
	}
}

func (s *ObjectIdentifierOIDOrNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectIdentifierOIDOrName(s)
	}
}

func (p *RFC4512Parser) ObjectIdentifierOIDOrName() (localctx IObjectIdentifierOIDOrNameContext) {
	localctx = NewObjectIdentifierOIDOrNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, RFC4512ParserRULE_objectIdentifierOIDOrName)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(678)
		p.Descriptor()
	}
	p.SetState(680)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserSP {
		{
			p.SetState(679)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(682)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(684)
		p.NumericOIDOrMacro()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeDescriptionContext is an interface to support dynamic dispatch.
type IAttributeDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OID() IOIDContext
	AttrOptions() IAttrOptionsContext

	// IsAttributeDescriptionContext differentiates from other interfaces.
	IsAttributeDescriptionContext()
}

type AttributeDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeDescriptionContext() *AttributeDescriptionContext {
	var p = new(AttributeDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeDescription
	return p
}

func InitEmptyAttributeDescriptionContext(p *AttributeDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeDescription
}

func (*AttributeDescriptionContext) IsAttributeDescriptionContext() {}

func NewAttributeDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeDescriptionContext {
	var p = new(AttributeDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeDescription

	return p
}

func (s *AttributeDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeDescriptionContext) OID() IOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *AttributeDescriptionContext) AttrOptions() IAttrOptionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttrOptionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttrOptionsContext)
}

func (s *AttributeDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeDescription(s)
	}
}

func (s *AttributeDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeDescription(s)
	}
}

func (p *RFC4512Parser) AttributeDescription() (localctx IAttributeDescriptionContext) {
	localctx = NewAttributeDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, RFC4512ParserRULE_attributeDescription)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(686)
		p.OID()
	}
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserT__27 {
		{
			p.SetState(687)
			p.AttrOptions()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpenParenContext is an interface to support dynamic dispatch.
type IOpenParenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParenthesis() antlr.TerminalNode

	// IsOpenParenContext differentiates from other interfaces.
	IsOpenParenContext()
}

type OpenParenContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpenParenContext() *OpenParenContext {
	var p = new(OpenParenContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_openParen
	return p
}

func InitEmptyOpenParenContext(p *OpenParenContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_openParen
}

func (*OpenParenContext) IsOpenParenContext() {}

func NewOpenParenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpenParenContext {
	var p = new(OpenParenContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_openParen

	return p
}

func (s *OpenParenContext) GetParser() antlr.Parser { return s.parser }

func (s *OpenParenContext) OpenParenthesis() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserOpenParenthesis, 0)
}

func (s *OpenParenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpenParenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpenParenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOpenParen(s)
	}
}

func (s *OpenParenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOpenParen(s)
	}
}

func (p *RFC4512Parser) OpenParen() (localctx IOpenParenContext) {
	localctx = NewOpenParenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, RFC4512ParserRULE_openParen)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(690)
		p.Match(RFC4512ParserOpenParenthesis)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICloseParenContext is an interface to support dynamic dispatch.
type ICloseParenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CloseParenthesis() antlr.TerminalNode

	// IsCloseParenContext differentiates from other interfaces.
	IsCloseParenContext()
}

type CloseParenContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloseParenContext() *CloseParenContext {
	var p = new(CloseParenContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_closeParen
	return p
}

func InitEmptyCloseParenContext(p *CloseParenContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_closeParen
}

func (*CloseParenContext) IsCloseParenContext() {}

func NewCloseParenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CloseParenContext {
	var p = new(CloseParenContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_closeParen

	return p
}

func (s *CloseParenContext) GetParser() antlr.Parser { return s.parser }

func (s *CloseParenContext) CloseParenthesis() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserCloseParenthesis, 0)
}

func (s *CloseParenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloseParenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CloseParenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterCloseParen(s)
	}
}

func (s *CloseParenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitCloseParen(s)
	}
}

func (p *RFC4512Parser) CloseParen() (localctx ICloseParenContext) {
	localctx = NewCloseParenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, RFC4512ParserRULE_closeParen)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(692)
		p.Match(RFC4512ParserCloseParenthesis)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumericOIDOrMacroContext is an interface to support dynamic dispatch.
type INumericOIDOrMacroContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Macro() IMacroContext
	NumericOID() INumericOIDContext

	// IsNumericOIDOrMacroContext differentiates from other interfaces.
	IsNumericOIDOrMacroContext()
}

type NumericOIDOrMacroContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericOIDOrMacroContext() *NumericOIDOrMacroContext {
	var p = new(NumericOIDOrMacroContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOIDOrMacro
	return p
}

func InitEmptyNumericOIDOrMacroContext(p *NumericOIDOrMacroContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOIDOrMacro
}

func (*NumericOIDOrMacroContext) IsNumericOIDOrMacroContext() {}

func NewNumericOIDOrMacroContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericOIDOrMacroContext {
	var p = new(NumericOIDOrMacroContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_numericOIDOrMacro

	return p
}

func (s *NumericOIDOrMacroContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericOIDOrMacroContext) Macro() IMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMacroContext)
}

func (s *NumericOIDOrMacroContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *NumericOIDOrMacroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericOIDOrMacroContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericOIDOrMacroContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNumericOIDOrMacro(s)
	}
}

func (s *NumericOIDOrMacroContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNumericOIDOrMacro(s)
	}
}

func (p *RFC4512Parser) NumericOIDOrMacro() (localctx INumericOIDOrMacroContext) {
	localctx = NewNumericOIDOrMacroContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, RFC4512ParserRULE_numericOIDOrMacro)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(696)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(694)
			p.Macro()
		}

	case RFC4512ParserNumOID:
		{
			p.SetState(695)
			p.NumericOID()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMacroContext is an interface to support dynamic dispatch.
type IMacroContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Descriptor() IDescriptorContext
	MacroSuffix() IMacroSuffixContext

	// IsMacroContext differentiates from other interfaces.
	IsMacroContext()
}

type MacroContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMacroContext() *MacroContext {
	var p = new(MacroContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macro
	return p
}

func InitEmptyMacroContext(p *MacroContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macro
}

func (*MacroContext) IsMacroContext() {}

func NewMacroContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MacroContext {
	var p = new(MacroContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_macro

	return p
}

func (s *MacroContext) GetParser() antlr.Parser { return s.parser }

func (s *MacroContext) Descriptor() IDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptorContext)
}

func (s *MacroContext) MacroSuffix() IMacroSuffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMacroSuffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMacroSuffixContext)
}

func (s *MacroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MacroContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MacroContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMacro(s)
	}
}

func (s *MacroContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMacro(s)
	}
}

func (p *RFC4512Parser) Macro() (localctx IMacroContext) {
	localctx = NewMacroContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, RFC4512ParserRULE_macro)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(698)
		p.Descriptor()
	}
	{
		p.SetState(699)
		p.MacroSuffix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumericOIDContext is an interface to support dynamic dispatch.
type INumericOIDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumOID() antlr.TerminalNode

	// IsNumericOIDContext differentiates from other interfaces.
	IsNumericOIDContext()
}

type NumericOIDContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericOIDContext() *NumericOIDContext {
	var p = new(NumericOIDContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOID
	return p
}

func InitEmptyNumericOIDContext(p *NumericOIDContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_numericOID
}

func (*NumericOIDContext) IsNumericOIDContext() {}

func NewNumericOIDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericOIDContext {
	var p = new(NumericOIDContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_numericOID

	return p
}

func (s *NumericOIDContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericOIDContext) NumOID() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNumOID, 0)
}

func (s *NumericOIDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericOIDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericOIDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNumericOID(s)
	}
}

func (s *NumericOIDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNumericOID(s)
	}
}

func (p *RFC4512Parser) NumericOID() (localctx INumericOIDContext) {
	localctx = NewNumericOIDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, RFC4512ParserRULE_numericOID)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(701)
		p.Match(RFC4512ParserNumOID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMacroSuffixContext is an interface to support dynamic dispatch.
type IMacroSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MacroSuffix() antlr.TerminalNode

	// IsMacroSuffixContext differentiates from other interfaces.
	IsMacroSuffixContext()
}

type MacroSuffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMacroSuffixContext() *MacroSuffixContext {
	var p = new(MacroSuffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macroSuffix
	return p
}

func InitEmptyMacroSuffixContext(p *MacroSuffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_macroSuffix
}

func (*MacroSuffixContext) IsMacroSuffixContext() {}

func NewMacroSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MacroSuffixContext {
	var p = new(MacroSuffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_macroSuffix

	return p
}

func (s *MacroSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *MacroSuffixContext) MacroSuffix() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMacroSuffix, 0)
}

func (s *MacroSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MacroSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MacroSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMacroSuffix(s)
	}
}

func (s *MacroSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMacroSuffix(s)
	}
}

func (p *RFC4512Parser) MacroSuffix() (localctx IMacroSuffixContext) {
	localctx = NewMacroSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, RFC4512ParserRULE_macroSuffix)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		p.Match(RFC4512ParserMacroSuffix)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Digit() antlr.TerminalNode

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_number
	return p
}

func InitEmptyNumberContext(p *NumberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_number
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) Digit() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDigit, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNumber(s)
	}
}

func (p *RFC4512Parser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, RFC4512ParserRULE_number)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(705)
		p.Match(RFC4512ParserDigit)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttrOptionsContext is an interface to support dynamic dispatch.
type IAttrOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDescriptor() []IDescriptorContext
	Descriptor(i int) IDescriptorContext

	// IsAttrOptionsContext differentiates from other interfaces.
	IsAttrOptionsContext()
}

type AttrOptionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttrOptionsContext() *AttrOptionsContext {
	var p = new(AttrOptionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attrOptions
	return p
}

func InitEmptyAttrOptionsContext(p *AttrOptionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attrOptions
}

func (*AttrOptionsContext) IsAttrOptionsContext() {}

func NewAttrOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttrOptionsContext {
	var p = new(AttrOptionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attrOptions

	return p
}

func (s *AttrOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AttrOptionsContext) AllDescriptor() []IDescriptorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptorContext); ok {
			len++
		}
	}

	tst := make([]IDescriptorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptorContext); ok {
			tst[i] = t.(IDescriptorContext)
			i++
		}
	}

	return tst
}

func (s *AttrOptionsContext) Descriptor(i int) IDescriptorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptorContext)
}

func (s *AttrOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttrOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttrOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttrOptions(s)
	}
}

func (s *AttrOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttrOptions(s)
	}
}

func (p *RFC4512Parser) AttrOptions() (localctx IAttrOptionsContext) {
	localctx = NewAttrOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, RFC4512ParserRULE_attrOptions)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(709)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == RFC4512ParserT__27 {
		{
			p.SetState(707)
			p.Match(RFC4512ParserT__27)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(708)
			p.Descriptor()
		}

		p.SetState(711)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUserApplicationContext is an interface to support dynamic dispatch.
type IUserApplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsUserApplicationContext differentiates from other interfaces.
	IsUserApplicationContext()
}

type UserApplicationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserApplicationContext() *UserApplicationContext {
	var p = new(UserApplicationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_userApplication
	return p
}

func InitEmptyUserApplicationContext(p *UserApplicationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_userApplication
}

func (*UserApplicationContext) IsUserApplicationContext() {}

func NewUserApplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserApplicationContext {
	var p = new(UserApplicationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_userApplication

	return p
}

func (s *UserApplicationContext) GetParser() antlr.Parser { return s.parser }
func (s *UserApplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserApplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserApplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterUserApplication(s)
	}
}

func (s *UserApplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitUserApplication(s)
	}
}

func (p *RFC4512Parser) UserApplication() (localctx IUserApplicationContext) {
	localctx = NewUserApplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, RFC4512ParserRULE_userApplication)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(713)
		p.Match(RFC4512ParserT__28)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDirectoryOperationContext is an interface to support dynamic dispatch.
type IDirectoryOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDirectoryOperationContext differentiates from other interfaces.
	IsDirectoryOperationContext()
}

type DirectoryOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectoryOperationContext() *DirectoryOperationContext {
	var p = new(DirectoryOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_directoryOperation
	return p
}

func InitEmptyDirectoryOperationContext(p *DirectoryOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_directoryOperation
}

func (*DirectoryOperationContext) IsDirectoryOperationContext() {}

func NewDirectoryOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectoryOperationContext {
	var p = new(DirectoryOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_directoryOperation

	return p
}

func (s *DirectoryOperationContext) GetParser() antlr.Parser { return s.parser }
func (s *DirectoryOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectoryOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectoryOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDirectoryOperation(s)
	}
}

func (s *DirectoryOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDirectoryOperation(s)
	}
}

func (p *RFC4512Parser) DirectoryOperation() (localctx IDirectoryOperationContext) {
	localctx = NewDirectoryOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, RFC4512ParserRULE_directoryOperation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.Match(RFC4512ParserT__29)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDistributedOperationContext is an interface to support dynamic dispatch.
type IDistributedOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDistributedOperationContext differentiates from other interfaces.
	IsDistributedOperationContext()
}

type DistributedOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDistributedOperationContext() *DistributedOperationContext {
	var p = new(DistributedOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_distributedOperation
	return p
}

func InitEmptyDistributedOperationContext(p *DistributedOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_distributedOperation
}

func (*DistributedOperationContext) IsDistributedOperationContext() {}

func NewDistributedOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistributedOperationContext {
	var p = new(DistributedOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_distributedOperation

	return p
}

func (s *DistributedOperationContext) GetParser() antlr.Parser { return s.parser }
func (s *DistributedOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistributedOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistributedOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDistributedOperation(s)
	}
}

func (s *DistributedOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDistributedOperation(s)
	}
}

func (p *RFC4512Parser) DistributedOperation() (localctx IDistributedOperationContext) {
	localctx = NewDistributedOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, RFC4512ParserRULE_distributedOperation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(717)
		p.Match(RFC4512ParserT__30)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDSAOperationContext is an interface to support dynamic dispatch.
type IDSAOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDSAOperationContext differentiates from other interfaces.
	IsDSAOperationContext()
}

type DSAOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDSAOperationContext() *DSAOperationContext {
	var p = new(DSAOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSAOperation
	return p
}

func InitEmptyDSAOperationContext(p *DSAOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dSAOperation
}

func (*DSAOperationContext) IsDSAOperationContext() {}

func NewDSAOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DSAOperationContext {
	var p = new(DSAOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dSAOperation

	return p
}

func (s *DSAOperationContext) GetParser() antlr.Parser { return s.parser }
func (s *DSAOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DSAOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DSAOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDSAOperation(s)
	}
}

func (s *DSAOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDSAOperation(s)
	}
}

func (p *RFC4512Parser) DSAOperation() (localctx IDSAOperationContext) {
	localctx = NewDSAOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, RFC4512ParserRULE_dSAOperation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(719)
		p.Match(RFC4512ParserT__31)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructureRulesContext is an interface to support dynamic dispatch.
type IStructureRulesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	AllStructureRule() []IStructureRuleContext
	StructureRule(i int) IStructureRuleContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode

	// IsStructureRulesContext differentiates from other interfaces.
	IsStructureRulesContext()
}

type StructureRulesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructureRulesContext() *StructureRulesContext {
	var p = new(StructureRulesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRules
	return p
}

func InitEmptyStructureRulesContext(p *StructureRulesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_structureRules
}

func (*StructureRulesContext) IsStructureRulesContext() {}

func NewStructureRulesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructureRulesContext {
	var p = new(StructureRulesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_structureRules

	return p
}

func (s *StructureRulesContext) GetParser() antlr.Parser { return s.parser }

func (s *StructureRulesContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *StructureRulesContext) AllStructureRule() []IStructureRuleContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStructureRuleContext); ok {
			len++
		}
	}

	tst := make([]IStructureRuleContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStructureRuleContext); ok {
			tst[i] = t.(IStructureRuleContext)
			i++
		}
	}

	return tst
}

func (s *StructureRulesContext) StructureRule(i int) IStructureRuleContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRuleContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRuleContext)
}

func (s *StructureRulesContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *StructureRulesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *StructureRulesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *StructureRulesContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *StructureRulesContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *StructureRulesContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *StructureRulesContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *StructureRulesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructureRulesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructureRulesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterStructureRules(s)
	}
}

func (s *StructureRulesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitStructureRules(s)
	}
}

func (p *RFC4512Parser) StructureRules() (localctx IStructureRulesContext) {
	localctx = NewStructureRulesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, RFC4512ParserRULE_structureRules)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(721)
		p.OpenParen()
	}
	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(722)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(727)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(729)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(728)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(732)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(731)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(737)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(734)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(739)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(741)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(740)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(743)
		p.StructureRule()
	}
	p.SetState(747)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 91, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(744)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 91, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(751)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(750)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(754)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(753)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(757)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == RFC4512ParserSP {
				{
					p.SetState(756)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(759)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(761)
				p.StructureRule()
			}

		}
		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(767)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(772)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(774)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(773)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(777)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(776)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(782)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(779)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(784)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(785)
		p.CloseParen()
	}
	p.SetState(789)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(786)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(791)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(793)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(792)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOIDContext is an interface to support dynamic dispatch.
type IOIDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Descriptor() IDescriptorContext
	NumericOID() INumericOIDContext

	// IsOIDContext differentiates from other interfaces.
	IsOIDContext()
}

type OIDContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOIDContext() *OIDContext {
	var p = new(OIDContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oID
	return p
}

func InitEmptyOIDContext(p *OIDContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oID
}

func (*OIDContext) IsOIDContext() {}

func NewOIDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OIDContext {
	var p = new(OIDContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_oID

	return p
}

func (s *OIDContext) GetParser() antlr.Parser { return s.parser }

func (s *OIDContext) Descriptor() IDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptorContext)
}

func (s *OIDContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *OIDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OIDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OIDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOID(s)
	}
}

func (s *OIDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOID(s)
	}
}

func (p *RFC4512Parser) OID() (localctx IOIDContext) {
	localctx = NewOIDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, RFC4512ParserRULE_oID)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(797)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserNFLabel, RFC4512ParserOCLabel, RFC4512ParserATLabel, RFC4512ParserLSLabel, RFC4512ParserMRLabel, RFC4512ParserMULabel, RFC4512ParserDSLabel, RFC4512ParserDCLabel, RFC4512ParserDescr:
		{
			p.SetState(795)
			p.Descriptor()
		}

	case RFC4512ParserNumOID:
		{
			p.SetState(796)
			p.NumericOID()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOIDsContext is an interface to support dynamic dispatch.
type IOIDsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	AllOID() []IOIDContext
	OID(i int) IOIDContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllODelim() []antlr.TerminalNode
	ODelim(i int) antlr.TerminalNode

	// IsOIDsContext differentiates from other interfaces.
	IsOIDsContext()
}

type OIDsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOIDsContext() *OIDsContext {
	var p = new(OIDsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oIDs
	return p
}

func InitEmptyOIDsContext(p *OIDsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_oIDs
}

func (*OIDsContext) IsOIDsContext() {}

func NewOIDsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OIDsContext {
	var p = new(OIDsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_oIDs

	return p
}

func (s *OIDsContext) GetParser() antlr.Parser { return s.parser }

func (s *OIDsContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *OIDsContext) AllOID() []IOIDContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOIDContext); ok {
			len++
		}
	}

	tst := make([]IOIDContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOIDContext); ok {
			tst[i] = t.(IOIDContext)
			i++
		}
	}

	return tst
}

func (s *OIDsContext) OID(i int) IOIDContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOIDContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOIDContext)
}

func (s *OIDsContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *OIDsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *OIDsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *OIDsContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *OIDsContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *OIDsContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *OIDsContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *OIDsContext) AllODelim() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserODelim)
}

func (s *OIDsContext) ODelim(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserODelim, i)
}

func (s *OIDsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OIDsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OIDsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterOIDs(s)
	}
}

func (s *OIDsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitOIDs(s)
	}
}

func (p *RFC4512Parser) OIDs() (localctx IOIDsContext) {
	localctx = NewOIDsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, RFC4512ParserRULE_oIDs)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(799)
		p.OpenParen()
	}
	p.SetState(803)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 103, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(800)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(805)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 103, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(807)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(806)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(810)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(809)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(815)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(812)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(817)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(818)
		p.OID()
	}
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 107, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(819)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(824)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 107, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(826)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 108, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(825)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(829)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(828)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(841)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserODelim {
		{
			p.SetState(831)
			p.Match(RFC4512ParserODelim)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(835)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(832)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(837)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(838)
			p.OID()
		}

		p.SetState(843)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(847)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(844)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(849)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(850)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(853)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(859)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(856)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(861)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(863)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(862)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(865)
		p.CloseParen()
	}
	p.SetState(869)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(866)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(871)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(873)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(872)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtensionValueContext is an interface to support dynamic dispatch.
type IExtensionValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QuotedString() IQuotedStringContext
	QuotedDescriptor() IQuotedDescriptorContext

	// IsExtensionValueContext differentiates from other interfaces.
	IsExtensionValueContext()
}

type ExtensionValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtensionValueContext() *ExtensionValueContext {
	var p = new(ExtensionValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extensionValue
	return p
}

func InitEmptyExtensionValueContext(p *ExtensionValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extensionValue
}

func (*ExtensionValueContext) IsExtensionValueContext() {}

func NewExtensionValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtensionValueContext {
	var p = new(ExtensionValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_extensionValue

	return p
}

func (s *ExtensionValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtensionValueContext) QuotedString() IQuotedStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuotedStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuotedStringContext)
}

func (s *ExtensionValueContext) QuotedDescriptor() IQuotedDescriptorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuotedDescriptorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuotedDescriptorContext)
}

func (s *ExtensionValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtensionValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtensionValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterExtensionValue(s)
	}
}

func (s *ExtensionValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitExtensionValue(s)
	}
}

func (p *RFC4512Parser) ExtensionValue() (localctx IExtensionValueContext) {
	localctx = NewExtensionValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, RFC4512ParserRULE_extensionValue)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserQString:
		{
			p.SetState(875)
			p.QuotedString()
		}

	case RFC4512ParserQDescr:
		{
			p.SetState(876)
			p.QuotedDescriptor()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtensionsContext is an interface to support dynamic dispatch.
type IExtensionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExtension() []IExtensionContext
	Extension(i int) IExtensionContext

	// IsExtensionsContext differentiates from other interfaces.
	IsExtensionsContext()
}

type ExtensionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtensionsContext() *ExtensionsContext {
	var p = new(ExtensionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extensions
	return p
}

func InitEmptyExtensionsContext(p *ExtensionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extensions
}

func (*ExtensionsContext) IsExtensionsContext() {}

func NewExtensionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtensionsContext {
	var p = new(ExtensionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_extensions

	return p
}

func (s *ExtensionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtensionsContext) AllExtension() []IExtensionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExtensionContext); ok {
			len++
		}
	}

	tst := make([]IExtensionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExtensionContext); ok {
			tst[i] = t.(IExtensionContext)
			i++
		}
	}

	return tst
}

func (s *ExtensionsContext) Extension(i int) IExtensionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionContext)
}

func (s *ExtensionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtensionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtensionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterExtensions(s)
	}
}

func (s *ExtensionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitExtensions(s)
	}
}

func (p *RFC4512Parser) Extensions() (localctx IExtensionsContext) {
	localctx = NewExtensionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, RFC4512ParserRULE_extensions)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(880)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(879)
				p.Extension()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(882)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtensionContext is an interface to support dynamic dispatch.
type IExtensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	XString() antlr.TerminalNode
	AllExtensionValue() []IExtensionValueContext
	ExtensionValue(i int) IExtensionValueContext
	OpenParen() IOpenParenContext
	CloseParen() ICloseParenContext
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode

	// IsExtensionContext differentiates from other interfaces.
	IsExtensionContext()
}

type ExtensionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtensionContext() *ExtensionContext {
	var p = new(ExtensionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extension
	return p
}

func InitEmptyExtensionContext(p *ExtensionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_extension
}

func (*ExtensionContext) IsExtensionContext() {}

func NewExtensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtensionContext {
	var p = new(ExtensionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_extension

	return p
}

func (s *ExtensionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtensionContext) XString() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserXString, 0)
}

func (s *ExtensionContext) AllExtensionValue() []IExtensionValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExtensionValueContext); ok {
			len++
		}
	}

	tst := make([]IExtensionValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExtensionValueContext); ok {
			tst[i] = t.(IExtensionValueContext)
			i++
		}
	}

	return tst
}

func (s *ExtensionContext) ExtensionValue(i int) IExtensionValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionValueContext)
}

func (s *ExtensionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *ExtensionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *ExtensionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *ExtensionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *ExtensionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ExtensionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ExtensionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *ExtensionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *ExtensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterExtension(s)
	}
}

func (s *ExtensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitExtension(s)
	}
}

func (p *RFC4512Parser) Extension() (localctx IExtensionContext) {
	localctx = NewExtensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, RFC4512ParserRULE_extension)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(885)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(884)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(887)
		p.Match(RFC4512ParserXString)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(963)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserQDescr, RFC4512ParserQString:
		{
			p.SetState(888)
			p.ExtensionValue()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(889)
			p.OpenParen()
		}
		p.SetState(893)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(890)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(895)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(897)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(896)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(900)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(899)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(905)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(902)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(907)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(909)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(908)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(911)
			p.ExtensionValue()
		}
		p.SetState(915)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(912)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(917)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(919)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(918)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(922)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(921)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(932)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 131, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(925)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == RFC4512ParserSP {
					{
						p.SetState(924)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

					p.SetState(927)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(929)
					p.ExtensionValue()
				}

			}
			p.SetState(934)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 131, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(938)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 132, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(935)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(940)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 132, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(942)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(941)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(945)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(944)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(950)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(947)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(952)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(953)
			p.CloseParen()
		}
		p.SetState(957)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(954)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(959)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(961)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(960)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamesContext is an interface to support dynamic dispatch.
type INamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllQuotedDescriptor() []IQuotedDescriptorContext
	QuotedDescriptor(i int) IQuotedDescriptorContext
	OpenParen() IOpenParenContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode

	// IsNamesContext differentiates from other interfaces.
	IsNamesContext()
}

type NamesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamesContext() *NamesContext {
	var p = new(NamesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_names
	return p
}

func InitEmptyNamesContext(p *NamesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_names
}

func (*NamesContext) IsNamesContext() {}

func NewNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamesContext {
	var p = new(NamesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_names

	return p
}

func (s *NamesContext) GetParser() antlr.Parser { return s.parser }

func (s *NamesContext) AllQuotedDescriptor() []IQuotedDescriptorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IQuotedDescriptorContext); ok {
			len++
		}
	}

	tst := make([]IQuotedDescriptorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IQuotedDescriptorContext); ok {
			tst[i] = t.(IQuotedDescriptorContext)
			i++
		}
	}

	return tst
}

func (s *NamesContext) QuotedDescriptor(i int) IQuotedDescriptorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuotedDescriptorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuotedDescriptorContext)
}

func (s *NamesContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *NamesContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *NamesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *NamesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *NamesContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *NamesContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *NamesContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *NamesContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *NamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNames(s)
	}
}

func (s *NamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNames(s)
	}
}

func (p *RFC4512Parser) Names() (localctx INamesContext) {
	localctx = NewNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, RFC4512ParserRULE_names)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1040)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case RFC4512ParserQDescr:
		{
			p.SetState(965)
			p.QuotedDescriptor()
		}

	case RFC4512ParserOpenParenthesis:
		{
			p.SetState(966)
			p.OpenParen()
		}
		p.SetState(970)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(967)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(972)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(974)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(973)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(977)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(976)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(982)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(979)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(984)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(986)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(985)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(988)
			p.QuotedDescriptor()
		}
		p.SetState(992)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(989)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(994)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(996)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(995)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(999)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(998)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1009)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 148, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(1002)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == RFC4512ParserSP {
					{
						p.SetState(1001)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

					p.SetState(1004)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1006)
					p.QuotedDescriptor()
				}

			}
			p.SetState(1011)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 148, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1015)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1012)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1017)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1019)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1018)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1022)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserNEWLINE {
			{
				p.SetState(1021)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1027)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(1024)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1029)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1030)
			p.CloseParen()
		}
		p.SetState(1034)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 153, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1031)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1036)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 153, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1038)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 154, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1037)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptorContext is an interface to support dynamic dispatch.
type IDescriptorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Descr() antlr.TerminalNode
	NFLabel() antlr.TerminalNode
	LSLabel() antlr.TerminalNode
	MRLabel() antlr.TerminalNode
	MULabel() antlr.TerminalNode
	ATLabel() antlr.TerminalNode
	OCLabel() antlr.TerminalNode
	DCLabel() antlr.TerminalNode
	DSLabel() antlr.TerminalNode

	// IsDescriptorContext differentiates from other interfaces.
	IsDescriptorContext()
}

type DescriptorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptorContext() *DescriptorContext {
	var p = new(DescriptorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_descriptor
	return p
}

func InitEmptyDescriptorContext(p *DescriptorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_descriptor
}

func (*DescriptorContext) IsDescriptorContext() {}

func NewDescriptorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescriptorContext {
	var p = new(DescriptorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_descriptor

	return p
}

func (s *DescriptorContext) GetParser() antlr.Parser { return s.parser }

func (s *DescriptorContext) Descr() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDescr, 0)
}

func (s *DescriptorContext) NFLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNFLabel, 0)
}

func (s *DescriptorContext) LSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLSLabel, 0)
}

func (s *DescriptorContext) MRLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMRLabel, 0)
}

func (s *DescriptorContext) MULabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserMULabel, 0)
}

func (s *DescriptorContext) ATLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserATLabel, 0)
}

func (s *DescriptorContext) OCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserOCLabel, 0)
}

func (s *DescriptorContext) DCLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDCLabel, 0)
}

func (s *DescriptorContext) DSLabel() antlr.TerminalNode {
	return s.GetToken(RFC4512ParserDSLabel, 0)
}

func (s *DescriptorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescriptorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescriptorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDescriptor(s)
	}
}

func (s *DescriptorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDescriptor(s)
	}
}

func (p *RFC4512Parser) Descriptor() (localctx IDescriptorContext) {
	localctx = NewDescriptorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, RFC4512ParserRULE_descriptor)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8989607068696576) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectClassDescriptionContext is an interface to support dynamic dispatch.
type IObjectClassDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	Extensions() IExtensionsContext
	AllName() []INameContext
	Name(i int) INameContext
	AllDescription() []IDescriptionContext
	Description(i int) IDescriptionContext
	AllObsolescence() []IObsolescenceContext
	Obsolescence(i int) IObsolescenceContext
	AllSuperClasses() []ISuperClassesContext
	SuperClasses(i int) ISuperClassesContext
	AllKind() []IKindContext
	Kind(i int) IKindContext
	AllMust() []IMustContext
	Must(i int) IMustContext
	AllMay() []IMayContext
	May(i int) IMayContext

	// IsObjectClassDescriptionContext differentiates from other interfaces.
	IsObjectClassDescriptionContext()
}

type ObjectClassDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectClassDescriptionContext() *ObjectClassDescriptionContext {
	var p = new(ObjectClassDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescription
	return p
}

func InitEmptyObjectClassDescriptionContext(p *ObjectClassDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_objectClassDescription
}

func (*ObjectClassDescriptionContext) IsObjectClassDescriptionContext() {}

func NewObjectClassDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectClassDescriptionContext {
	var p = new(ObjectClassDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_objectClassDescription

	return p
}

func (s *ObjectClassDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectClassDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *ObjectClassDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *ObjectClassDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *ObjectClassDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *ObjectClassDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *ObjectClassDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *ObjectClassDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *ObjectClassDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *ObjectClassDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *ObjectClassDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *ObjectClassDescriptionContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ObjectClassDescriptionContext) AllDescription() []IDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptionContext); ok {
			tst[i] = t.(IDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionContext) Description(i int) IDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *ObjectClassDescriptionContext) AllObsolescence() []IObsolescenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObsolescenceContext); ok {
			len++
		}
	}

	tst := make([]IObsolescenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObsolescenceContext); ok {
			tst[i] = t.(IObsolescenceContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionContext) Obsolescence(i int) IObsolescenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObsolescenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObsolescenceContext)
}

func (s *ObjectClassDescriptionContext) AllSuperClasses() []ISuperClassesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISuperClassesContext); ok {
			len++
		}
	}

	tst := make([]ISuperClassesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISuperClassesContext); ok {
			tst[i] = t.(ISuperClassesContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionContext) SuperClasses(i int) ISuperClassesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuperClassesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuperClassesContext)
}

func (s *ObjectClassDescriptionContext) AllKind() []IKindContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKindContext); ok {
			len++
		}
	}

	tst := make([]IKindContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKindContext); ok {
			tst[i] = t.(IKindContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionContext) Kind(i int) IKindContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKindContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKindContext)
}

func (s *ObjectClassDescriptionContext) AllMust() []IMustContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMustContext); ok {
			len++
		}
	}

	tst := make([]IMustContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMustContext); ok {
			tst[i] = t.(IMustContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionContext) Must(i int) IMustContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMustContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMustContext)
}

func (s *ObjectClassDescriptionContext) AllMay() []IMayContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMayContext); ok {
			len++
		}
	}

	tst := make([]IMayContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMayContext); ok {
			tst[i] = t.(IMayContext)
			i++
		}
	}

	return tst
}

func (s *ObjectClassDescriptionContext) May(i int) IMayContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMayContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMayContext)
}

func (s *ObjectClassDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectClassDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectClassDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterObjectClassDescription(s)
	}
}

func (s *ObjectClassDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitObjectClassDescription(s)
	}
}

func (p *RFC4512Parser) ObjectClassDescription() (localctx IObjectClassDescriptionContext) {
	localctx = NewObjectClassDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, RFC4512ParserRULE_objectClassDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1044)
		p.OpenParen()
	}
	p.SetState(1048)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 156, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1045)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1050)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 156, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1052)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1051)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1055)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1054)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1060)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1057)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1062)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1063)
		p.NumericOIDOrMacro()
	}
	p.SetState(1067)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 160, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1064)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1069)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 160, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1071)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1070)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1074)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1073)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1099)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&9007199254741104) != 0 {
		p.SetState(1083)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 163, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1076)
				p.Name()
			}

		case 2:
			{
				p.SetState(1077)
				p.Description()
			}

		case 3:
			{
				p.SetState(1078)
				p.Obsolescence()
			}

		case 4:
			{
				p.SetState(1079)
				p.SuperClasses()
			}

		case 5:
			{
				p.SetState(1080)
				p.Kind()
			}

		case 6:
			{
				p.SetState(1081)
				p.Must()
			}

		case 7:
			{
				p.SetState(1082)
				p.May()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1085)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1090)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1092)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1091)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1095)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 166, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1094)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

		p.SetState(1101)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1103)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserXString || _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1102)
			p.Extensions()
		}

	}
	{
		p.SetState(1105)
		p.CloseParen()
	}
	p.SetState(1107)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1106)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeTypeDescriptionContext is an interface to support dynamic dispatch.
type IAttributeTypeDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	Extensions() IExtensionsContext
	AllName() []INameContext
	Name(i int) INameContext
	AllDescription() []IDescriptionContext
	Description(i int) IDescriptionContext
	AllObsolescence() []IObsolescenceContext
	Obsolescence(i int) IObsolescenceContext
	AllSuperType() []ISuperTypeContext
	SuperType(i int) ISuperTypeContext
	AllEquality() []IEqualityContext
	Equality(i int) IEqualityContext
	AllOrdering() []IOrderingContext
	Ordering(i int) IOrderingContext
	AllSubstr() []ISubstrContext
	Substr(i int) ISubstrContext
	AllSyntax() []ISyntaxContext
	Syntax(i int) ISyntaxContext
	AllImmutability() []IImmutabilityContext
	Immutability(i int) IImmutabilityContext
	AllUsage() []IUsageContext
	Usage(i int) IUsageContext
	AllSingleValue() []ISingleValueContext
	SingleValue(i int) ISingleValueContext
	AllCollective() []ICollectiveContext
	Collective(i int) ICollectiveContext
	AllMinUpperBounds() []IMinUpperBoundsContext
	MinUpperBounds(i int) IMinUpperBoundsContext

	// IsAttributeTypeDescriptionContext differentiates from other interfaces.
	IsAttributeTypeDescriptionContext()
}

type AttributeTypeDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeTypeDescriptionContext() *AttributeTypeDescriptionContext {
	var p = new(AttributeTypeDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescription
	return p
}

func InitEmptyAttributeTypeDescriptionContext(p *AttributeTypeDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescription
}

func (*AttributeTypeDescriptionContext) IsAttributeTypeDescriptionContext() {}

func NewAttributeTypeDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeTypeDescriptionContext {
	var p = new(AttributeTypeDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_attributeTypeDescription

	return p
}

func (s *AttributeTypeDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeTypeDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *AttributeTypeDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *AttributeTypeDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *AttributeTypeDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *AttributeTypeDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *AttributeTypeDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *AttributeTypeDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *AttributeTypeDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *AttributeTypeDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *AttributeTypeDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *AttributeTypeDescriptionContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *AttributeTypeDescriptionContext) AllDescription() []IDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptionContext); ok {
			tst[i] = t.(IDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Description(i int) IDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *AttributeTypeDescriptionContext) AllObsolescence() []IObsolescenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObsolescenceContext); ok {
			len++
		}
	}

	tst := make([]IObsolescenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObsolescenceContext); ok {
			tst[i] = t.(IObsolescenceContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Obsolescence(i int) IObsolescenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObsolescenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObsolescenceContext)
}

func (s *AttributeTypeDescriptionContext) AllSuperType() []ISuperTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISuperTypeContext); ok {
			len++
		}
	}

	tst := make([]ISuperTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISuperTypeContext); ok {
			tst[i] = t.(ISuperTypeContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) SuperType(i int) ISuperTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuperTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuperTypeContext)
}

func (s *AttributeTypeDescriptionContext) AllEquality() []IEqualityContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEqualityContext); ok {
			len++
		}
	}

	tst := make([]IEqualityContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEqualityContext); ok {
			tst[i] = t.(IEqualityContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Equality(i int) IEqualityContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEqualityContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEqualityContext)
}

func (s *AttributeTypeDescriptionContext) AllOrdering() []IOrderingContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrderingContext); ok {
			len++
		}
	}

	tst := make([]IOrderingContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrderingContext); ok {
			tst[i] = t.(IOrderingContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Ordering(i int) IOrderingContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderingContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderingContext)
}

func (s *AttributeTypeDescriptionContext) AllSubstr() []ISubstrContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISubstrContext); ok {
			len++
		}
	}

	tst := make([]ISubstrContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISubstrContext); ok {
			tst[i] = t.(ISubstrContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Substr(i int) ISubstrContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubstrContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubstrContext)
}

func (s *AttributeTypeDescriptionContext) AllSyntax() []ISyntaxContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISyntaxContext); ok {
			len++
		}
	}

	tst := make([]ISyntaxContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISyntaxContext); ok {
			tst[i] = t.(ISyntaxContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Syntax(i int) ISyntaxContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISyntaxContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISyntaxContext)
}

func (s *AttributeTypeDescriptionContext) AllImmutability() []IImmutabilityContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImmutabilityContext); ok {
			len++
		}
	}

	tst := make([]IImmutabilityContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImmutabilityContext); ok {
			tst[i] = t.(IImmutabilityContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Immutability(i int) IImmutabilityContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImmutabilityContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImmutabilityContext)
}

func (s *AttributeTypeDescriptionContext) AllUsage() []IUsageContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUsageContext); ok {
			len++
		}
	}

	tst := make([]IUsageContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUsageContext); ok {
			tst[i] = t.(IUsageContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Usage(i int) IUsageContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsageContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsageContext)
}

func (s *AttributeTypeDescriptionContext) AllSingleValue() []ISingleValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISingleValueContext); ok {
			len++
		}
	}

	tst := make([]ISingleValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISingleValueContext); ok {
			tst[i] = t.(ISingleValueContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) SingleValue(i int) ISingleValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISingleValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISingleValueContext)
}

func (s *AttributeTypeDescriptionContext) AllCollective() []ICollectiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICollectiveContext); ok {
			len++
		}
	}

	tst := make([]ICollectiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICollectiveContext); ok {
			tst[i] = t.(ICollectiveContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) Collective(i int) ICollectiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollectiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollectiveContext)
}

func (s *AttributeTypeDescriptionContext) AllMinUpperBounds() []IMinUpperBoundsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMinUpperBoundsContext); ok {
			len++
		}
	}

	tst := make([]IMinUpperBoundsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMinUpperBoundsContext); ok {
			tst[i] = t.(IMinUpperBoundsContext)
			i++
		}
	}

	return tst
}

func (s *AttributeTypeDescriptionContext) MinUpperBounds(i int) IMinUpperBoundsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMinUpperBoundsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMinUpperBoundsContext)
}

func (s *AttributeTypeDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeTypeDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeTypeDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterAttributeTypeDescription(s)
	}
}

func (s *AttributeTypeDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitAttributeTypeDescription(s)
	}
}

func (p *RFC4512Parser) AttributeTypeDescription() (localctx IAttributeTypeDescriptionContext) {
	localctx = NewAttributeTypeDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, RFC4512ParserRULE_attributeTypeDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1109)
		p.OpenParen()
	}
	p.SetState(1113)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1110)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1117)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1116)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1120)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1119)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1125)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1122)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1127)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1128)
		p.NumericOIDOrMacro()
	}
	p.SetState(1132)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 174, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1129)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1134)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 174, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1136)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1135)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1138)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1174)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		p.SetState(1158)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 179, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1141)
				p.Name()
			}

		case 2:
			{
				p.SetState(1142)
				p.Description()
			}

		case 3:
			{
				p.SetState(1143)
				p.Obsolescence()
			}

		case 4:
			{
				p.SetState(1144)
				p.SuperType()
			}

		case 5:
			{
				p.SetState(1145)
				p.Equality()
			}

		case 6:
			{
				p.SetState(1146)
				p.Ordering()
			}

		case 7:
			{
				p.SetState(1147)
				p.Substr()
			}

		case 8:
			{
				p.SetState(1148)
				p.Syntax()
			}
			p.SetState(1150)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserMUB {
				{
					p.SetState(1149)
					p.MinUpperBounds()
				}

			}

		case 9:
			p.SetState(1154)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1152)
					p.SingleValue()
				}

			case 2:
				{
					p.SetState(1153)
					p.Collective()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		case 10:
			{
				p.SetState(1156)
				p.Immutability()
			}

		case 11:
			{
				p.SetState(1157)
				p.Usage()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(1163)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 180, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1160)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1165)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 180, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1167)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1166)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1170)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1169)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

		p.SetState(1176)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1178)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserXString || _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1177)
			p.Extensions()
		}

	}
	{
		p.SetState(1180)
		p.CloseParen()
	}
	p.SetState(1182)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1181)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleDescriptionContext is an interface to support dynamic dispatch.
type IMatchingRuleDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOID() INumericOIDContext
	Syntax() ISyntaxContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	Extensions() IExtensionsContext
	AllName() []INameContext
	Name(i int) INameContext
	AllDescription() []IDescriptionContext
	Description(i int) IDescriptionContext
	AllObsolescence() []IObsolescenceContext
	Obsolescence(i int) IObsolescenceContext

	// IsMatchingRuleDescriptionContext differentiates from other interfaces.
	IsMatchingRuleDescriptionContext()
}

type MatchingRuleDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleDescriptionContext() *MatchingRuleDescriptionContext {
	var p = new(MatchingRuleDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescription
	return p
}

func InitEmptyMatchingRuleDescriptionContext(p *MatchingRuleDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescription
}

func (*MatchingRuleDescriptionContext) IsMatchingRuleDescriptionContext() {}

func NewMatchingRuleDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleDescriptionContext {
	var p = new(MatchingRuleDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleDescription

	return p
}

func (s *MatchingRuleDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *MatchingRuleDescriptionContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *MatchingRuleDescriptionContext) Syntax() ISyntaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISyntaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISyntaxContext)
}

func (s *MatchingRuleDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *MatchingRuleDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *MatchingRuleDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *MatchingRuleDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *MatchingRuleDescriptionContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleDescriptionContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *MatchingRuleDescriptionContext) AllDescription() []IDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptionContext); ok {
			tst[i] = t.(IDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleDescriptionContext) Description(i int) IDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *MatchingRuleDescriptionContext) AllObsolescence() []IObsolescenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObsolescenceContext); ok {
			len++
		}
	}

	tst := make([]IObsolescenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObsolescenceContext); ok {
			tst[i] = t.(IObsolescenceContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleDescriptionContext) Obsolescence(i int) IObsolescenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObsolescenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObsolescenceContext)
}

func (s *MatchingRuleDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleDescription(s)
	}
}

func (s *MatchingRuleDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleDescription(s)
	}
}

func (p *RFC4512Parser) MatchingRuleDescription() (localctx IMatchingRuleDescriptionContext) {
	localctx = NewMatchingRuleDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, RFC4512ParserRULE_matchingRuleDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1184)
		p.OpenParen()
	}
	p.SetState(1188)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 186, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1185)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1190)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 186, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1192)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1191)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1194)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1200)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1197)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1202)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1203)
		p.NumericOID()
	}
	p.SetState(1207)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1204)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1209)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1211)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1210)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1214)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1213)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1235)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1219)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 193, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1216)
					p.Name()
				}

			case 2:
				{
					p.SetState(1217)
					p.Description()
				}

			case 3:
				{
					p.SetState(1218)
					p.Obsolescence()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			p.SetState(1224)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 194, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1221)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1226)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 194, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(1228)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserLineComment {
				{
					p.SetState(1227)
					p.Match(RFC4512ParserLineComment)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1231)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserNEWLINE {
				{
					p.SetState(1230)
					p.Match(RFC4512ParserNEWLINE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		p.SetState(1237)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1238)
		p.Syntax()
	}
	p.SetState(1242)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1239)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1244)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1246)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1245)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1249)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 200, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1248)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserXString || _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1251)
			p.Extensions()
		}

	}
	{
		p.SetState(1254)
		p.CloseParen()
	}
	p.SetState(1256)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1255)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchingRuleUseDescriptionContext is an interface to support dynamic dispatch.
type IMatchingRuleUseDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOID() INumericOIDContext
	Applies() IAppliesContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	Extensions() IExtensionsContext
	AllName() []INameContext
	Name(i int) INameContext
	AllDescription() []IDescriptionContext
	Description(i int) IDescriptionContext
	AllObsolescence() []IObsolescenceContext
	Obsolescence(i int) IObsolescenceContext

	// IsMatchingRuleUseDescriptionContext differentiates from other interfaces.
	IsMatchingRuleUseDescriptionContext()
}

type MatchingRuleUseDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchingRuleUseDescriptionContext() *MatchingRuleUseDescriptionContext {
	var p = new(MatchingRuleUseDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescription
	return p
}

func InitEmptyMatchingRuleUseDescriptionContext(p *MatchingRuleUseDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescription
}

func (*MatchingRuleUseDescriptionContext) IsMatchingRuleUseDescriptionContext() {}

func NewMatchingRuleUseDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchingRuleUseDescriptionContext {
	var p = new(MatchingRuleUseDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_matchingRuleUseDescription

	return p
}

func (s *MatchingRuleUseDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchingRuleUseDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *MatchingRuleUseDescriptionContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *MatchingRuleUseDescriptionContext) Applies() IAppliesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAppliesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAppliesContext)
}

func (s *MatchingRuleUseDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *MatchingRuleUseDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *MatchingRuleUseDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *MatchingRuleUseDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *MatchingRuleUseDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *MatchingRuleUseDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *MatchingRuleUseDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *MatchingRuleUseDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *MatchingRuleUseDescriptionContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleUseDescriptionContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *MatchingRuleUseDescriptionContext) AllDescription() []IDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptionContext); ok {
			tst[i] = t.(IDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleUseDescriptionContext) Description(i int) IDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *MatchingRuleUseDescriptionContext) AllObsolescence() []IObsolescenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObsolescenceContext); ok {
			len++
		}
	}

	tst := make([]IObsolescenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObsolescenceContext); ok {
			tst[i] = t.(IObsolescenceContext)
			i++
		}
	}

	return tst
}

func (s *MatchingRuleUseDescriptionContext) Obsolescence(i int) IObsolescenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObsolescenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObsolescenceContext)
}

func (s *MatchingRuleUseDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchingRuleUseDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchingRuleUseDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterMatchingRuleUseDescription(s)
	}
}

func (s *MatchingRuleUseDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitMatchingRuleUseDescription(s)
	}
}

func (p *RFC4512Parser) MatchingRuleUseDescription() (localctx IMatchingRuleUseDescriptionContext) {
	localctx = NewMatchingRuleUseDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, RFC4512ParserRULE_matchingRuleUseDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1258)
		p.OpenParen()
	}
	p.SetState(1262)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1259)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1264)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1265)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1268)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1274)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1271)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1276)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1277)
		p.NumericOID()
	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1278)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1283)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1284)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1288)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1287)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1309)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 214, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1293)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 210, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1290)
					p.Name()
				}

			case 2:
				{
					p.SetState(1291)
					p.Description()
				}

			case 3:
				{
					p.SetState(1292)
					p.Obsolescence()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			p.SetState(1298)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 211, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1295)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1300)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 211, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(1302)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserLineComment {
				{
					p.SetState(1301)
					p.Match(RFC4512ParserLineComment)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1305)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserNEWLINE {
				{
					p.SetState(1304)
					p.Match(RFC4512ParserNEWLINE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		p.SetState(1311)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 214, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1312)
		p.Applies()
	}
	p.SetState(1316)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1313)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1318)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1320)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1319)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1323)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 217, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1322)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1326)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserXString || _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1325)
			p.Extensions()
		}

	}
	{
		p.SetState(1328)
		p.CloseParen()
	}
	p.SetState(1330)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1329)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILDAPSyntaxDescriptionContext is an interface to support dynamic dispatch.
type ILDAPSyntaxDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOID() INumericOIDContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	Description() IDescriptionContext
	Extensions() IExtensionsContext

	// IsLDAPSyntaxDescriptionContext differentiates from other interfaces.
	IsLDAPSyntaxDescriptionContext()
}

type LDAPSyntaxDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLDAPSyntaxDescriptionContext() *LDAPSyntaxDescriptionContext {
	var p = new(LDAPSyntaxDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescription
	return p
}

func InitEmptyLDAPSyntaxDescriptionContext(p *LDAPSyntaxDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescription
}

func (*LDAPSyntaxDescriptionContext) IsLDAPSyntaxDescriptionContext() {}

func NewLDAPSyntaxDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LDAPSyntaxDescriptionContext {
	var p = new(LDAPSyntaxDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_lDAPSyntaxDescription

	return p
}

func (s *LDAPSyntaxDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *LDAPSyntaxDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *LDAPSyntaxDescriptionContext) NumericOID() INumericOIDContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDContext)
}

func (s *LDAPSyntaxDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *LDAPSyntaxDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *LDAPSyntaxDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *LDAPSyntaxDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *LDAPSyntaxDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *LDAPSyntaxDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *LDAPSyntaxDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *LDAPSyntaxDescriptionContext) Description() IDescriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *LDAPSyntaxDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *LDAPSyntaxDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LDAPSyntaxDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LDAPSyntaxDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterLDAPSyntaxDescription(s)
	}
}

func (s *LDAPSyntaxDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitLDAPSyntaxDescription(s)
	}
}

func (p *RFC4512Parser) LDAPSyntaxDescription() (localctx ILDAPSyntaxDescriptionContext) {
	localctx = NewLDAPSyntaxDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, RFC4512ParserRULE_lDAPSyntaxDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1332)
		p.OpenParen()
	}
	p.SetState(1336)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 220, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1333)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1338)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 220, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1340)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1339)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1343)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1342)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1348)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1345)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1350)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1351)
		p.NumericOID()
	}
	p.SetState(1355)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 224, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1352)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1357)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 224, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1359)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1358)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1362)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 226, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1361)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1365)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 227, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1364)
			p.Description()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1370)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1367)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1372)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1374)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1373)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1377)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1376)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1380)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1379)
			p.Extensions()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1383)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1382)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1385)
		p.CloseParen()
	}
	p.SetState(1387)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1386)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITContentRuleDescriptionContext is an interface to support dynamic dispatch.
type IDITContentRuleDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	Extensions() IExtensionsContext
	AllName() []INameContext
	Name(i int) INameContext
	AllDescription() []IDescriptionContext
	Description(i int) IDescriptionContext
	AllObsolescence() []IObsolescenceContext
	Obsolescence(i int) IObsolescenceContext
	AllAux() []IAuxContext
	Aux(i int) IAuxContext
	AllMust() []IMustContext
	Must(i int) IMustContext
	AllMay() []IMayContext
	May(i int) IMayContext
	AllNot() []INotContext
	Not(i int) INotContext

	// IsDITContentRuleDescriptionContext differentiates from other interfaces.
	IsDITContentRuleDescriptionContext()
}

type DITContentRuleDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITContentRuleDescriptionContext() *DITContentRuleDescriptionContext {
	var p = new(DITContentRuleDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescription
	return p
}

func InitEmptyDITContentRuleDescriptionContext(p *DITContentRuleDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescription
}

func (*DITContentRuleDescriptionContext) IsDITContentRuleDescriptionContext() {}

func NewDITContentRuleDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITContentRuleDescriptionContext {
	var p = new(DITContentRuleDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITContentRuleDescription

	return p
}

func (s *DITContentRuleDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DITContentRuleDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *DITContentRuleDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *DITContentRuleDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *DITContentRuleDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITContentRuleDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITContentRuleDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DITContentRuleDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DITContentRuleDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITContentRuleDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITContentRuleDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *DITContentRuleDescriptionContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *DITContentRuleDescriptionContext) AllDescription() []IDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptionContext); ok {
			tst[i] = t.(IDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionContext) Description(i int) IDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *DITContentRuleDescriptionContext) AllObsolescence() []IObsolescenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObsolescenceContext); ok {
			len++
		}
	}

	tst := make([]IObsolescenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObsolescenceContext); ok {
			tst[i] = t.(IObsolescenceContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionContext) Obsolescence(i int) IObsolescenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObsolescenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObsolescenceContext)
}

func (s *DITContentRuleDescriptionContext) AllAux() []IAuxContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAuxContext); ok {
			len++
		}
	}

	tst := make([]IAuxContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAuxContext); ok {
			tst[i] = t.(IAuxContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionContext) Aux(i int) IAuxContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAuxContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAuxContext)
}

func (s *DITContentRuleDescriptionContext) AllMust() []IMustContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMustContext); ok {
			len++
		}
	}

	tst := make([]IMustContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMustContext); ok {
			tst[i] = t.(IMustContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionContext) Must(i int) IMustContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMustContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMustContext)
}

func (s *DITContentRuleDescriptionContext) AllMay() []IMayContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMayContext); ok {
			len++
		}
	}

	tst := make([]IMayContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMayContext); ok {
			tst[i] = t.(IMayContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionContext) May(i int) IMayContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMayContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMayContext)
}

func (s *DITContentRuleDescriptionContext) AllNot() []INotContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INotContext); ok {
			len++
		}
	}

	tst := make([]INotContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INotContext); ok {
			tst[i] = t.(INotContext)
			i++
		}
	}

	return tst
}

func (s *DITContentRuleDescriptionContext) Not(i int) INotContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INotContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INotContext)
}

func (s *DITContentRuleDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITContentRuleDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITContentRuleDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITContentRuleDescription(s)
	}
}

func (s *DITContentRuleDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITContentRuleDescription(s)
	}
}

func (p *RFC4512Parser) DITContentRuleDescription() (localctx IDITContentRuleDescriptionContext) {
	localctx = NewDITContentRuleDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, RFC4512ParserRULE_dITContentRuleDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1389)
		p.OpenParen()
	}
	p.SetState(1393)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 234, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1390)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1395)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 234, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1397)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1396)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1400)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1399)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1405)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1402)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1407)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1408)
		p.NumericOIDOrMacro()
	}
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1409)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1414)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1416)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1415)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1419)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 240, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1418)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1444)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		p.SetState(1428)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 241, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1421)
				p.Name()
			}

		case 2:
			{
				p.SetState(1422)
				p.Description()
			}

		case 3:
			{
				p.SetState(1423)
				p.Obsolescence()
			}

		case 4:
			{
				p.SetState(1424)
				p.Aux()
			}

		case 5:
			{
				p.SetState(1425)
				p.Must()
			}

		case 6:
			{
				p.SetState(1426)
				p.May()
			}

		case 7:
			{
				p.SetState(1427)
				p.Not()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(1433)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 242, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1430)
					p.Match(RFC4512ParserSP)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1435)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 242, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1437)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1436)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1440)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 244, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1439)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

		p.SetState(1446)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1448)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserXString || _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1447)
			p.Extensions()
		}

	}
	{
		p.SetState(1450)
		p.CloseParen()
	}
	p.SetState(1452)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1451)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDITStructureRuleDescriptionContext is an interface to support dynamic dispatch.
type IDITStructureRuleDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	StructureRule() IStructureRuleContext
	CloseParen() ICloseParenContext
	Form() IFormContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	SuperRules() ISuperRulesContext
	Extensions() IExtensionsContext
	AllName() []INameContext
	Name(i int) INameContext
	AllDescription() []IDescriptionContext
	Description(i int) IDescriptionContext
	AllObsolescence() []IObsolescenceContext
	Obsolescence(i int) IObsolescenceContext

	// IsDITStructureRuleDescriptionContext differentiates from other interfaces.
	IsDITStructureRuleDescriptionContext()
}

type DITStructureRuleDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDITStructureRuleDescriptionContext() *DITStructureRuleDescriptionContext {
	var p = new(DITStructureRuleDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescription
	return p
}

func InitEmptyDITStructureRuleDescriptionContext(p *DITStructureRuleDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescription
}

func (*DITStructureRuleDescriptionContext) IsDITStructureRuleDescriptionContext() {}

func NewDITStructureRuleDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DITStructureRuleDescriptionContext {
	var p = new(DITStructureRuleDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_dITStructureRuleDescription

	return p
}

func (s *DITStructureRuleDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DITStructureRuleDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *DITStructureRuleDescriptionContext) StructureRule() IStructureRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureRuleContext)
}

func (s *DITStructureRuleDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *DITStructureRuleDescriptionContext) Form() IFormContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormContext)
}

func (s *DITStructureRuleDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *DITStructureRuleDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *DITStructureRuleDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *DITStructureRuleDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *DITStructureRuleDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *DITStructureRuleDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *DITStructureRuleDescriptionContext) SuperRules() ISuperRulesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuperRulesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuperRulesContext)
}

func (s *DITStructureRuleDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *DITStructureRuleDescriptionContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *DITStructureRuleDescriptionContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *DITStructureRuleDescriptionContext) AllDescription() []IDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptionContext); ok {
			tst[i] = t.(IDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *DITStructureRuleDescriptionContext) Description(i int) IDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *DITStructureRuleDescriptionContext) AllObsolescence() []IObsolescenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObsolescenceContext); ok {
			len++
		}
	}

	tst := make([]IObsolescenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObsolescenceContext); ok {
			tst[i] = t.(IObsolescenceContext)
			i++
		}
	}

	return tst
}

func (s *DITStructureRuleDescriptionContext) Obsolescence(i int) IObsolescenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObsolescenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObsolescenceContext)
}

func (s *DITStructureRuleDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DITStructureRuleDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DITStructureRuleDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterDITStructureRuleDescription(s)
	}
}

func (s *DITStructureRuleDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitDITStructureRuleDescription(s)
	}
}

func (p *RFC4512Parser) DITStructureRuleDescription() (localctx IDITStructureRuleDescriptionContext) {
	localctx = NewDITStructureRuleDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, RFC4512ParserRULE_dITStructureRuleDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1454)
		p.OpenParen()
	}
	p.SetState(1458)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 248, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1455)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1460)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 248, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1462)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1461)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1464)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1470)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1467)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1472)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1473)
		p.StructureRule()
	}
	p.SetState(1477)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 252, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1474)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1479)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 252, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1481)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1480)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1484)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1483)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1505)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 259, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1489)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 255, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1486)
					p.Name()
				}

			case 2:
				{
					p.SetState(1487)
					p.Description()
				}

			case 3:
				{
					p.SetState(1488)
					p.Obsolescence()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			p.SetState(1494)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 256, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1491)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1496)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 256, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(1498)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserLineComment {
				{
					p.SetState(1497)
					p.Match(RFC4512ParserLineComment)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1501)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserNEWLINE {
				{
					p.SetState(1500)
					p.Match(RFC4512ParserNEWLINE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		p.SetState(1507)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 259, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

	{
		p.SetState(1508)
		p.Form()
	}
	p.SetState(1512)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 260, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1509)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1514)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 260, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1516)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1515)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1519)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 262, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1518)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

	p.SetState(1534)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserSP {
		{
			p.SetState(1521)
			p.SuperRules()
		}
		p.SetState(1525)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(1522)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1527)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1529)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1528)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1532)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1531)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	}
	p.SetState(1537)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserXString || _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1536)
			p.Extensions()
		}

	}
	{
		p.SetState(1539)
		p.CloseParen()
	}
	p.SetState(1541)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1540)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameFormDescriptionContext is an interface to support dynamic dispatch.
type INameFormDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OpenParen() IOpenParenContext
	NumericOIDOrMacro() INumericOIDOrMacroContext
	CloseParen() ICloseParenContext
	StructuralClass() IStructuralClassContext
	Must() IMustContext
	AllSP() []antlr.TerminalNode
	SP(i int) antlr.TerminalNode
	AllLineComment() []antlr.TerminalNode
	LineComment(i int) antlr.TerminalNode
	AllNEWLINE() []antlr.TerminalNode
	NEWLINE(i int) antlr.TerminalNode
	May() IMayContext
	Extensions() IExtensionsContext
	AllName() []INameContext
	Name(i int) INameContext
	AllDescription() []IDescriptionContext
	Description(i int) IDescriptionContext
	AllObsolescence() []IObsolescenceContext
	Obsolescence(i int) IObsolescenceContext

	// IsNameFormDescriptionContext differentiates from other interfaces.
	IsNameFormDescriptionContext()
}

type NameFormDescriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameFormDescriptionContext() *NameFormDescriptionContext {
	var p = new(NameFormDescriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescription
	return p
}

func InitEmptyNameFormDescriptionContext(p *NameFormDescriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = RFC4512ParserRULE_nameFormDescription
}

func (*NameFormDescriptionContext) IsNameFormDescriptionContext() {}

func NewNameFormDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameFormDescriptionContext {
	var p = new(NameFormDescriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = RFC4512ParserRULE_nameFormDescription

	return p
}

func (s *NameFormDescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *NameFormDescriptionContext) OpenParen() IOpenParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpenParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpenParenContext)
}

func (s *NameFormDescriptionContext) NumericOIDOrMacro() INumericOIDOrMacroContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOIDOrMacroContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOIDOrMacroContext)
}

func (s *NameFormDescriptionContext) CloseParen() ICloseParenContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloseParenContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloseParenContext)
}

func (s *NameFormDescriptionContext) StructuralClass() IStructuralClassContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructuralClassContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructuralClassContext)
}

func (s *NameFormDescriptionContext) Must() IMustContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMustContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMustContext)
}

func (s *NameFormDescriptionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserSP)
}

func (s *NameFormDescriptionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserSP, i)
}

func (s *NameFormDescriptionContext) AllLineComment() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserLineComment)
}

func (s *NameFormDescriptionContext) LineComment(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserLineComment, i)
}

func (s *NameFormDescriptionContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(RFC4512ParserNEWLINE)
}

func (s *NameFormDescriptionContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(RFC4512ParserNEWLINE, i)
}

func (s *NameFormDescriptionContext) May() IMayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMayContext)
}

func (s *NameFormDescriptionContext) Extensions() IExtensionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtensionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtensionsContext)
}

func (s *NameFormDescriptionContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *NameFormDescriptionContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *NameFormDescriptionContext) AllDescription() []IDescriptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptionContext); ok {
			len++
		}
	}

	tst := make([]IDescriptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptionContext); ok {
			tst[i] = t.(IDescriptionContext)
			i++
		}
	}

	return tst
}

func (s *NameFormDescriptionContext) Description(i int) IDescriptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *NameFormDescriptionContext) AllObsolescence() []IObsolescenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObsolescenceContext); ok {
			len++
		}
	}

	tst := make([]IObsolescenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObsolescenceContext); ok {
			tst[i] = t.(IObsolescenceContext)
			i++
		}
	}

	return tst
}

func (s *NameFormDescriptionContext) Obsolescence(i int) IObsolescenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObsolescenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObsolescenceContext)
}

func (s *NameFormDescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameFormDescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameFormDescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.EnterNameFormDescription(s)
	}
}

func (s *NameFormDescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RFC4512Listener); ok {
		listenerT.ExitNameFormDescription(s)
	}
}

func (p *RFC4512Parser) NameFormDescription() (localctx INameFormDescriptionContext) {
	localctx = NewNameFormDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, RFC4512ParserRULE_nameFormDescription)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1543)
		p.OpenParen()
	}
	p.SetState(1547)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 269, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1544)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1549)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 269, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1551)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1550)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1554)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1553)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1559)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == RFC4512ParserSP {
		{
			p.SetState(1556)
			p.Match(RFC4512ParserSP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1561)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1562)
		p.NumericOIDOrMacro()
	}
	p.SetState(1566)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 273, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1563)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1568)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 273, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1570)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1569)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1573)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1572)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1594)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 280, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1578)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 276, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1575)
					p.Name()
				}

			case 2:
				{
					p.SetState(1576)
					p.Description()
				}

			case 3:
				{
					p.SetState(1577)
					p.Obsolescence()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			p.SetState(1583)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 277, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1580)
						p.Match(RFC4512ParserSP)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1585)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 277, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(1587)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserLineComment {
				{
					p.SetState(1586)
					p.Match(RFC4512ParserLineComment)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1590)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == RFC4512ParserNEWLINE {
				{
					p.SetState(1589)
					p.Match(RFC4512ParserNEWLINE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		p.SetState(1596)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 280, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

	{
		p.SetState(1597)
		p.StructuralClass()
	}
	p.SetState(1601)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 281, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1598)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1603)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 281, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1604)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1608)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1607)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

	{
		p.SetState(1610)
		p.Must()
	}
	p.SetState(1614)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 284, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1611)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1616)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 284, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1618)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1617)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1621)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 286, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1620)
			p.Match(RFC4512ParserNEWLINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

	p.SetState(1636)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserSP {
		{
			p.SetState(1623)
			p.May()
		}
		p.SetState(1627)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == RFC4512ParserSP {
			{
				p.SetState(1624)
				p.Match(RFC4512ParserSP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1629)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1631)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == RFC4512ParserLineComment {
			{
				p.SetState(1630)
				p.Match(RFC4512ParserLineComment)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1634)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 289, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1633)
				p.Match(RFC4512ParserNEWLINE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	}
	p.SetState(1639)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserXString || _la == RFC4512ParserNEWLINE {
		{
			p.SetState(1638)
			p.Extensions()
		}

	}
	{
		p.SetState(1641)
		p.CloseParen()
	}
	p.SetState(1643)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == RFC4512ParserLineComment {
		{
			p.SetState(1642)
			p.Match(RFC4512ParserLineComment)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}
